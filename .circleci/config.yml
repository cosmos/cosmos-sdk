version: 2.1

executors:
  golang:
    docker:
      - image: circleci/golang:1.12.7
  docs:
    docker:
      - image: tendermintdev/docker-website-deployment
    environment:
      AWS_REGION: us-east-1

commands:
  make:
    parameters:
      description:
        type: string
      target:
        type: string
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - restore_cache:
          keys:
            - go-src-v1-{{ .Revision }}
      - checkout
      - restore_cache:
            keys:
              - go-mod-v1-{{ checksum "go.sum" }}
      - run:
          name: << parameters.description >>
          command: |
            cp /tmp/workspace/bin/* /go/bin/
            make << parameters.target >>

jobs:
  get_tools:
    executor: golang
    steps:
      - run:
          name: Get runsim and statik
          command: |
            mkdir -p /tmp/workspace/bin
            go get github.com/cosmos/tools/cmd/runsim github.com/rakyll/statik
            cp ${GOPATH}/bin/* /tmp/workspace/bin/
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - bin
  setup_dependencies:
    executor: golang
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
      - run:
          name: Cache go modules
          command: make go-mod-cache
      - run:
          name: Build
          command: make build
      - run:
          name: Git garbage collection
          command: git gc
      - save_cache:
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"
      - save_cache:
          key: go-src-v1-{{ .Revision }}
          paths:
            - ".git"

  test_sim_app_nondeterminism:
    executor: golang
    steps:
      - make:
          target: test_sim_app_nondeterminism
          description: "Test individual module simulations"

  test_sim_app_fast:
    executor: golang
    steps:
     - make:
          target: test_sim_app_fast
          description: "Test full application simulation"

  test_sim_app_import_export:
    executor: golang
    steps:
      - make:
          target: test_sim_app_import_export
          description: "Test application import/export simulation"

  test_sim_app_multi_seed_long:
    executor: golang
    steps:
      - make:
          target: test_sim_app_multi_seed
          description: "Test multi-seed application simulation long"

  test_sim_app_multi_seed:
    executor: golang
    steps:
      - make:
          target: test_sim_app_multi_seed_short
          description: "Test multi-seed application simulation short"

  test_cover:
    executor: golang
    parallelism: 4
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
      - run:
          name: Run tests
          command: |
            export VERSION="$(git describe --tags --long | sed 's/v\(.*\)/\1/')"
            export GO111MODULE=on
            mkdir -p /tmp/logs /tmp/workspace/profiles
            for pkg in $(go list ./... | grep -v '/simulation' | circleci tests split); do
              id=$(echo "$pkg" | sed 's|[/.]|_|g')
              go test -mod=readonly -timeout 8m -race -coverprofile=/tmp/workspace/profiles/$id.out -covermode=atomic -tags='ledger test_ledger_mock' "$pkg" | tee "/tmp/logs/$id-$RANDOM.log"
            done
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - "profiles/*"
      - store_artifacts:
          path: /tmp/logs

  upload_coverage:
    executor: golang
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - run:
          name: gather
          command: |
            echo "--> Concatenating profiles:"
            ls /tmp/workspace/profiles/
            echo "mode: atomic" > coverage.txt
            for prof in $(ls /tmp/workspace/profiles/); do
              tail -n +2 /tmp/workspace/profiles/"$prof" >> coverage.txt
            done
      - run:
          name: filter out DONTCOVER
          command: |
            excludelist="$(find ./ -type f -name '*.go' | xargs grep -l 'DONTCOVER' | xargs realpath --relative-to=$GOPATH/src)"
            for filename in ${excludelist}; do
              echo "Excluding ${filename} ..."
              sed -i "\%${filename}:%d" coverage.txt
            done
      - run:
          name: upload
          command: bash <(curl -s https://codecov.io/bash) -f coverage.txt

  check_statik:
    executor: golang
    steps:
      - make:
          target: update-swagger-docs
          description: check if statik.go is up-to-date

workflows:
  version: 2
  test-suite:
    jobs:
      - get_tools
      - check_statik:
          requires:
            - setup_dependencies
            - get_tools
      - setup_dependencies:
          # filters here are needed to enable this job also for tags
          filters:
            tags:
              only:
                - /^v.*/
      - test_sim_app_nondeterminism:
          requires:
            - setup_dependencies
            - get_tools
      - test_sim_app_fast:
          requires:
            - setup_dependencies
            - get_tools
      - test_sim_app_import_export:
          requires:
            - setup_dependencies
            - get_tools
      - test_sim_app_multi_seed:
          requires:
            - setup_dependencies
            - get_tools
      - test_sim_app_multi_seed_long:
          requires:
            - setup_dependencies
            - get_tools
      - test_cover:
          requires:
            - setup_dependencies
            - get_tools
      - upload_coverage:
          requires:
            - test_cover
