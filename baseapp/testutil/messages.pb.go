// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: messages.proto

package testutil

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgCounter struct {
	Counter       int64 `protobuf:"varint,1,opt,name=counter,proto3" json:"counter,omitempty"`
	FailOnHandler bool  `protobuf:"varint,2,opt,name=fail_on_handler,json=failOnHandler,proto3" json:"fail_on_handler,omitempty"`
}

func (m *MsgCounter) Reset()         { *m = MsgCounter{} }
func (m *MsgCounter) String() string { return proto.CompactTextString(m) }
func (*MsgCounter) ProtoMessage()    {}
func (*MsgCounter) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dc296cbfe5ffcd5, []int{0}
}
func (m *MsgCounter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCounter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCounter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCounter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCounter.Merge(m, src)
}
func (m *MsgCounter) XXX_Size() int {
	return m.Size()
}
func (m *MsgCounter) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCounter.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCounter proto.InternalMessageInfo

func (m *MsgCounter) GetCounter() int64 {
	if m != nil {
		return m.Counter
	}
	return 0
}

func (m *MsgCounter) GetFailOnHandler() bool {
	if m != nil {
		return m.FailOnHandler
	}
	return false
}

type MsgCounter2 struct {
	Counter int64 `protobuf:"varint,1,opt,name=counter,proto3" json:"counter,omitempty"`
}

func (m *MsgCounter2) Reset()         { *m = MsgCounter2{} }
func (m *MsgCounter2) String() string { return proto.CompactTextString(m) }
func (*MsgCounter2) ProtoMessage()    {}
func (*MsgCounter2) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dc296cbfe5ffcd5, []int{1}
}
func (m *MsgCounter2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCounter2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCounter2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCounter2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCounter2.Merge(m, src)
}
func (m *MsgCounter2) XXX_Size() int {
	return m.Size()
}
func (m *MsgCounter2) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCounter2.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCounter2 proto.InternalMessageInfo

func (m *MsgCounter2) GetCounter() int64 {
	if m != nil {
		return m.Counter
	}
	return 0
}

type MsgCreateCounterResponse struct {
}

func (m *MsgCreateCounterResponse) Reset()         { *m = MsgCreateCounterResponse{} }
func (m *MsgCreateCounterResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateCounterResponse) ProtoMessage()    {}
func (*MsgCreateCounterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dc296cbfe5ffcd5, []int{2}
}
func (m *MsgCreateCounterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateCounterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateCounterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateCounterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateCounterResponse.Merge(m, src)
}
func (m *MsgCreateCounterResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateCounterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateCounterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateCounterResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCounter)(nil), "testdata.MsgCounter")
	proto.RegisterType((*MsgCounter2)(nil), "testdata.MsgCounter2")
	proto.RegisterType((*MsgCreateCounterResponse)(nil), "testdata.MsgCreateCounterResponse")
}

func init() { proto.RegisterFile("messages.proto", fileDescriptor_4dc296cbfe5ffcd5) }

var fileDescriptor_4dc296cbfe5ffcd5 = []byte{
	// 281 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0xc1, 0x4a, 0xf3, 0x40,
	0x14, 0x85, 0x3b, 0xff, 0x0f, 0xb6, 0x8c, 0x68, 0x21, 0x74, 0x11, 0xb3, 0x18, 0x4a, 0x16, 0xda,
	0x4d, 0x33, 0x50, 0xdf, 0x40, 0x17, 0x2a, 0xa2, 0x42, 0x16, 0x2e, 0xdc, 0x94, 0x49, 0x72, 0x3b,
	0x0d, 0x26, 0x73, 0x43, 0xee, 0x64, 0xe1, 0x5b, 0xf8, 0x58, 0x2e, 0xbb, 0x74, 0x29, 0xc9, 0x8b,
	0x48, 0x92, 0x86, 0x22, 0xe8, 0x6a, 0xee, 0xfd, 0xce, 0xe1, 0x9c, 0x99, 0xe1, 0xa7, 0x39, 0x10,
	0x29, 0x0d, 0x14, 0x14, 0x25, 0x5a, 0x74, 0x26, 0x16, 0xc8, 0x26, 0xca, 0x2a, 0x6f, 0xa6, 0x51,
	0x63, 0x07, 0x65, 0x3b, 0xf5, 0xba, 0x77, 0xa6, 0x11, 0x75, 0x06, 0xb2, 0xdb, 0xa2, 0x6a, 0x23,
	0x95, 0x79, 0xeb, 0x25, 0xff, 0x91, 0xf3, 0x07, 0xd2, 0xd7, 0x58, 0x19, 0x0b, 0xa5, 0xe3, 0xf2,
	0x71, 0xdc, 0x8f, 0x2e, 0x9b, 0xb3, 0xc5, 0xff, 0x70, 0x58, 0x9d, 0x73, 0x3e, 0xdd, 0xa8, 0x34,
	0x5b, 0xa3, 0x59, 0x6f, 0x95, 0x49, 0x32, 0x28, 0xdd, 0x7f, 0x73, 0xb6, 0x98, 0x84, 0x27, 0x2d,
	0x7e, 0x32, 0xb7, 0x3d, 0xf4, 0x2f, 0xf8, 0xf1, 0x21, 0x6f, 0xf5, 0x77, 0xa0, 0xef, 0x71, 0xb7,
	0x35, 0x96, 0xa0, 0x2c, 0xec, 0xed, 0x21, 0x50, 0x81, 0x86, 0x60, 0xf5, 0xcc, 0xc7, 0xc3, 0x8d,
	0xee, 0xf9, 0xf4, 0xce, 0xc4, 0x25, 0x28, 0x1a, 0x5c, 0xce, 0x2c, 0x18, 0x9e, 0x1b, 0x1c, 0xaa,
	0x3c, 0xff, 0x27, 0xfd, 0x2d, 0xf7, 0xea, 0xe6, 0xa3, 0x16, 0x6c, 0x57, 0x0b, 0xf6, 0x55, 0x0b,
	0xf6, 0xde, 0x88, 0xd1, 0xae, 0x11, 0xa3, 0xcf, 0x46, 0x8c, 0x5e, 0x96, 0x3a, 0xb5, 0xdb, 0x2a,
	0x0a, 0x62, 0xcc, 0x65, 0x8c, 0x94, 0x23, 0xed, 0x8f, 0x25, 0x25, 0xaf, 0x32, 0x52, 0x04, 0xaa,
	0x28, 0x64, 0xdb, 0x50, 0xd9, 0x34, 0x8b, 0x8e, 0xba, 0xcf, 0xbb, 0xfc, 0x0e, 0x00, 0x00, 0xff,
	0xff, 0xef, 0xeb, 0x92, 0x6b, 0x89, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CounterClient is the client API for Counter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CounterClient interface {
	IncreaseCounter(ctx context.Context, in *MsgCounter, opts ...grpc.CallOption) (*MsgCreateCounterResponse, error)
}

type counterClient struct {
	cc grpc1.ClientConn
}

func NewCounterClient(cc grpc1.ClientConn) CounterClient {
	return &counterClient{cc}
}

func (c *counterClient) IncreaseCounter(ctx context.Context, in *MsgCounter, opts ...grpc.CallOption) (*MsgCreateCounterResponse, error) {
	out := new(MsgCreateCounterResponse)
	err := c.cc.Invoke(ctx, "/testdata.Counter/IncreaseCounter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CounterServer is the server API for Counter service.
type CounterServer interface {
	IncreaseCounter(context.Context, *MsgCounter) (*MsgCreateCounterResponse, error)
}

// UnimplementedCounterServer can be embedded to have forward compatible implementations.
type UnimplementedCounterServer struct {
}

func (*UnimplementedCounterServer) IncreaseCounter(ctx context.Context, req *MsgCounter) (*MsgCreateCounterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncreaseCounter not implemented")
}

func RegisterCounterServer(s grpc1.Server, srv CounterServer) {
	s.RegisterService(&_Counter_serviceDesc, srv)
}

func _Counter_IncreaseCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCounter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterServer).IncreaseCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testdata.Counter/IncreaseCounter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterServer).IncreaseCounter(ctx, req.(*MsgCounter))
	}
	return interceptor(ctx, in, info, handler)
}

var _Counter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "testdata.Counter",
	HandlerType: (*CounterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IncreaseCounter",
			Handler:    _Counter_IncreaseCounter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "messages.proto",
}

func (m *MsgCounter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCounter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCounter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FailOnHandler {
		i--
		if m.FailOnHandler {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Counter != 0 {
		i = encodeVarintMessages(dAtA, i, uint64(m.Counter))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgCounter2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCounter2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCounter2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Counter != 0 {
		i = encodeVarintMessages(dAtA, i, uint64(m.Counter))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateCounterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateCounterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateCounterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintMessages(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessages(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCounter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Counter != 0 {
		n += 1 + sovMessages(uint64(m.Counter))
	}
	if m.FailOnHandler {
		n += 2
	}
	return n
}

func (m *MsgCounter2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Counter != 0 {
		n += 1 + sovMessages(uint64(m.Counter))
	}
	return n
}

func (m *MsgCreateCounterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovMessages(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessages(x uint64) (n int) {
	return sovMessages(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCounter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCounter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCounter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counter", wireType)
			}
			m.Counter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Counter |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailOnHandler", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FailOnHandler = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCounter2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCounter2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCounter2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counter", wireType)
			}
			m.Counter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Counter |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateCounterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateCounterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateCounterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessages(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessages
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessages
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessages
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessages        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessages          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessages = fmt.Errorf("proto: unexpected end of group")
)
