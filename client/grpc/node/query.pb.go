// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmos/base/node/query.proto

package node

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ConfigRequest defines the request structure for the Config gRPC query.
type ConfigRequest struct {
}

func (m *ConfigRequest) Reset()         { *m = ConfigRequest{} }
func (m *ConfigRequest) String() string { return proto.CompactTextString(m) }
func (*ConfigRequest) ProtoMessage()    {}
func (*ConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5598a9412acbc4e3, []int{0}
}
func (m *ConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigRequest.Merge(m, src)
}
func (m *ConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *ConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigRequest proto.InternalMessageInfo

// ConfigResponse defines the response structure for the Config gRPC query.
type ConfigResponse struct {
	MinimumGasPrice     string `protobuf:"bytes,1,opt,name=minimum_gas_price,json=minimumGasPrice,proto3" json:"minimum_gas_price,omitempty"`
	Bech32AccountAddr   string `protobuf:"bytes,2,opt,name=bech32_account_addr,json=bech32AccountAddr,proto3" json:"bech32_account_addr,omitempty"`
	Bech32ValidatorAddr string `protobuf:"bytes,3,opt,name=bech32_validator_addr,json=bech32ValidatorAddr,proto3" json:"bech32_validator_addr,omitempty"`
	Bech32ConsensusAddr string `protobuf:"bytes,4,opt,name=bech32_consensus_addr,json=bech32ConsensusAddr,proto3" json:"bech32_consensus_addr,omitempty"`
	Bech32AccountPub    string `protobuf:"bytes,5,opt,name=bech32_account_pub,json=bech32AccountPub,proto3" json:"bech32_account_pub,omitempty"`
	Bech32ValidatorPub  string `protobuf:"bytes,6,opt,name=bech32_validator_pub,json=bech32ValidatorPub,proto3" json:"bech32_validator_pub,omitempty"`
	Bech32ConsensusPub  string `protobuf:"bytes,7,opt,name=bech32_consensus_pub,json=bech32ConsensusPub,proto3" json:"bech32_consensus_pub,omitempty"`
}

func (m *ConfigResponse) Reset()         { *m = ConfigResponse{} }
func (m *ConfigResponse) String() string { return proto.CompactTextString(m) }
func (*ConfigResponse) ProtoMessage()    {}
func (*ConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5598a9412acbc4e3, []int{1}
}
func (m *ConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigResponse.Merge(m, src)
}
func (m *ConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *ConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigResponse proto.InternalMessageInfo

func (m *ConfigResponse) GetMinimumGasPrice() string {
	if m != nil {
		return m.MinimumGasPrice
	}
	return ""
}

func (m *ConfigResponse) GetBech32AccountAddr() string {
	if m != nil {
		return m.Bech32AccountAddr
	}
	return ""
}

func (m *ConfigResponse) GetBech32ValidatorAddr() string {
	if m != nil {
		return m.Bech32ValidatorAddr
	}
	return ""
}

func (m *ConfigResponse) GetBech32ConsensusAddr() string {
	if m != nil {
		return m.Bech32ConsensusAddr
	}
	return ""
}

func (m *ConfigResponse) GetBech32AccountPub() string {
	if m != nil {
		return m.Bech32AccountPub
	}
	return ""
}

func (m *ConfigResponse) GetBech32ValidatorPub() string {
	if m != nil {
		return m.Bech32ValidatorPub
	}
	return ""
}

func (m *ConfigResponse) GetBech32ConsensusPub() string {
	if m != nil {
		return m.Bech32ConsensusPub
	}
	return ""
}

func init() {
	proto.RegisterType((*ConfigRequest)(nil), "cosmos.base.node.v1beta1.ConfigRequest")
	proto.RegisterType((*ConfigResponse)(nil), "cosmos.base.node.v1beta1.ConfigResponse")
}

func init() { proto.RegisterFile("cosmos/base/node/query.proto", fileDescriptor_5598a9412acbc4e3) }

var fileDescriptor_5598a9412acbc4e3 = []byte{
	// 408 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0x4f, 0x6b, 0x14, 0x31,
	0x18, 0xc6, 0x77, 0x56, 0xdd, 0x62, 0x40, 0x6b, 0x63, 0x85, 0x65, 0x29, 0x43, 0xd9, 0x8b, 0x8b,
	0xd8, 0xc4, 0x6e, 0x3f, 0x41, 0xed, 0xa1, 0xd7, 0xa5, 0x82, 0x07, 0x2f, 0x4b, 0x92, 0x89, 0x69,
	0x70, 0x27, 0xef, 0x34, 0x7f, 0x16, 0xbc, 0x0a, 0xde, 0x15, 0xbf, 0x94, 0xc7, 0x82, 0x17, 0x8f,
	0xb2, 0x2b, 0x7e, 0x0e, 0x49, 0x32, 0xa3, 0xdd, 0x2d, 0xe2, 0x69, 0x86, 0xfc, 0x9e, 0xdf, 0xcb,
	0x43, 0xde, 0xa0, 0x03, 0x01, 0xae, 0x06, 0x47, 0x39, 0x73, 0x92, 0x1a, 0xa8, 0x24, 0xbd, 0x0a,
	0xd2, 0xbe, 0x27, 0x8d, 0x05, 0x0f, 0x78, 0x98, 0x29, 0x89, 0x94, 0x44, 0x4a, 0x96, 0xc7, 0x5c,
	0x7a, 0x76, 0x3c, 0xda, 0x57, 0xa0, 0x20, 0x85, 0x68, 0xfc, 0xcb, 0xf9, 0xd1, 0x81, 0x02, 0x50,
	0x0b, 0x49, 0x59, 0xa3, 0x29, 0x33, 0x06, 0x3c, 0xf3, 0x1a, 0x8c, 0xcb, 0x74, 0xbc, 0x8b, 0x1e,
	0x9c, 0x81, 0x79, 0xab, 0xd5, 0x85, 0xbc, 0x0a, 0xd2, 0xf9, 0xf1, 0xaf, 0x3e, 0x7a, 0xd8, 0x9d,
	0xb8, 0x06, 0x8c, 0x93, 0xf8, 0x19, 0xda, 0xab, 0xb5, 0xd1, 0x75, 0xa8, 0xe7, 0x8a, 0xb9, 0x79,
	0x63, 0xb5, 0x90, 0xc3, 0xe2, 0xb0, 0x98, 0xdc, 0xbf, 0xd8, 0x6d, 0xc1, 0x39, 0x73, 0xb3, 0x78,
	0x8c, 0x09, 0x7a, 0xcc, 0xa5, 0xb8, 0x3c, 0x99, 0xce, 0x99, 0x10, 0x10, 0x8c, 0x9f, 0xb3, 0xaa,
	0xb2, 0xc3, 0x7e, 0x4a, 0xef, 0x65, 0x74, 0x9a, 0xc9, 0x69, 0x55, 0x59, 0x3c, 0x45, 0x4f, 0xda,
	0xfc, 0x92, 0x2d, 0x74, 0xc5, 0x3c, 0xd8, 0x6c, 0xdc, 0x49, 0x46, 0x3b, 0xec, 0x75, 0xc7, 0xb6,
	0x1c, 0x11, 0xfb, 0x19, 0x17, 0x5c, 0x76, 0xee, 0xde, 0x74, 0xce, 0x3a, 0x96, 0x9c, 0xe7, 0x08,
	0x6f, 0xf5, 0x6a, 0x02, 0x1f, 0xde, 0x4b, 0xc2, 0xa3, 0x8d, 0x5a, 0xb3, 0xc0, 0xf1, 0x0b, 0xb4,
	0x7f, 0xab, 0x55, 0xcc, 0x0f, 0x52, 0x1e, 0x6f, 0x95, 0xda, 0x34, 0xfe, 0x76, 0x8a, 0xc6, 0xce,
	0x4d, 0xe3, 0x4f, 0xa5, 0x59, 0xe0, 0xd3, 0xcf, 0x05, 0xda, 0x79, 0x25, 0xed, 0x32, 0xde, 0xda,
	0xc7, 0x02, 0x0d, 0xf2, 0xa5, 0xe3, 0xa7, 0xe4, 0x5f, 0xfb, 0x25, 0x1b, 0x8b, 0x1a, 0x4d, 0xfe,
	0x1f, 0xcc, 0xfb, 0x1b, 0x4f, 0x3e, 0x7c, 0xfb, 0xf9, 0xa5, 0x3f, 0xc6, 0x87, 0xf4, 0xd6, 0xc3,
	0x6a, 0x0d, 0x2a, 0x92, 0xf1, 0xf2, 0xfc, 0xeb, 0xaa, 0x2c, 0xae, 0x57, 0x65, 0xf1, 0x63, 0x55,
	0x16, 0x9f, 0xd6, 0x65, 0xef, 0x7a, 0x5d, 0xf6, 0xbe, 0xaf, 0xcb, 0xde, 0x9b, 0x23, 0xa5, 0xfd,
	0x65, 0xe0, 0x44, 0x40, 0xdd, 0x4d, 0xc9, 0x9f, 0x23, 0x57, 0xbd, 0xa3, 0x62, 0xa1, 0xa5, 0xf1,
	0x54, 0xd9, 0x46, 0xa4, 0xb9, 0x7c, 0x90, 0x5e, 0xd7, 0xc9, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xb0, 0x48, 0x6b, 0x65, 0xcb, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServiceClient interface {
	// Config queries for the application and operator configuration.
	Config(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error)
}

type serviceClient struct {
	cc grpc1.ClientConn
}

func NewServiceClient(cc grpc1.ClientConn) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) Config(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error) {
	out := new(ConfigResponse)
	err := c.cc.Invoke(ctx, "/cosmos.base.node.v1beta1.Service/Config", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
type ServiceServer interface {
	// Config queries for the application and operator configuration.
	Config(context.Context, *ConfigRequest) (*ConfigResponse, error)
}

// UnimplementedServiceServer can be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (*UnimplementedServiceServer) Config(ctx context.Context, req *ConfigRequest) (*ConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Config not implemented")
}

func RegisterServiceServer(s grpc1.Server, srv ServiceServer) {
	s.RegisterService(&_Service_serviceDesc, srv)
}

func _Service_Config_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Config(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.base.node.v1beta1.Service/Config",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Config(ctx, req.(*ConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cosmos.base.node.v1beta1.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Config",
			Handler:    _Service_Config_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cosmos/base/node/query.proto",
}

func (m *ConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Bech32ConsensusPub) > 0 {
		i -= len(m.Bech32ConsensusPub)
		copy(dAtA[i:], m.Bech32ConsensusPub)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Bech32ConsensusPub)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Bech32ValidatorPub) > 0 {
		i -= len(m.Bech32ValidatorPub)
		copy(dAtA[i:], m.Bech32ValidatorPub)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Bech32ValidatorPub)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Bech32AccountPub) > 0 {
		i -= len(m.Bech32AccountPub)
		copy(dAtA[i:], m.Bech32AccountPub)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Bech32AccountPub)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Bech32ConsensusAddr) > 0 {
		i -= len(m.Bech32ConsensusAddr)
		copy(dAtA[i:], m.Bech32ConsensusAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Bech32ConsensusAddr)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Bech32ValidatorAddr) > 0 {
		i -= len(m.Bech32ValidatorAddr)
		copy(dAtA[i:], m.Bech32ValidatorAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Bech32ValidatorAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Bech32AccountAddr) > 0 {
		i -= len(m.Bech32AccountAddr)
		copy(dAtA[i:], m.Bech32AccountAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Bech32AccountAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MinimumGasPrice) > 0 {
		i -= len(m.MinimumGasPrice)
		copy(dAtA[i:], m.MinimumGasPrice)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MinimumGasPrice)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MinimumGasPrice)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Bech32AccountAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Bech32ValidatorAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Bech32ConsensusAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Bech32AccountPub)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Bech32ValidatorPub)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Bech32ConsensusPub)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumGasPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinimumGasPrice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bech32AccountAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bech32AccountAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bech32ValidatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bech32ValidatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bech32ConsensusAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bech32ConsensusAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bech32AccountPub", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bech32AccountPub = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bech32ValidatorPub", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bech32ValidatorPub = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bech32ConsensusPub", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bech32ConsensusPub = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
