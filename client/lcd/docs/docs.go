// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2018-07-09 10:52:33.917498846 +0800 CST m=+0.182625290

package docs

import (
	"bytes"
	"encoding/json"
	"fmt"
	"github.com/cosmos/cosmos-sdk/client"
	"github.com/spf13/viper"
	"github.com/swaggo/swag"
	"github.com/tendermint/tendermint/libs/cli"
	"reflect"
	"strings"
	"github.com/cosmos/cosmos-sdk/client/utils"
)

var doc = `{
    "swagger": "2.0",
    "info": {
        "description": "All Gaia-lite supported APIs will be shown by this swagger-ui page. You can access these APIs through this page.",
        "title": "Gaia-lite Swagger-UI",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "host": "localhost:1317",
    "basePath": "/",
    "paths": {
        "/bank/balances/{address}": {
            "get": {
                "description": "Get token information of user specific address",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Bank ICS20"
                ],
                "summary": "Get token information",
                "parameters": [
                    {
                        "type": "string",
                        "description": "address",
                        "name": "address",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/sdk.Coins"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/response.httputil.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/response.httputil.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/response.httputil.HTTPError"
                        }
                    }
                }
            }
        },
        "/bank/transfers": {
            "post": {
                "description": "This API require the Gaia-lite has keystore module. It will ask keystore module for transaction signature",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Bank ICS20"
                ],
                "summary": "Send coins to a address",
                "parameters": [
                    {
                        "description": "transfer asset",
                        "name": "sendAsset",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/body.bank.Transfer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/response.BroadcastTxCommitResult"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/response.httputil.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/response.httputil.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/response.httputil.HTTPError"
                        }
                    }
                }
            }
        },
        "/auth/accounts/{address}": {
            "get": {
                "description": "Get the detailed information for specific address",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Key Management"
                ],
                "summary": "Query account information",
                "parameters": [
                    {
                        "type": "string",
                        "description": "address",
                        "name": "address",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/response.auth.BaseAccount"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/response.httputil.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/response.httputil.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/response.httputil.HTTPError"
                        }
                    }
                }
            }
        },
        "/txs": {
            "post": {
                "description": "Broadcast transaction in user specified way",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transaction ICS0"
                ],
				"parameters": [
					{
                        "description": "tx byte array and return type",
                        "name": "txAndReturn",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/body.tx.Broadcast"
                        }
                    }
                ],
                "summary": "Broadcast transaction",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/response.BroadcastTxCommitResult"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/response.httputil.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/response.httputil.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/response.httputil.HTTPError"
                        }
                    }
                }
            }
        },
        "/node_version": {
            "get": {
                "description": "Get connected full node version",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "General"
                ],
                "summary": "Get connected full node version",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/response.httputil.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/response.httputil.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/response.httputil.HTTPError"
                        }
                    }
                }
            }
        },
        "/version": {
            "get": {
                "description": "Get Gaia-lite version",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "General"
                ],
                "summary": "Get Gaia-lite version",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/response.httputil.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/response.httputil.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/response.httputil.HTTPError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
		"sdk.Coin": {
            "type": "object",
            "properties": {
                "denom": {
                    "type": "string"
                },
                "amount": {
                    "type": "string"
                }
            }
        },
        "sdk.Coins": {
            "type": "array",
            "items": {
                "type": "object",
                "$ref": "#/definitions/sdk.Coin"
            }
        },
        "common.KVPair": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "integer"
                }
            }
        },
        "common.KVPairs": {
            "type": "array",
            "items": {
                "type": "object",
                "$ref": "#/definitions/common.KVPair"
            }
        },
        "common.KI64Pair": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "integer"
                }
            }
        },
        "response.CheckTxResult": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "type": "string"
                },
                "gas_used": {
                    "type": "integer"
                },
                "gas_wanted": {
                    "type": "integer"
                },
                "info": {
                    "type": "string"
                },
                "log": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/common.KVPairs"
                    }
                }
            }
        },
        "response.DeliverTxResult": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "type": "string"
                },
                "gas_used": {
                    "type": "integer"
                },
                "gas_wanted": {
                    "type": "integer"
                },
                "info": {
                    "type": "string"
                },
                "log": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/common.KVPairs"
                    }
                }
            }
        },
        "response.BroadcastTxCommitResult": {
            "type": "object",
            "properties": {
                "check_tx": {
                    "type": "object",
                    "$ref": "#/definitions/response.CheckTxResult"
                },
                "deliver_tx": {
                    "type": "object",
                    "$ref": "#/definitions/response.DeliverTxResult"
                },
                "hash": {
                    "type": "string"
                },
                "height": {
                    "type": "integer"
                }
            }
        },
		"response.httputil.HTTPError": {
            "type": "object",
            "properties": {
                "rest api": {
                    "type": "string",
                    "example": "2.0"
                },
                "code": {
                    "type": "integer",
                    "example": 500
                },
                "error message": {
                    "type": "string"
                }
            }
        },
		"response.auth.BaseAccount": {
            "type": "object",
            "properties": {
                "account_number": {
                    "type": "integer"
                },
                "address": {
                    "type": "string"
                },
                "coins": {
                    "type": "object",
                    "$ref": "#/definitions/sdk.Coins"
                },
                "public_key": {
                    "type": "string"
                },
                "sequence": {
                    "type": "integer"
                }
            }
        },
		"body.bank.Transfer": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "to_address": {
                    "type": "string"
                },
                "from_address": {
                    "type": "string"
                },
                "amount": {
                    "type": "object",
                    "$ref": "#/definitions/sdk.Coins"
                },
                "password": {
                    "type": "string"
                },
                "chain_id": {
                    "type": "string"
                },
                "account_number": {
                    "type": "string"
                },
                "gas": {
                    "type": "string"
                },
                "fee": {
                    "type": "string",
                    "example": "1steak"
                },
                "sequence": {
                    "type": "string"
                },
                "generate": {
                    "type": "boolean",
                    "example": false
                },
                "ensure_account_sequence": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "body.tx.Broadcast": {
            "type": "object",
            "properties": {
                "transaction": {
                    "type": "string"
                },
                "return": {
                    "type": "string",
                    "example": "block"
                }
            }
        }
    }
}`

var tagToModuleDesc = `
{
  "General":"general",
  "Bank ICS20":"bank",
  "Transaction ICS0":"transaction"
}
`

type s struct{}

func addOptionsToDesc(desc string) string {
	home := viper.GetString(cli.HomeFlag)
	listenAddr := viper.GetString(client.FlagListenAddr)
	swaggerHost := viper.GetString(client.FlagSwaggerHostIP)
	nodeList := viper.GetString(client.FlagNodeList)
	chainID := viper.GetString(client.FlagChainID)
	trustNode := viper.GetString(client.FlagTrustNode)
	modules := viper.GetString(client.FlagModules)

	var buffer bytes.Buffer
	buffer.WriteString(desc)
	buffer.WriteString("\n")

	buffer.WriteString("Gaid-lite starting options:")
	buffer.WriteString("\n")

	buffer.WriteString(cli.HomeFlag)
	buffer.WriteString(": ")
	buffer.WriteString(home)
	buffer.WriteString("\n")

	buffer.WriteString(client.FlagListenAddr)
	buffer.WriteString(": ")
	buffer.WriteString(listenAddr)
	buffer.WriteString("\n")

	buffer.WriteString(client.FlagSwaggerHostIP)
	buffer.WriteString(": ")
	buffer.WriteString(swaggerHost)
	buffer.WriteString("\n")

	buffer.WriteString(client.FlagNodeList)
	buffer.WriteString(": ")
	buffer.WriteString(nodeList)
	buffer.WriteString("\n")

	buffer.WriteString(client.FlagChainID)
	buffer.WriteString(": ")
	buffer.WriteString(chainID)
	buffer.WriteString("\n")

	buffer.WriteString(client.FlagTrustNode)
	buffer.WriteString(": ")
	buffer.WriteString(trustNode)
	buffer.WriteString("\n")

	buffer.WriteString(client.FlagModules)
	buffer.WriteString(": ")
	buffer.WriteString(modules)
	buffer.WriteString("\n")

	return buffer.String()
}

func modularizeAPIs(modules string, paths map[string]interface{}) map[string]interface{} {
	filteredAPIs := make(map[string]interface{})

	var moduleToTag map[string]string
	if err := json.Unmarshal([]byte(tagToModuleDesc), &moduleToTag); err != nil {
		panic(err)
	}
	moduleArray := strings.Split(modules, ",")

	for path, operations := range paths {
		if reflect.TypeOf(operations).String() != "map[string]interface {}" {
			panic(fmt.Errorf("unexpected data type, expected: map[string]interface {}, got: %s",
				reflect.TypeOf(operations).String()))
		}
		operationAPIs := operations.(map[string]interface{})
		for operation, API := range operationAPIs {
			if reflect.TypeOf(API).String() != "map[string]interface {}" {
				panic(fmt.Errorf("unexpected data type, expected: map[string]interface {}, got: %s",
					reflect.TypeOf(API).String()))
			}
			APIInfo := API.(map[string]interface{})
			tags := APIInfo["tags"].([]interface{})
			if len(tags) != 1 {
				panic(fmt.Errorf("only support one tag, got %d tags", len(tags)))
			}

			if reflect.TypeOf(tags[0]).String() != "string" {
				panic(fmt.Errorf("unexpected data type, expected: string, got: %s",
					reflect.TypeOf(tags[0]).String()))
			}
			moduleName := moduleToTag[tags[0].(string)]
			enable := utils.StringArrayContains(moduleArray, moduleName)

			if enable {
				if filteredAPIs[path] != nil {
					originalOperations := filteredAPIs[path].(map[string]interface{})
					originalOperations[operation] = API
					filteredAPIs[path] = originalOperations
				} else {
					originalOperations := make(map[string]interface{})
					originalOperations[operation] = API
					filteredAPIs[path] = originalOperations
				}
			}
		}
	}
	return filteredAPIs
}

func (s *s) ReadDoc() string {
	listenAddr := viper.GetString(client.FlagListenAddr)
	swaggerHost := viper.GetString(client.FlagSwaggerHostIP)
	modules := viper.GetString(client.FlagModules)

	var docs map[string]interface{}
	if err := json.Unmarshal([]byte(doc), &docs); err != nil {
		panic(err)
	}

	addrInfo := strings.Split(listenAddr, ":")
	if len(addrInfo) != 2 {
		panic(fmt.Errorf("invalid listen address"))
	}
	listenPort := addrInfo[1]
	docs["host"] = swaggerHost + ":" + listenPort

	if reflect.TypeOf(docs["info"]).String() != "map[string]interface {}" {
		panic(fmt.Errorf("unexpected data type, expected: map[string]interface {}, got: %s",
			reflect.TypeOf(docs["info"]).String()))
	}
	infos := docs["info"].(map[string]interface{})
	description := infos["description"].(string)

	infos["description"] = addOptionsToDesc(description)
	docs["info"] = infos

	if reflect.TypeOf(docs["paths"]).String() != "map[string]interface {}" {
		panic(fmt.Errorf("unexpected data type, expected: map[string]interface {}, got: %s",
			reflect.TypeOf(docs["paths"]).String()))
	}
	paths := docs["paths"].(map[string]interface{})
	docs["paths"] = modularizeAPIs(modules, paths)

	docString, err := json.Marshal(docs)
	if err != nil {
		panic(err)
	}

	return string(docString)
}
func init() {
	swag.Register(swag.Name, &s{})
}
