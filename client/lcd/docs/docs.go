// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2018-07-09 10:52:33.917498846 +0800 CST m=+0.182625290

package docs

import (
	"github.com/swaggo/swag"
	"github.com/spf13/viper"
	"encoding/json"
	"strings"
	"github.com/cosmos/cosmos-sdk/client"
	"bytes"
	"fmt"
	"reflect"
	"github.com/tendermint/tendermint/libs/cli"
)

var doc = `{
    "swagger": "2.0",
    "info": {
        "description": "All cosmos-lcd supported APIs will be shown by this swagger-ui page. You can access these APIs through this page.",
        "title": "Swagger Cosmos-LCD API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "host": "localhost:1317",
    "basePath": "/",
    "paths": {
        "/stake/delegators/{delegatorAddr}": {
            "get": {
                "description": "Get all delegations (delegation, undelegation and redelegation) from a delegator",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Stake Operation"
                ],
                "summary": "Get all delegations from a delegator",
                "parameters": [
                    {
                        "type": "string",
                        "description": "delegator address, example: cosmosaccaddr1t48m77vw08fqygkz96l3neqdzrnuvh6ansk7ks",
                        "name": "delegatorAddr",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/stake.DelegationSummary"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    }
                }
            }
        },
        "/stake/delegators/{delegatorAddr}/txs": {
            "get": {
                "description": "Get all staking txs (i.e msgs) from a delegator",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Stake Operation"
                ],
                "summary": "Get all staking txs from a delegator",
                "parameters": [
                    {
                        "type": "string",
                        "description": "delegator address, example: cosmosaccaddr1t48m77vw08fqygkz96l3neqdzrnuvh6ansk7ks",
                        "name": "delegatorAddr",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/stake.txInfoArray"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    }
                }
            }
        },
        "/stake/delegators/{delegatorAddr}/validators": {
            "get": {
                "description": "Query all validators that a delegator is bonded to",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Stake Operation"
                ],
                "summary": "Query all validators that a delegator is bonded to",
                "parameters": [
                    {
                        "type": "string",
                        "description": "delegator address, example: cosmosaccaddr1t48m77vw08fqygkz96l3neqdzrnuvh6ansk7ks",
                        "name": "delegatorAddr",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/stake.BechValidatorArray"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    }
                }
            }
        },
        "/stake/delegators/{delegatorAddr}/validators/{validatorAddr}": {
            "get": {
                "description": "Query a validator that a delegator is bonded to",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Stake Operation"
                ],
                "summary": "Query a validator that a delegator is bonded to",
                "parameters": [
                    {
                        "type": "string",
                        "description": "delegator address, example: cosmosaccaddr1t48m77vw08fqygkz96l3neqdzrnuvh6ansk7ks",
                        "name": "delegatorAddr",
                        "in": "path"
                    },
                    {
                        "type": "string",
                        "description": "validator address, example: cosmosaccaddr1t48m77vw08fqygkz96l3neqdzrnuvh6ansk7ks",
                        "name": "validatorAddr",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/stake.BechValidator"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    }
                }
            }
        },
        "/stake/delegators/{delegatorAddr}/delegations/{validatorAddr}": {
            "get": {
                "description": "Query a delegation between a delegator and a validator",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Stake Operation"
                ],
                "summary": "Query a delegation between a delegator and a validator",
                "parameters": [
                    {
                        "type": "string",
                        "description": "delegator address, example: cosmosaccaddr1t48m77vw08fqygkz96l3neqdzrnuvh6ansk7ks",
                        "name": "delegatorAddr",
                        "in": "path"
                    },
                    {
                        "type": "string",
                        "description": "validator address, example: cosmosaccaddr1t48m77vw08fqygkz96l3neqdzrnuvh6ansk7ks",
                        "name": "validatorAddr",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/stake.DelegationWithoutRat"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    }
                }
            }
        },
        "/stake/delegators/{delegatorAddr}/unbonding_delegations/{validatorAddr}": {
            "get": {
                "description": "Query all unbonding_delegations between a delegator and a validator",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Stake Operation"
                ],
                "summary": "Query all unbonding_delegations between a delegator and a validator",
                "parameters": [
                    {
                        "type": "string",
                        "description": "delegator address, example: cosmosaccaddr1t48m77vw08fqygkz96l3neqdzrnuvh6ansk7ks",
                        "name": "delegatorAddr",
                        "in": "path"
                    },
                    {
                        "type": "string",
                        "description": "validator address, example: cosmosaccaddr1t48m77vw08fqygkz96l3neqdzrnuvh6ansk7ks",
                        "name": "validatorAddr",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/stake.UnbondingDelegationArray"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    }
                }
            }
        },
        "/stake/validators": {
            "get": {
                "description": "Get all validators",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Stake Operation"
                ],
                "summary": "Get all validators",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/stake.BechValidatorArray"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    }
                }
            }
        },
        "/stake/validators/{addr}": {
            "get": {
                "description": "Get a single validator info",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Stake Operation"
                ],
                "summary": "Get a single validator info",
                "parameters": [
                    {
                        "type": "string",
                        "description": "validator address, example: cosmosaccaddr1t48m77vw08fqygkz96l3neqdzrnuvh6ansk7ks",
                        "name": "addr",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/stake.BechValidator"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    }
                }
            }
        },
        "/stake/pool": {
            "get": {
                "description": "Query the staking pool information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Stake Operation"
                ],
                "summary": "Query the staking pool information",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/stake.pool"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    }
                }
            }
        },
        "/stake/parameters": {
            "get": {
                "description": "Query the staking params values",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Stake Operation"
                ],
                "summary": "Query the staking params values",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/stake.params"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    }
                }
            }
        },
        "/stake/delegators/:delegatorAddr/delegations": {
            "post": {
                "description": "Send stake related transactions",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Stake Operation"
                ],
                "summary": "Send stake related transaction",
                "parameters": [
                    {
                        "type": "string",
                        "description": "delegator address, example: cosmosaccaddr1t48m77vw08fqygkz96l3neqdzrnuvh6ansk7ks",
                        "name": "delegatorAddr",
                        "in": "path"
                    },
                    {
                        "description": "delegation parameters",
                        "name": "EditDelegationsBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/stake.EditDelegationsBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/stake.transactionResult"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    }
                }
            }
        },
        "/bank/balance/{address}": {
            "get": {
                "description": "Get the detailed information for specific address",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Token Operation"
                ],
                "summary": "Query account information",
                "parameters": [
                    {
                        "type": "string",
                        "description": "address",
                        "name": "address",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/auth.BaseAccount"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    }
                }
            }
        },
        "/bank/transfers": {
            "post": {
                "description": "This API require the Cosmos-LCD have keystore module. It will ask keystore module for transaction signature",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Token Operation"
                ],
                "summary": "Send coins to a address",
                "parameters": [
                    {
                        "description": "transfer asset",
                        "name": "sendAsset",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/bank.transferBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/bank.ResultBroadcastTxCommit"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    }
                }
            }
        },
        "/keys": {
            "get": {
                "description": "Get all keys in the key store",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Key Management"
                ],
                "summary": "list all keys",
                "operationId": "queryKeysRequest",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/keys.KeyOutputs"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new key and persistent it to the key store",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Key Management"
                ],
                "summary": "Create a account",
                "parameters": [
                    {
                        "description": "name and password for a new key",
                        "name": "nameAndPwd",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/keys.NewKeyBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/keys.NewKeyResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    }
                }
            }
        },
        "/keys/get/{name}": {
            "get": {
                "description": "Get detailed information for specific key name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Key Management"
                ],
                "summary": "Get key information",
                "parameters": [
                    {
                        "type": "string",
                        "description": "key name",
                        "name": "name",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/keys.KeyOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    }
                }
            }
        },
        "/keys/seed": {
            "get": {
                "description": "Get a seed for creating key",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Key Management"
                ],
                "summary": "Get a seed",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    }
                }
            }
        },
        "/keys/{name}": {
            "put": {
                "description": "The keys are protected by the password, here this API provides a way to change the password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Key Management"
                ],
                "summary": "Change key password",
                "parameters": [
                    {
                        "type": "string",
                        "description": "key name",
                        "name": "name",
                        "in": "path"
                    },
                    {
                        "description": "key name",
                        "name": "pwd",
                        "in": "body",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/keys.UpdateKeyBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete specific name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Key Management"
                ],
                "summary": "Delete key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "key name",
                        "name": "name",
                        "in": "path"
                    },
                    {
                        "description": "password",
                        "name": "pwd",
                        "in": "body",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/keys.DeleteKeyBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    }
                }
            }
        },
        "/node_version": {
            "get": {
                "description": "Get connected full node version",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "General"
                ],
                "summary": "Get connected full node version",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    }
                }
            }
        },
        "/version": {
            "get": {
                "description": "Get Cosmos-LCD version",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "General"
                ],
                "summary": "Get Cosmos-LCD version",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "auth.BaseAccount": {
            "type": "object",
            "properties": {
                "account_number": {
                    "type": "integer"
                },
                "address": {
                    "type": "string"
                },
                "coins": {
                    "type": "object",
                    "$ref": "#/definitions/sdk.Coins"
                },
                "public_key": {
                    "type": "string"
                },
                "sequence": {
                    "type": "integer"
                }
            }
        },
        "bank.ResponseCheckTx": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "type": "string"
                },
                "gas_used": {
                    "type": "integer"
                },
                "gas_wanted": {
                    "type": "integer"
                },
                "info": {
                    "type": "string"
                },
                "log": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/common.KVPairs"
                    }
                }
            }
        },
        "bank.ResponseDeliverTx": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "type": "string"
                },
                "gas_used": {
                    "type": "integer"
                },
                "gas_wanted": {
                    "type": "integer"
                },
                "info": {
                    "type": "string"
                },
                "log": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/common.KVPairs"
                    }
                }
            }
        },
        "bank.ResultBroadcastTxCommit": {
            "type": "object",
            "properties": {
                "check_tx": {
                    "type": "object",
                    "$ref": "#/definitions/bank.ResponseCheckTx"
                },
                "deliver_tx": {
                    "type": "object",
                    "$ref": "#/definitions/bank.ResponseDeliverTx"
                },
                "hash": {
                    "type": "string"
                },
                "height": {
                    "type": "integer"
                }
            }
        },
        "bank.signedBody": {
            "type": "object",
            "properties": {
                "public_key_list": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "signature_list": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "transaction_data": {
                    "type": "string"
                }
            }
        },
        "bank.transferBody": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "to_address": {
                    "type": "string"
                },
                "from_address": {
                    "type": "string"
                },
                "amount": {
                    "type": "object",
                    "$ref": "#/definitions/sdk.Coins"
                },
                "password": {
                    "type": "string"
                },
                "chain_id": {
                    "type": "string"
                },
                "account_number": {
                    "type": "string"
                },
                "gas": {
                    "type": "string"
                },
                "fee": {
                    "type": "string",
                    "example": "1steak"
                },
                "sequence": {
                    "type": "string"
                },
                "signed": {
                    "type": "boolean",
                    "example": true
                },
                "ensure_account_sequence": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "sdk.Coin": {
            "type": "object",
            "properties": {
                "denom": {
                    "type": "string"
                },
                "amount": {
                    "type": "string"
                }
            }
        },
        "sdk.Coins": {
            "type": "array",
            "items": {
                "type": "object",
                "$ref": "#/definitions/sdk.Coin"
            }
        },
        "common.KVPair": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "integer"
                }
            }
        },
        "common.KVPairs": {
            "type": "array",
            "items": {
                "type": "object",
                "$ref": "#/definitions/common.KVPair"
            }
        },
        "common.KI64Pair": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "integer"
                }
            }
        },
        "keys.DeleteKeyBody": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                }
            }
        },
        "keys.KeyOutput": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "pub_key": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "keys.KeyOutputs": {
            "type": "array",
            "items": {
                "type": "object",
                "$ref": "#/definitions/keys.KeyOutput"
            }
        },
        "keys.NewKeyResponse": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "pub_key": {
                    "type": "string"
                },
                "seed": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "keys.NewKeyBody": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "seed": {
                    "type": "string"
                }
            }
        },
        "keys.UpdateKeyBody": {
            "type": "object",
            "properties": {
                "new_password": {
                    "type": "string"
                },
                "old_password": {
                    "type": "string"
                }
            }
        },
        "httputil.HTTPError": {
            "type": "object",
            "properties": {
                "rest api": {
                    "type": "string",
                    "example": "2.0"
                },
                "code": {
                    "type": "integer",
                    "example": 500
                },
                "error message": {
                    "type": "string"
                }
            }
        },
        "stake.msgDelegationsInput": {
            "type": "object",
            "properties": {
                "delegator_addr": {
                    "type": "string"
                },
                "validator_addr": {
                    "type": "string"
                },
                "delegation": {
                    "type": "object",
                    "$ref": "#/definitions/sdk.Coin"
                }
            }
        },
        "stake.msgBeginUnbondingInput": {
            "type": "object",
            "properties": {
                "delegator_addr": {
                    "type": "string"
                },
                "validator_addr": {
                    "type": "string"
                },
                "shares": {
                    "type": "string"
                }
            }
        },
        "stake.msgCompleteUnbondingInput": {
            "type": "object",
            "properties": {
                "delegator_addr": {
                    "type": "string"
                },
                "validator_addr": {
                    "type": "string"
                }
            }
        },
        "stake.msgBeginRedelegateInput": {
            "type": "object",
            "properties": {
                "delegator_addr": {
                    "type": "string"
                },
                "validator_src_addr": {
                    "type": "string"
                },
                "validator_dst_addr": {
                    "type": "string"
                },
                "shares": {
                    "type": "string"
                }
            }
        },
        "stake.msgCompleteRedelegateInput": {
            "type": "object",
            "properties": {
                "delegator_addr": {
                    "type": "string"
                },
                "validator_src_addr": {
                    "type": "string"
                },
                "validator_dst_addr": {
                    "type": "string"
                }
            }
        },
        "stake.EditDelegationsBody": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "chain_id": {
                    "type": "string"
                },
                "account_number": {
                    "type": "integer"
                },
                "sequence": {
                    "type": "integer"
                },
                "gas": {
                    "type": "integer"
                },
                "delegations": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/stake.msgDelegationsInput"
                    }
                },
                "begin_unbondings": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/stake.msgBeginUnbondingInput"
                    }
                },
                "complete_unbondings": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/stake.msgCompleteUnbondingInput"
                    }
                },
                "begin_redelegates": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/stake.msgBeginRedelegateInput"
                    }
                },
                "complete_redelegates": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/stake.msgCompleteRedelegateInput"
                    }
                }
            }
        },
        "stake.transactionResult": {
            "type": "array",
            "items": {
                "type": "object",
                "$ref": "#/definitions/bank.ResultBroadcastTxCommit"
            }
        },
        "stake.UnbondingDelegation": {
            "type": "object",
            "properties": {
                "delegator_addr": {
                    "type": "string"
                },
                "validator_addr": {
                    "type": "string"
                },
                "initial_balance": {
                    "type": "object",
                    "$ref": "#/definitions/sdk.Coin"
                },
                "balance": {
                    "type": "object",
                    "$ref": "#/definitions/sdk.Coin"
                },
                "creation_height": {
                    "type": "integer"
                },
                "min_time": {
                    "type": "integer"
                }
            }
        },
        "stake.UnbondingDelegationArray": {
            "type": "array",
            "items": {
                "type": "object",
                "$ref": "#/definitions/stake.UnbondingDelegation"
            }
        },
        "stake.Redelegation": {
            "type": "object",
            "properties": {
                "delegator_addr": {
                    "type": "string"
                },
                "validator_src_addr": {
                    "type": "string"
                },
                "validator_dst_addr": {
                    "type": "string"
                },
                "creation_height": {
                    "type": "integer"
                },
                "min_time": {
                    "type": "integer"
                },
                "initial_balance": {
                    "type": "object",
                    "$ref": "#/definitions/sdk.Coin"
                },
                "balance": {
                    "type": "object",
                    "$ref": "#/definitions/sdk.Coin"
                },
                "shares_src": {
                    "type": "string"
                },
                "shares_dst": {
                    "type": "string"
                }
            }
        },
        "stake.RedelegationArray": {
            "type": "array",
            "items": {
                "type": "object",
                "$ref": "#/definitions/stake.Redelegation"
            }
        },
        "stake.Description": {
            "type": "object",
            "properties": {
                "moniker": {
                    "type": "string"
                },
                "identity": {
                    "type": "string"
                },
                "website": {
                    "type": "string"
                },
                "details": {
                    "type": "string"
                }
            }
        },
        "stake.BechValidator": {
            "type": "object",
            "properties": {
                "operator": {
                    "type": "string"
                },
                "pub_key": {
                    "type": "string"
                },
                "revoked": {
                    "type": "boolean"
                },
                "status": {
                    "type": "integer"
                },
                "tokens": {
                    "type": "string"
                },
                "delegator_shares": {
                    "type": "string"
                },
                "description": {
                    "type": "object",
                    "$ref": "#/definitions/stake.Description"
                },
                "bond_height": {
                    "type": "integer"
                },
                "bond_intra_tx_counter": {
                    "type": "integer"
                },
                "proposer_reward_pool": {
                    "type": "object",
                    "$ref": "#/definitions/sdk.Coins"
                },
                "commission": {
                    "type": "string"
                },
                "commission_max": {
                    "type": "string"
                },
                "commission_change_rate": {
                    "type": "string"
                },
                "commission_change_today": {
                    "type": "string"
                },
                "prev_bonded_shares": {
                    "type": "string"
                }
            }
        },
        "stake.BechValidatorArray": {
            "type": "array",
            "items": {
                "type": "object",
                "$ref": "#/definitions/stake.BechValidator"
            }
        },
        "stake.DelegationWithoutRat": {
            "type": "object",
            "properties": {
                "delegator_addr": {
                    "type": "string"
                },
                "validator_addr": {
                    "type": "string"
                },
                "shares": {
                    "type": "string"
                },
                "height": {
                    "type": "integer"
                }
            }
        },
        "stake.DelegationWithoutRatArray": {
            "type": "array",
            "items": {
                "type": "object",
                "$ref": "#/definitions/stake.DelegationWithoutRat"
            }
        },
        "stake.DelegationSummary": {
            "type": "object",
            "properties": {
                "redelegations": {
                    "type": "object",
                    "$ref": "#/definitions/stake.RedelegationArray"
                },
                "unbonding_delegations": {
                    "type": "object",
                    "$ref": "#/definitions/stake.UnbondingDelegationArray"
                },
                "delegations": {
                    "type": "object",
                    "$ref": "#/definitions/stake.DelegationWithoutRatArray"
                }
            }
        },
        "stake.txInfo": {
            "type": "object",
            "properties": {
                "hash": {
                    "type": "string"
                },
                "height": {
                    "type": "integer"
                },
                "tx": {
                    "type": "string"
                },
                "result": {
                    "type": "object",
                    "$ref": "#/definitions/bank.ResponseDeliverTx"
                }
            }
        },
        "stake.txInfoArray": {
            "type": "array",
            "items": {
                "type": "object",
                "$ref": "#/definitions/stake.txInfo"
            }
        },
        "stake.pool": {
            "type": "object",
            "properties": {
                "loose_tokens": {
                    "type": "string"
                },
                "bonded_tokens": {
                    "type": "integer"
                },
                "inflation_last_time": {
                    "type": "string"
                },
                "inflation": {
                    "type": "string"
                },
                "date_last_commission_reset": {
                    "type": "integer"
                },
                "prev_bonded_shares": {
                    "type": "string"
                }
            }
        },
        "stake.params": {
            "type": "object",
            "properties": {
                "inflation_rate_change": {
                    "type": "string"
                },
                "inflation_max": {
                    "type": "string"
                },
                "inflation_min": {
                    "type": "string"
                },
                "goal_bonded": {
                    "type": "string"
                },
                "unbonding_time": {
                    "type": "string"
                },
                "max_validators": {
                    "type": "integer"
                },
                "bond_denom": {
                    "type": "string"
                }
            }
        }
    }
}`

var tagToModuleDesc = `
{
  "General":"general",
  "Key Management":"key",
  "Token Operation":"token",
  "Stake Operation":"stake"
}
`

type s struct{}

func addOptionsToDesc (desc string) string {
	home := viper.GetString(cli.HomeFlag)
	listenAddr := viper.GetString(client.FlagListenAddr)
	swaggerHost := viper.GetString(client.FlagSwaggerHostIP)
	nodeList := viper.GetString(client.FlagNodeList)
	chainID := viper.GetString(client.FlagChainID)
	trustNode := viper.GetString(client.FlagTrustNode)
	modules := viper.GetString(client.FlagModules)

	var buffer bytes.Buffer
	buffer.WriteString(desc)
	buffer.WriteString("\n")

	buffer.WriteString("Cosmos-LCD starting options:")
	buffer.WriteString("\n")

	buffer.WriteString(cli.HomeFlag)
	buffer.WriteString(": ")
	buffer.WriteString(home)
	buffer.WriteString("\n")

	buffer.WriteString(client.FlagListenAddr)
	buffer.WriteString(": ")
	buffer.WriteString(listenAddr)
	buffer.WriteString("\n")

	buffer.WriteString(client.FlagSwaggerHostIP)
	buffer.WriteString(": ")
	buffer.WriteString(swaggerHost)
	buffer.WriteString("\n")

	buffer.WriteString(client.FlagNodeList)
	buffer.WriteString(": ")
	buffer.WriteString(nodeList)
	buffer.WriteString("\n")

	buffer.WriteString(client.FlagChainID)
	buffer.WriteString(": ")
	buffer.WriteString(chainID)
	buffer.WriteString("\n")

	buffer.WriteString(client.FlagTrustNode)
	buffer.WriteString(": ")
	buffer.WriteString(trustNode)
	buffer.WriteString("\n")

	buffer.WriteString(client.FlagModules)
	buffer.WriteString(": ")
	buffer.WriteString(modules)
	buffer.WriteString("\n")

	return buffer.String()
}

func moduleEnabled(modules []string, name string) bool {
	for _, moduleName := range modules {
		if moduleName == name {
			return true
		}
	}
	return false
}

func modularizeAPIs(modules string, paths map[string]interface{}) map[string]interface{} {
	filteredAPIs := make(map[string]interface{})

	var moduleToTag map[string]string
	if err := json.Unmarshal([]byte(tagToModuleDesc), &moduleToTag); err != nil {
		panic(err)
	}
	moduleArray := strings.Split(modules,",")

	for path,operations := range paths {
		if reflect.TypeOf(operations).String() != "map[string]interface {}" {
			panic(fmt.Errorf("unexpected data type, expected: map[string]interface {}, got: %s",
				reflect.TypeOf(operations).String()))
		}
		operationAPIs := operations.(map[string]interface{})
		for operation,API := range operationAPIs {
			if reflect.TypeOf(API).String() != "map[string]interface {}" {
				panic(fmt.Errorf("unexpected data type, expected: map[string]interface {}, got: %s",
					reflect.TypeOf(API).String()))
			}
			APIInfo := API.(map[string]interface{})
			tags := APIInfo["tags"].([]interface{})
			if len(tags) != 1 {
				panic(fmt.Errorf("only support one tag, got %d tags",len(tags)))
			}

			if reflect.TypeOf(tags[0]).String() != "string" {
				panic(fmt.Errorf("unexpected data type, expected: string, got: %s",
					reflect.TypeOf(tags[0]).String()))
			}
			moduleName := moduleToTag[tags[0].(string)]
			enable := moduleEnabled(moduleArray,moduleName)

			if enable {
				if filteredAPIs[path] != nil {
					originalOperations := filteredAPIs[path].(map[string]interface{})
					originalOperations[operation]=API
					filteredAPIs[path] = originalOperations
				} else {
					originalOperations := make(map[string]interface{})
					originalOperations[operation]=API
					filteredAPIs[path] = originalOperations
				}
			}
		}
	}
	return filteredAPIs
}

func (s *s) ReadDoc() string {
	listenAddr := viper.GetString(client.FlagListenAddr)
	swaggerHost := viper.GetString(client.FlagSwaggerHostIP)
	modules := viper.GetString(client.FlagModules)

	var docs map[string]interface{}
	if err := json.Unmarshal([]byte(doc), &docs); err != nil {
		panic(err)
	}

	addrInfo := strings.Split(listenAddr,":")
	if len(addrInfo) != 2{
		panic(fmt.Errorf("invalid listen address"))
	}
	listenPort := addrInfo[1]
	docs["host"] = swaggerHost + ":" + listenPort

	if reflect.TypeOf(docs["info"]).String() != "map[string]interface {}" {
		panic(fmt.Errorf("unexpected data type, expected: map[string]interface {}, got: %s",
			reflect.TypeOf(docs["info"]).String()))
	}
	infos := docs["info"].(map[string]interface{})
	description := infos["description"].(string)

	infos["description"] = addOptionsToDesc(description)
	docs["info"] = infos

	if reflect.TypeOf(docs["paths"]).String() != "map[string]interface {}" {
		panic(fmt.Errorf("unexpected data type, expected: map[string]interface {}, got: %s",
			reflect.TypeOf(docs["paths"]).String()))
	}
	paths := docs["paths"].(map[string]interface{})
	docs["paths"] = modularizeAPIs(modules,paths)

	docString,err := json.Marshal(docs)
	if err != nil {
		panic(err)
	}

	return string(docString)
}
func init() {
	swag.Register(swag.Name, &s{})
}