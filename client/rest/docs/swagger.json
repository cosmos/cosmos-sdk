{
    "swagger": "2.0",
    "info": {
        "contact": {},
        "license": {}
    },
    "paths": {
        "/bank/accounts/{address}/transfers": {
            "post": {
                "description": "Transfer tokens to another account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "bank"
                ],
                "summary": "Token Transfer",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Account address in bech32 format",
                        "name": "address",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Signed transaction along with the broadcasting mode",
                        "name": "tx",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/rest.SendReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns the unsigned transaction",
                        "schema": {
                            "$ref": "#/definitions/rest.sendResponse"
                        }
                    },
                    "400": {
                        "description": "Returned if the request is invalid.",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Returned if the transaction cannot be decoded.",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/bank/balances/{address}": {
            "get": {
                "description": "Query an accounts balance",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "bank"
                ],
                "summary": "Query account balances",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Account address to query",
                        "name": "address",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Block height to execute query (defaults to chain tip)",
                        "name": "height",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/rest.queryBalance"
                        }
                    },
                    "400": {
                        "description": "Returned if the request doesn't have valid query params",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Returned on server error",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/gov/parameters/{type}": {
            "get": {
                "description": "Query either (deposit | tallying | voting) parameters of the governance module",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "governance"
                ],
                "summary": "Query governance parameters",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Type of param (deposit | tallying | voting)",
                        "name": "type",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Block height (defaults to chain tip)",
                        "name": "height",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/rest.ResponseWithHeight"
                        }
                    },
                    "400": {
                        "description": "Returned if the request doesn't have valid query params",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Returned if the type of parameter doesn't exist",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/gov/proposals": {
            "get": {
                "description": "Query the list of governance proposals with optional filters for\nproposal status, depositor, and/or voter.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "governance"
                ],
                "summary": "Query for the list of governance proposals",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Block height (defaults to chain tip)",
                        "name": "height",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter proposals by proposal status (deposit_period | voting_period | passed | rejected)",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter proposals by depositor address",
                        "name": "depositor",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter proposals by voter address",
                        "name": "voter",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/rest.queryProposals"
                        }
                    },
                    "400": {
                        "description": "Returned if the request doesn't have a valid parameters",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Returned if the store query fails",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Generate a proposal transaction that is ready for signing",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "governance"
                ],
                "summary": "Generate an unsigned proposal transaction",
                "parameters": [
                    {
                        "description": "The data required to construct a proposal message, the proposal_type can be (text | parameter_change)",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/rest.PostProposalReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/rest.postProposal"
                        }
                    },
                    "400": {
                        "description": "Returned if the request is invalid",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/gov/proposals/{proposalID}": {
            "get": {
                "description": "Query an individual governance proposal by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "governance"
                ],
                "summary": "Query a governance proposal by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "The ID of the governance proposal",
                        "name": "proposalID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Block height (defaults to chain tip)",
                        "name": "height",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/rest.queryProposal"
                        }
                    },
                    "400": {
                        "description": "Returned if the request doesn't have a valid proposal ID or height",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Returned if the store query fails",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/gov/proposals/{proposalID}/deposits": {
            "get": {
                "description": "Query an individual governance proposal's deposits.\nNOTE: In order to query deposits for passed proposals, the transaction\nrecord must be available otherwise the query will fail. This requires a\nnode that is not pruning transaction history",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "governance"
                ],
                "summary": "Query a governance proposal's deposits",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "The ID of the governance proposal",
                        "name": "proposalID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Block height (defaults to chain tip)",
                        "name": "height",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/rest.queryDeposits"
                        }
                    },
                    "400": {
                        "description": "Returned if the request doesn't have a valid proposal ID or height",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Returned if the store query fails",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Generate a deposit transaction that is ready for signing.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "governance"
                ],
                "summary": "Generate an unsigned deposit transaction",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "The ID of the governance proposal to deposit to",
                        "name": "proposalID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The data required to construct a deposit message",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/rest.DepositReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/rest.postDeposit"
                        }
                    },
                    "400": {
                        "description": "Returned if the request is invalid",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/gov/proposals/{proposalID}/deposits/{depositor}": {
            "get": {
                "description": "Query an individual governance proposal's deposits.\nNOTE: In order to query a deposit for a passed proposal, the transaction\nrecord must be available otherwise the query will fail. This requires a\nnode that is not pruning transaction history",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "governance"
                ],
                "summary": "Query a governance proposal's individual deposit",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "The ID of the governance proposal",
                        "name": "proposalID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The address of the depositor",
                        "name": "depositor",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Block height (defaults to chain tip)",
                        "name": "height",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/rest.queryDeposit"
                        }
                    },
                    "400": {
                        "description": "Returned if the request doesn't have a valid proposalID or depositor",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Returned if the proposal is not found",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Returned if the store query fails",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/gov/proposals/{proposalID}/proposer": {
            "get": {
                "description": "Query an individual governance proposal's proposer.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "governance"
                ],
                "summary": "Query a governance proposal's proposer",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "The ID of the governance proposal",
                        "name": "proposalID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Block height (defaults to chain tip)",
                        "name": "height",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/rest.queryProposer"
                        }
                    },
                    "400": {
                        "description": "Returned if the request doesn't have a valid proposal ID or height",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Returned if the store query fails",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/gov/proposals/{proposalID}/tally": {
            "get": {
                "description": "Query an individual governance proposal's vote tally.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "governance"
                ],
                "summary": "Query a governance proposal's individual tally",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "The ID of the governance proposal",
                        "name": "proposalID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Block height (defaults to chain tip)",
                        "name": "height",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/rest.queryTally"
                        }
                    },
                    "400": {
                        "description": "Returned if the request doesn't have a valid proposal ID or height",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Returned if the store query fails",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/gov/proposals/{proposalID}/votes": {
            "get": {
                "description": "Query an individual governance proposal's votes.\nNOTE: In order to query deposits for passed proposals, the transaction\nrecord must be available otherwise the query will fail. This requires a\nnode that is not pruning transaction history",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "governance"
                ],
                "summary": "Query a governance proposal's votes",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "The ID of the governance proposal",
                        "name": "proposalID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Block height (defaults to chain tip)",
                        "name": "height",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/rest.queryVotesOnProposal"
                        }
                    },
                    "400": {
                        "description": "Returned if the request doesn't have a valid proposal ID or height",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Returned if the store query fails",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Generate a vote transaction that is ready for signing.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "governance"
                ],
                "summary": "Generate an unsigned vote transaction",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "The ID of the governance proposal to vote for",
                        "name": "proposalID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The data required to construct a vote message",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/rest.VoteReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/rest.postVote"
                        }
                    },
                    "400": {
                        "description": "Returned if the request is invalid",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/gov/proposals/{proposalID}/votes/{voter}": {
            "get": {
                "description": "Query an individual governance proposal's vote.\nNOTE: In order to query votes for passed proposals, the transaction\nrecord must be available otherwise the query will fail. This requires a\nnode that is not pruning transaction history",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "governance"
                ],
                "summary": "Query a governance proposal's individual vote",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "The ID of the governance proposal",
                        "name": "proposalID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The address of the voter",
                        "name": "voter",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Block height (defaults to chain tip)",
                        "name": "height",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/rest.queryVote"
                        }
                    },
                    "400": {
                        "description": "Returned if the request doesn't have a valid proposal ID or voter address",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Returned if the proposal is not found",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Returned if the store query fails",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/staking/delegators/{delegatorAddr}/delegations": {
            "get": {
                "description": "Query all delegations from a single delegator address",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "staking"
                ],
                "summary": "Query all delegations from a delegator",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The delegator address",
                        "name": "delegatorAddr",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Block height to execute query (defaults to chain tip)",
                        "name": "height",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/rest.delegatorDelegations"
                        }
                    },
                    "400": {
                        "description": "Returned if the request doesn't have valid query params",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Returned on server error",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Generate a delegation transaction that is ready for signing",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "staking"
                ],
                "summary": "Generate a delegation transaction",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The delegator address",
                        "name": "delegatorAddr",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The delegate request payload",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/rest.DelegateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns the unsigned transaction",
                        "schema": {
                            "$ref": "#/definitions/rest.postDelegation"
                        }
                    },
                    "400": {
                        "description": "Returned if the request is invalid",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Returned if chain-id required but not present, or delegation address incorrect",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "402": {
                        "description": "Returned if fees or gas are invalid",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Returned on server error",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/staking/delegators/{delegatorAddr}/delegations/{validatorAddr}": {
            "get": {
                "description": "Query an individual delegation",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "staking"
                ],
                "summary": "Query an individual delegation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The delegator address",
                        "name": "delegatorAddr",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The validator address",
                        "name": "validatorAddr",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Block height to execute query (defaults to chain tip)",
                        "name": "height",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/rest.delegation"
                        }
                    },
                    "400": {
                        "description": "Returned if the request doesn't have valid query params",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Returned on server error",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/staking/delegators/{delegatorAddr}/redelegations": {
            "post": {
                "description": "Generate a redelegation transaction that is ready for signing",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "staking"
                ],
                "summary": "Generate a redelegation transaction",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The delegator address",
                        "name": "delegatorAddr",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The redelegate request payload",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/rest.RedelegateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns the unsigned transaction",
                        "schema": {
                            "$ref": "#/definitions/rest.postRedelegation"
                        }
                    },
                    "400": {
                        "description": "Returned if the request is invalid",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Returned if chain-id required but not present, or delegation address incorrect",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "402": {
                        "description": "Returned if fees or gas are invalid",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Returned on server error",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/staking/delegators/{delegatorAddr}/txs": {
            "get": {
                "description": "Query all staking transactions from a single delegator address\nNOTE: In order to query staking transactions, the transaction\nrecord must be available otherwise the query will fail. This requires a\nnode that is not pruning transaction history",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "staking"
                ],
                "summary": "Query all staking transactions from a delegator",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The delegator address",
                        "name": "delegatorAddr",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Block height to execute query (defaults to chain tip)",
                        "name": "height",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Type of staking transaction, either (bond | unbond | redelegate)",
                        "name": "type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/rest.delegatorTxs"
                        }
                    },
                    "400": {
                        "description": "Returned if the request doesn't have valid query params",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Returned on server error",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/staking/delegators/{delegatorAddr}/unbonding_delegations": {
            "get": {
                "description": "Query all unbonding delegations from a single delegator address",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "staking"
                ],
                "summary": "Query all unbonding delegations from a delegator",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The delegator address",
                        "name": "delegatorAddr",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Block height to execute query (defaults to chain tip)",
                        "name": "height",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/rest.delegatorUnbondingDelegations"
                        }
                    },
                    "400": {
                        "description": "Returned if the request doesn't have valid query params",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Returned on server error",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Generate an unbonding transaction that is ready for signing",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "staking"
                ],
                "summary": "Generate an unbonding transaction",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The delegator address",
                        "name": "delegatorAddr",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The undelegate request payload",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/rest.UndelegateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns the unsigned transaction",
                        "schema": {
                            "$ref": "#/definitions/rest.postUndelegate"
                        }
                    },
                    "400": {
                        "description": "Returned if the request is invalid",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Returned if chain-id required but not present, or delegation address incorrect",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "402": {
                        "description": "Returned if fees or gas are invalid",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Returned on server error",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/staking/delegators/{delegatorAddr}/unbonding_delegations/{validatorAddr}": {
            "get": {
                "description": "Query all unbonding delegations from a single delegator/validator pair",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "staking"
                ],
                "summary": "Query all unbonding delegations from a delegator/validator pair",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The delegator address",
                        "name": "delegatorAddr",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The validator address",
                        "name": "validatorAddr",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Block height to execute query (defaults to chain tip)",
                        "name": "height",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/rest.unbondingDelegation"
                        }
                    },
                    "400": {
                        "description": "Returned if the request doesn't have valid query params",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Returned on server error",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/staking/delegators/{delegatorAddr}/validators": {
            "get": {
                "description": "Query a delegator's bonded validators",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "staking"
                ],
                "summary": "Query a delegator's bonded validators",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The delegator address",
                        "name": "delegatorAddr",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Block height to execute query (defaults to chain tip)",
                        "name": "height",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/rest.delegatorValidators"
                        }
                    },
                    "400": {
                        "description": "Returned if the request doesn't have valid query params",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Returned on server error",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/staking/delegators/{delegatorAddr}/validators/{validatorAddr}": {
            "get": {
                "description": "Query a delegator's bonded validator",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "staking"
                ],
                "summary": "Query a delegator's bonded validator",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The delegator address",
                        "name": "delegatorAddr",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The validator address",
                        "name": "validatorAddr",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Block height to execute query (defaults to chain tip)",
                        "name": "height",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/rest.delegatorValidator"
                        }
                    },
                    "400": {
                        "description": "Returned if the request doesn't have valid query params",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Returned on server error",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/staking/parameters": {
            "get": {
                "description": "Query the staking parameters",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "staking"
                ],
                "summary": "Query the staking parameters",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Block height to execute query (defaults to chain tip)",
                        "name": "height",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/rest.params"
                        }
                    },
                    "400": {
                        "description": "Returned if the request doesn't have valid query params",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Returned on server error",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/staking/pool": {
            "get": {
                "description": "Query the staking pools",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "staking"
                ],
                "summary": "Query the staking pool",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Block height to execute query (defaults to chain tip)",
                        "name": "height",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/rest.pool"
                        }
                    },
                    "400": {
                        "description": "Returned if the request doesn't have valid query params",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Returned on server error",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/staking/redelegations": {
            "get": {
                "description": "Query all redelegations filtered by delegator, validator_from, and/or validator_to",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "staking"
                ],
                "summary": "Query all redelegations with filters",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The delegator address",
                        "name": "delegator",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The source validator address",
                        "name": "validator_from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The destination validator address",
                        "name": "validator_to",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Block height to execute query (defaults to chain tip)",
                        "name": "height",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/rest.redelegations"
                        }
                    },
                    "400": {
                        "description": "Returned if the request doesn't have valid query params",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Returned on server error",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/staking/validators": {
            "get": {
                "description": "Query paginated validators filtering by status",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "staking"
                ],
                "summary": "Query validators",
                "parameters": [
                    {
                        "type": "string",
                        "default": "bonded",
                        "description": "The validator status (bonded | unbonded | unbonding)",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "The page number to query",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 100,
                        "description": "The number of results per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Block height to execute query (defaults to chain tip)",
                        "name": "height",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/rest.validators"
                        }
                    },
                    "400": {
                        "description": "Returned if the request doesn't have valid query params",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Returned on server error",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/staking/validators/{validatorAddr}": {
            "get": {
                "description": "Query a validator by operator address",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "staking"
                ],
                "summary": "Query a validator",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The validator address",
                        "name": "validatorAddr",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Block height to execute query (defaults to chain tip)",
                        "name": "height",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/rest.validator"
                        }
                    },
                    "400": {
                        "description": "Returned if the request doesn't have valid query params",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Returned on server error",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/staking/validators/{validatorAddr}/delegations": {
            "get": {
                "description": "Query a validator's delegations by operator address",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "staking"
                ],
                "summary": "Query a validator's delegations",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The validator address",
                        "name": "validatorAddr",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Block height to execute query (defaults to chain tip)",
                        "name": "height",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/rest.validatorDelegations"
                        }
                    },
                    "400": {
                        "description": "Returned if the request doesn't have valid query params",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Returned on server error",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/staking/validators/{validatorAddr}/unbonding_delegations": {
            "get": {
                "description": "Query a validator's unbonding delegations by operator address",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "staking"
                ],
                "summary": "Query a validator's unbonding delegations",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The validator address",
                        "name": "validatorAddr",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Block height to execute query (defaults to chain tip)",
                        "name": "height",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/rest.validatorUnbondingDelegations"
                        }
                    },
                    "400": {
                        "description": "Returned if the request doesn't have valid query params",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Returned on server error",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/supply/total": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "supply"
                ],
                "summary": "Query total supply of coins",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "The page number to query",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 100,
                        "description": "The number of results per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Block height to execute query (defaults to chain tip)",
                        "name": "height",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The total supply",
                        "schema": {
                            "$ref": "#/definitions/rest.totalSupply"
                        }
                    },
                    "400": {
                        "description": "Returned if the request doesn't have valid query params",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Returned on server error",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/supply/total/{denomination}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "supply"
                ],
                "summary": "Query the supply of a denomination",
                "parameters": [
                    {
                        "type": "string",
                        "description": "denomination",
                        "name": "denom",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Block height to execute query (defaults to chain tip)",
                        "name": "height",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The total supply of a single denom",
                        "schema": {
                            "$ref": "#/definitions/rest.totalDenomSupply"
                        }
                    },
                    "400": {
                        "description": "Returned if the request doesn't have valid query params",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Returned on server error",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/txs": {
            "post": {
                "description": "Broadcast a signed transaction with the broadcasting mode. The\nmode must either be sync, async, or block. The use of block mode\nis not advised. The sync mode will broadcast and wait for a\nCheckTx response, whereas async mode will broadcast and return\nimmediately.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "Broadcast a signed transaction",
                "parameters": [
                    {
                        "description": "Signed transaction along with the broadcasting mode",
                        "name": "tx",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/rest.BroadcastReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.TxResponse"
                        }
                    },
                    "400": {
                        "description": "Returned if the request is invalid.",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Returned if the transaction cannot be decoded.",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "auth.StdFee": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "string"
                },
                "gas": {
                    "type": "integer"
                }
            }
        },
        "auth.StdSignature": {
            "type": "object",
            "properties": {
                "signature": {
                    "type": "string",
                    "format": "base64",
                    "example": "U3dhZ2dlciByb2Nrcw=="
                }
            }
        },
        "rest.BaseReq": {
            "type": "object",
            "properties": {
                "account_number": {
                    "type": "integer"
                },
                "chain_id": {
                    "type": "string"
                },
                "fees": {
                    "type": "string"
                },
                "from": {
                    "type": "string"
                },
                "gas": {
                    "type": "string"
                },
                "gas_adjustment": {
                    "type": "string"
                },
                "gas_prices": {
                    "type": "string"
                },
                "memo": {
                    "type": "string"
                },
                "sequence": {
                    "type": "integer"
                },
                "simulate": {
                    "type": "boolean"
                }
            }
        },
        "rest.BroadcastReq": {
            "type": "object",
            "properties": {
                "mode": {
                    "type": "string"
                },
                "tx": {
                    "type": "object",
                    "$ref": "#/definitions/types.StdTx"
                }
            }
        },
        "rest.DelegateRequest": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "string"
                },
                "base_req": {
                    "type": "object",
                    "$ref": "#/definitions/rest.BaseReq"
                },
                "delegator_address": {
                    "description": "in bech32",
                    "type": "string"
                },
                "validator_address": {
                    "description": "in bech32",
                    "type": "string"
                }
            }
        },
        "rest.DepositReq": {
            "type": "object",
            "properties": {
                "amount": {
                    "description": "Coins to add to the proposal's deposit",
                    "type": "string"
                },
                "base_req": {
                    "type": "object",
                    "$ref": "#/definitions/rest.BaseReq"
                },
                "depositor": {
                    "description": "Address of the depositor",
                    "type": "string"
                }
            }
        },
        "rest.ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "error": {
                    "type": "string"
                }
            }
        },
        "rest.PostProposalReq": {
            "type": "object",
            "properties": {
                "base_req": {
                    "type": "object",
                    "$ref": "#/definitions/rest.BaseReq"
                },
                "description": {
                    "description": "Description of the proposal",
                    "type": "string"
                },
                "initial_deposit": {
                    "description": "Coins to add to the proposal's deposit",
                    "type": "string"
                },
                "proposal_type": {
                    "description": "Type of proposal. Initial set {PlainTextProposal, SoftwareUpgradeProposal}",
                    "type": "string"
                },
                "proposer": {
                    "description": "Address of the proposer",
                    "type": "string"
                },
                "title": {
                    "description": "Title of the proposal",
                    "type": "string"
                }
            }
        },
        "rest.RedelegateRequest": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "string"
                },
                "base_req": {
                    "type": "object",
                    "$ref": "#/definitions/rest.BaseReq"
                },
                "delegator_address": {
                    "description": "in bech32",
                    "type": "string"
                },
                "validator_dst_address": {
                    "description": "in bech32",
                    "type": "string"
                },
                "validator_src_address": {
                    "description": "in bech32",
                    "type": "string"
                }
            }
        },
        "rest.ResponseWithHeight": {
            "type": "object",
            "properties": {
                "height": {
                    "type": "integer"
                },
                "result": {
                    "type": "string"
                }
            }
        },
        "rest.SendReq": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "string"
                },
                "base_req": {
                    "type": "object",
                    "$ref": "#/definitions/rest.BaseReq"
                }
            }
        },
        "rest.UndelegateRequest": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "string"
                },
                "base_req": {
                    "type": "object",
                    "$ref": "#/definitions/rest.BaseReq"
                },
                "delegator_address": {
                    "description": "in bech32",
                    "type": "string"
                },
                "validator_address": {
                    "description": "in bech32",
                    "type": "string"
                }
            }
        },
        "rest.VoteReq": {
            "type": "object",
            "properties": {
                "base_req": {
                    "type": "object",
                    "$ref": "#/definitions/rest.BaseReq"
                },
                "option": {
                    "description": "option from OptionSet chosen by the voter",
                    "type": "string"
                },
                "voter": {
                    "description": "address of the voter",
                    "type": "string"
                }
            }
        },
        "rest.delegation": {
            "type": "object",
            "properties": {
                "height": {
                    "type": "integer"
                },
                "result": {
                    "type": "object",
                    "$ref": "#/definitions/types.DelegationResponse"
                }
            }
        },
        "rest.delegatorDelegations": {
            "type": "object",
            "properties": {
                "height": {
                    "type": "integer"
                },
                "result": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.DelegationResponse"
                    }
                }
            }
        },
        "rest.delegatorTxs": {
            "type": "object",
            "properties": {
                "height": {
                    "type": "integer"
                },
                "result": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "rest.delegatorUnbondingDelegations": {
            "type": "object",
            "properties": {
                "height": {
                    "type": "integer"
                },
                "result": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.UnbondingDelegation"
                    }
                }
            }
        },
        "rest.delegatorValidator": {
            "type": "object",
            "properties": {
                "height": {
                    "type": "integer"
                },
                "result": {
                    "type": "object",
                    "$ref": "#/definitions/types.Validator"
                }
            }
        },
        "rest.delegatorValidators": {
            "type": "object",
            "properties": {
                "height": {
                    "type": "integer"
                },
                "result": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.Validator"
                    }
                }
            }
        },
        "rest.params": {
            "type": "object",
            "properties": {
                "height": {
                    "type": "integer"
                },
                "result": {
                    "type": "object",
                    "$ref": "#/definitions/types.Params"
                }
            }
        },
        "rest.pool": {
            "type": "object",
            "properties": {
                "height": {
                    "type": "integer"
                },
                "result": {
                    "type": "object",
                    "$ref": "#/definitions/types.Pool"
                }
            }
        },
        "rest.postDelegation": {
            "type": "object",
            "properties": {
                "fee": {
                    "type": "object",
                    "$ref": "#/definitions/types.StdFee"
                },
                "memo": {
                    "type": "string"
                },
                "msg": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.MsgDelegate"
                    }
                },
                "signatures": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.StdSignature"
                    }
                }
            }
        },
        "rest.postDeposit": {
            "type": "object",
            "properties": {
                "fee": {
                    "type": "object",
                    "$ref": "#/definitions/auth.StdFee"
                },
                "memo": {
                    "type": "string"
                },
                "msg": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.MsgDeposit"
                    }
                },
                "signatures": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/auth.StdSignature"
                    }
                }
            }
        },
        "rest.postProposal": {
            "type": "object",
            "properties": {
                "fee": {
                    "type": "object",
                    "$ref": "#/definitions/auth.StdFee"
                },
                "memo": {
                    "type": "string"
                },
                "msg": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.MsgSubmitProposal"
                    }
                },
                "signatures": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/auth.StdSignature"
                    }
                }
            }
        },
        "rest.postRedelegation": {
            "type": "object",
            "properties": {
                "fee": {
                    "type": "object",
                    "$ref": "#/definitions/types.StdFee"
                },
                "memo": {
                    "type": "string"
                },
                "msg": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.MsgBeginRedelegate"
                    }
                },
                "signatures": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.StdSignature"
                    }
                }
            }
        },
        "rest.postUndelegate": {
            "type": "object",
            "properties": {
                "fee": {
                    "type": "object",
                    "$ref": "#/definitions/types.StdFee"
                },
                "memo": {
                    "type": "string"
                },
                "msg": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.MsgUndelegate"
                    }
                },
                "signatures": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.StdSignature"
                    }
                }
            }
        },
        "rest.postVote": {
            "type": "object",
            "properties": {
                "fee": {
                    "type": "object",
                    "$ref": "#/definitions/auth.StdFee"
                },
                "memo": {
                    "type": "string"
                },
                "msg": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.MsgVote"
                    }
                },
                "signatures": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/auth.StdSignature"
                    }
                }
            }
        },
        "rest.queryBalance": {
            "type": "object",
            "properties": {
                "height": {
                    "type": "integer"
                },
                "result": {
                    "type": "string"
                }
            }
        },
        "rest.queryDeposit": {
            "type": "object",
            "properties": {
                "height": {
                    "type": "integer"
                },
                "result": {
                    "type": "object",
                    "$ref": "#/definitions/types.Deposit"
                }
            }
        },
        "rest.queryDeposits": {
            "type": "object",
            "properties": {
                "height": {
                    "type": "integer"
                },
                "result": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.Deposit"
                    }
                }
            }
        },
        "rest.queryProposal": {
            "type": "object",
            "properties": {
                "height": {
                    "type": "integer"
                },
                "result": {
                    "type": "object",
                    "$ref": "#/definitions/types.Proposal"
                }
            }
        },
        "rest.queryProposals": {
            "type": "object",
            "properties": {
                "height": {
                    "type": "integer"
                },
                "result": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.Proposal"
                    }
                }
            }
        },
        "rest.queryProposer": {
            "type": "object",
            "properties": {
                "height": {
                    "type": "integer"
                },
                "result": {
                    "type": "object",
                    "$ref": "#/definitions/utils.Proposer"
                }
            }
        },
        "rest.queryTally": {
            "type": "object",
            "properties": {
                "height": {
                    "type": "integer"
                },
                "result": {
                    "type": "object",
                    "$ref": "#/definitions/types.TallyResult"
                }
            }
        },
        "rest.queryVote": {
            "type": "object",
            "properties": {
                "height": {
                    "type": "integer"
                },
                "result": {
                    "type": "object",
                    "$ref": "#/definitions/types.Vote"
                }
            }
        },
        "rest.queryVotesOnProposal": {
            "type": "object",
            "properties": {
                "height": {
                    "type": "integer"
                },
                "result": {
                    "type": "object",
                    "$ref": "#/definitions/types.Votes"
                }
            }
        },
        "rest.redelegations": {
            "type": "object",
            "properties": {
                "height": {
                    "type": "integer"
                },
                "result": {
                    "type": "object",
                    "$ref": "#/definitions/types.RedelegationResponses"
                }
            }
        },
        "rest.sendResponse": {
            "type": "object",
            "properties": {
                "fee": {
                    "type": "object",
                    "$ref": "#/definitions/types.StdFee"
                },
                "memo": {
                    "type": "string"
                },
                "msg": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.MsgSend"
                    }
                },
                "signatures": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.StdSignature"
                    }
                }
            }
        },
        "rest.totalDenomSupply": {
            "type": "object",
            "properties": {
                "height": {
                    "type": "integer"
                },
                "result": {
                    "type": "string"
                }
            }
        },
        "rest.totalSupply": {
            "type": "object",
            "properties": {
                "height": {
                    "type": "integer"
                },
                "result": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.Coin"
                    }
                }
            }
        },
        "rest.unbondingDelegation": {
            "type": "object",
            "properties": {
                "height": {
                    "type": "integer"
                },
                "result": {
                    "type": "object",
                    "$ref": "#/definitions/types.UnbondingDelegation"
                }
            }
        },
        "rest.validator": {
            "type": "object",
            "properties": {
                "height": {
                    "type": "integer"
                },
                "result": {
                    "type": "object",
                    "$ref": "#/definitions/types.Validator"
                }
            }
        },
        "rest.validatorDelegations": {
            "type": "object",
            "properties": {
                "height": {
                    "type": "integer"
                },
                "result": {
                    "type": "object",
                    "$ref": "#/definitions/types.DelegationResponses"
                }
            }
        },
        "rest.validatorUnbondingDelegations": {
            "type": "object",
            "properties": {
                "height": {
                    "type": "integer"
                },
                "result": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.UnbondingDelegation"
                    }
                }
            }
        },
        "rest.validators": {
            "type": "object",
            "properties": {
                "height": {
                    "type": "integer"
                },
                "result": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.Validator"
                    }
                }
            }
        },
        "types.ABCIMessageLog": {
            "type": "object",
            "properties": {
                "events": {
                    "description": "Events contains a slice of Event objects that were emitted during some\nexecution.",
                    "type": "object",
                    "$ref": "#/definitions/types.StringEvents"
                },
                "log": {
                    "type": "string"
                },
                "msg_index": {
                    "type": "integer"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "types.ABCIMessageLogs": {
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                    "events": {
                        "description": "Events contains a slice of Event objects that were emitted during some\nexecution.",
                        "type": "object",
                        "$ref": "#/definitions/types.StringEvents"
                    },
                    "log": {
                        "type": "string"
                    },
                    "msg_index": {
                        "type": "integer"
                    },
                    "success": {
                        "type": "boolean"
                    }
                }
            }
        },
        "types.Attribute": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "types.Coin": {
            "type": "object",
            "properties": {
                "amount": {
                    "description": "To allow the use of unsigned integers (see: #1273) a larger refactor will\nneed to be made. So we use signed integers for now with safety measures in\nplace preventing negative values being used.",
                    "type": "string"
                },
                "denom": {
                    "type": "string"
                }
            }
        },
        "types.Commission": {
            "type": "object",
            "properties": {
                "max_change_rate": {
                    "description": "maximum daily increase of the validator commission, as a fraction",
                    "type": "string"
                },
                "max_rate": {
                    "description": "maximum commission rate which validator can ever charge, as a fraction",
                    "type": "string"
                },
                "rate": {
                    "description": "the commission rate charged to delegators, as a fraction",
                    "type": "string"
                },
                "update_time": {
                    "description": "the last time the commission rate was changed",
                    "type": "string"
                }
            }
        },
        "types.Content": {
            "type": "object"
        },
        "types.DelegationResponse": {
            "type": "object",
            "properties": {
                "balance": {
                    "type": "string"
                },
                "delegator_address": {
                    "type": "string"
                },
                "shares": {
                    "type": "string"
                },
                "validator_address": {
                    "type": "string"
                }
            }
        },
        "types.DelegationResponses": {
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                    "balance": {
                        "type": "string"
                    },
                    "delegator_address": {
                        "type": "string"
                    },
                    "shares": {
                        "type": "string"
                    },
                    "validator_address": {
                        "type": "string"
                    }
                }
            }
        },
        "types.Deposit": {
            "type": "object",
            "properties": {
                "amount": {
                    "description": "Deposit amount",
                    "type": "string"
                },
                "depositor": {
                    "description": "Address of the depositor",
                    "type": "string"
                },
                "proposal_id": {
                    "description": "proposalID of the proposal",
                    "type": "integer"
                }
            }
        },
        "types.Description": {
            "type": "object",
            "properties": {
                "details": {
                    "description": "optional details",
                    "type": "string"
                },
                "identity": {
                    "description": "optional identity signature (ex. UPort or Keybase)",
                    "type": "string"
                },
                "moniker": {
                    "description": "name",
                    "type": "string"
                },
                "security_contact": {
                    "description": "optional security contact info",
                    "type": "string"
                },
                "website": {
                    "description": "optional website link",
                    "type": "string"
                }
            }
        },
        "types.MsgBeginRedelegate": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "string"
                },
                "delegator_address": {
                    "type": "string"
                },
                "validator_dst_address": {
                    "type": "string"
                },
                "validator_src_address": {
                    "type": "string"
                }
            }
        },
        "types.MsgDelegate": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "string"
                },
                "delegator_address": {
                    "type": "string"
                },
                "validator_address": {
                    "type": "string"
                }
            }
        },
        "types.MsgDeposit": {
            "type": "object",
            "properties": {
                "amount": {
                    "description": "Coins to add to the proposal's deposit",
                    "type": "string"
                },
                "depositor": {
                    "description": "Address of the depositor",
                    "type": "string"
                },
                "proposal_id": {
                    "description": "ID of the proposal",
                    "type": "integer"
                }
            }
        },
        "types.MsgSend": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "string"
                },
                "from_address": {
                    "type": "string"
                },
                "to_address": {
                    "type": "string"
                }
            }
        },
        "types.MsgSubmitProposal": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "object",
                    "$ref": "#/definitions/types.Content"
                },
                "initial_deposit": {
                    "description": "Initial deposit paid by sender. Must be strictly positive",
                    "type": "string"
                },
                "proposer": {
                    "description": "Address of the proposer",
                    "type": "string"
                }
            }
        },
        "types.MsgUndelegate": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "string"
                },
                "delegator_address": {
                    "type": "string"
                },
                "validator_address": {
                    "type": "string"
                }
            }
        },
        "types.MsgVote": {
            "type": "object",
            "properties": {
                "option": {
                    "description": "option from OptionSet chosen by the voter",
                    "type": "integer"
                },
                "proposal_id": {
                    "description": "ID of the proposal",
                    "type": "integer"
                },
                "voter": {
                    "description": "address of the voter",
                    "type": "string"
                }
            }
        },
        "types.Params": {
            "type": "object",
            "properties": {
                "downtime_jail_duration": {
                    "type": "string"
                },
                "max_evidence_age": {
                    "type": "string"
                },
                "min_signed_per_window": {
                    "type": "string"
                },
                "signed_blocks_window": {
                    "type": "integer"
                },
                "slash_fraction_double_sign": {
                    "type": "string"
                },
                "slash_fraction_downtime": {
                    "type": "string"
                }
            }
        },
        "types.Pool": {
            "type": "object",
            "properties": {
                "bonded_tokens": {
                    "description": "tokens which are currently bonded to a validator",
                    "type": "string"
                },
                "not_bonded_tokens": {
                    "description": "tokens which are not bonded to a validator (unbonded or unbonding)",
                    "type": "string"
                }
            }
        },
        "types.Proposal": {
            "type": "object",
            "properties": {
                "deposit_end_time": {
                    "description": "Time that the Proposal would expire if deposit amount isn't met",
                    "type": "string"
                },
                "final_tally_result": {
                    "description": "Result of Tallys",
                    "type": "object",
                    "$ref": "#/definitions/types.TallyResult"
                },
                "id": {
                    "description": "ID of the proposal",
                    "type": "integer"
                },
                "proposal_status": {
                    "description": "Status of the Proposal {Pending, Active, Passed, Rejected}",
                    "type": "integer"
                },
                "submit_time": {
                    "description": "Time of the block where TxGovSubmitProposal was included",
                    "type": "string"
                },
                "total_deposit": {
                    "description": "Current deposit on this proposal. Initial value is set at InitialDeposit",
                    "type": "string"
                },
                "voting_end_time": {
                    "description": "Time that the VotingPeriod for this proposal will end and votes will be tallied",
                    "type": "string"
                },
                "voting_start_time": {
                    "description": "Time of the block where MinDeposit was reached. -1 if MinDeposit is not reached",
                    "type": "string"
                }
            }
        },
        "types.RedelegationEntry": {
            "type": "object",
            "properties": {
                "completion_time": {
                    "description": "time at which the redelegation will complete",
                    "type": "string"
                },
                "creation_height": {
                    "description": "height at which the redelegation took place",
                    "type": "integer"
                },
                "initial_balance": {
                    "description": "initial balance when redelegation started",
                    "type": "string"
                },
                "shares_dst": {
                    "description": "amount of destination-validator shares created by redelegation",
                    "type": "string"
                }
            }
        },
        "types.RedelegationEntryResponse": {
            "type": "object",
            "properties": {
                "balance": {
                    "type": "string"
                },
                "completion_time": {
                    "description": "time at which the redelegation will complete",
                    "type": "string"
                },
                "creation_height": {
                    "description": "height at which the redelegation took place",
                    "type": "integer"
                },
                "initial_balance": {
                    "description": "initial balance when redelegation started",
                    "type": "string"
                },
                "shares_dst": {
                    "description": "amount of destination-validator shares created by redelegation",
                    "type": "string"
                }
            }
        },
        "types.RedelegationResponse": {
            "type": "object",
            "properties": {
                "delegator_address": {
                    "description": "delegator",
                    "type": "string"
                },
                "entries": {
                    "description": "nolint: structtag",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.RedelegationEntryResponse"
                    }
                },
                "validator_dst_address": {
                    "description": "validator redelegation destination operator addr",
                    "type": "string"
                },
                "validator_src_address": {
                    "description": "validator redelegation source operator addr",
                    "type": "string"
                }
            }
        },
        "types.RedelegationResponses": {
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                    "delegator_address": {
                        "description": "delegator",
                        "type": "string"
                    },
                    "entries": {
                        "description": "nolint: structtag",
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/types.RedelegationEntryResponse"
                        }
                    },
                    "validator_dst_address": {
                        "description": "validator redelegation destination operator addr",
                        "type": "string"
                    },
                    "validator_src_address": {
                        "description": "validator redelegation source operator addr",
                        "type": "string"
                    }
                }
            }
        },
        "types.StdFee": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "string"
                },
                "gas": {
                    "type": "integer"
                }
            }
        },
        "types.StdSignature": {
            "type": "object",
            "properties": {
                "signature": {
                    "type": "string",
                    "format": "base64",
                    "example": "U3dhZ2dlciByb2Nrcw=="
                }
            }
        },
        "types.StdTx": {
            "type": "object",
            "properties": {
                "fee": {
                    "type": "object",
                    "$ref": "#/definitions/types.StdFee"
                },
                "memo": {
                    "type": "string"
                },
                "msg": {
                    "type": "string"
                },
                "signatures": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.StdSignature"
                    }
                }
            }
        },
        "types.StringEvent": {
            "type": "object",
            "properties": {
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.Attribute"
                    }
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "types.StringEvents": {
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                    "attributes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/types.Attribute"
                        }
                    },
                    "type": {
                        "type": "string"
                    }
                }
            }
        },
        "types.TallyResult": {
            "type": "object",
            "properties": {
                "abstain": {
                    "type": "string"
                },
                "no": {
                    "type": "string"
                },
                "no_with_veto": {
                    "type": "string"
                },
                "yes": {
                    "type": "string"
                }
            }
        },
        "types.Tx": {
            "type": "object"
        },
        "types.TxResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "codespace": {
                    "type": "string"
                },
                "data": {
                    "type": "string"
                },
                "events": {
                    "description": "DEPRECATED: Remove in the next next major release in favor of using the\nABCIMessageLog.Events field.",
                    "type": "object",
                    "$ref": "#/definitions/types.StringEvents"
                },
                "gas_used": {
                    "type": "integer"
                },
                "gas_wanted": {
                    "type": "integer"
                },
                "height": {
                    "type": "integer"
                },
                "info": {
                    "type": "string"
                },
                "logs": {
                    "type": "object",
                    "$ref": "#/definitions/types.ABCIMessageLogs"
                },
                "raw_log": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                },
                "tx": {
                    "type": "object",
                    "$ref": "#/definitions/types.Tx"
                },
                "txhash": {
                    "type": "string"
                }
            }
        },
        "types.UnbondingDelegation": {
            "type": "object",
            "properties": {
                "delegator_address": {
                    "description": "delegator",
                    "type": "string"
                },
                "entries": {
                    "description": "unbonding delegation entries",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.UnbondingDelegationEntry"
                    }
                },
                "validator_address": {
                    "description": "validator unbonding from operator addr",
                    "type": "string"
                }
            }
        },
        "types.UnbondingDelegationEntry": {
            "type": "object",
            "properties": {
                "balance": {
                    "description": "atoms to receive at completion",
                    "type": "string"
                },
                "completion_time": {
                    "description": "time at which the unbonding delegation will complete",
                    "type": "string"
                },
                "creation_height": {
                    "description": "height which the unbonding took place",
                    "type": "integer"
                },
                "initial_balance": {
                    "description": "atoms initially scheduled to receive at completion",
                    "type": "string"
                }
            }
        },
        "types.Validator": {
            "type": "object",
            "properties": {
                "commission": {
                    "description": "commission parameters",
                    "type": "object",
                    "$ref": "#/definitions/types.Commission"
                },
                "consensus_pubkey": {
                    "description": "the consensus public key of the validator; bech encoded in JSON",
                    "type": "string"
                },
                "delegator_shares": {
                    "description": "total shares issued to a validator's delegators",
                    "type": "string"
                },
                "description": {
                    "description": "description terms for the validator",
                    "type": "object",
                    "$ref": "#/definitions/types.Description"
                },
                "jailed": {
                    "description": "has the validator been jailed from bonded status?",
                    "type": "boolean"
                },
                "min_self_delegation": {
                    "description": "validator's self declared minimum self delegation",
                    "type": "string"
                },
                "operator_address": {
                    "description": "address of the validator's operator; bech encoded in JSON",
                    "type": "string"
                },
                "status": {
                    "description": "validator status (bonded/unbonding/unbonded)",
                    "type": "integer"
                },
                "tokens": {
                    "description": "delegated tokens (incl. self-delegation)",
                    "type": "string"
                },
                "unbonding_height": {
                    "description": "if unbonding, height at which this validator has begun unbonding",
                    "type": "integer"
                },
                "unbonding_time": {
                    "description": "if unbonding, min time for the validator to complete unbonding",
                    "type": "string"
                }
            }
        },
        "types.Vote": {
            "type": "object",
            "properties": {
                "option": {
                    "description": "option from OptionSet chosen by the voter",
                    "type": "integer"
                },
                "proposal_id": {
                    "description": "proposalID of the proposal",
                    "type": "integer"
                },
                "voter": {
                    "description": "address of the voter",
                    "type": "string"
                }
            }
        },
        "types.Votes": {
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                    "option": {
                        "description": "option from OptionSet chosen by the voter",
                        "type": "integer"
                    },
                    "proposal_id": {
                        "description": "proposalID of the proposal",
                        "type": "integer"
                    },
                    "voter": {
                        "description": "address of the voter",
                        "type": "string"
                    }
                }
            }
        },
        "utils.Proposer": {
            "type": "object",
            "properties": {
                "proposal_id": {
                    "type": "integer"
                },
                "proposer": {
                    "type": "string"
                }
            }
        }
    }
}