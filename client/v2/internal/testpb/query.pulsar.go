// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package testpb

import (
	v1beta11 "cosmossdk.io/api/cosmos/base/query/v1beta1"
	v1beta1 "cosmossdk.io/api/cosmos/base/v1beta1"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_EchoRequest_21_list)(nil)

type _EchoRequest_21_list struct {
	list *[]bool
}

func (x *_EchoRequest_21_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_EchoRequest_21_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfBool((*x.list)[i])
}

func (x *_EchoRequest_21_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Bool()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_EchoRequest_21_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Bool()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_EchoRequest_21_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message EchoRequest at list field Bools as it is not of Message kind"))
}

func (x *_EchoRequest_21_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_EchoRequest_21_list) NewElement() protoreflect.Value {
	v := false
	return protoreflect.ValueOfBool(v)
}

func (x *_EchoRequest_21_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_EchoRequest_22_list)(nil)

type _EchoRequest_22_list struct {
	list *[]uint32
}

func (x *_EchoRequest_22_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_EchoRequest_22_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfUint32((*x.list)[i])
}

func (x *_EchoRequest_22_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := (uint32)(valueUnwrapped)
	(*x.list)[i] = concreteValue
}

func (x *_EchoRequest_22_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := (uint32)(valueUnwrapped)
	*x.list = append(*x.list, concreteValue)
}

func (x *_EchoRequest_22_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message EchoRequest at list field Uints as it is not of Message kind"))
}

func (x *_EchoRequest_22_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_EchoRequest_22_list) NewElement() protoreflect.Value {
	v := uint32(0)
	return protoreflect.ValueOfUint32(v)
}

func (x *_EchoRequest_22_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_EchoRequest_23_list)(nil)

type _EchoRequest_23_list struct {
	list *[]string
}

func (x *_EchoRequest_23_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_EchoRequest_23_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_EchoRequest_23_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_EchoRequest_23_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_EchoRequest_23_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message EchoRequest at list field Strings as it is not of Message kind"))
}

func (x *_EchoRequest_23_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_EchoRequest_23_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_EchoRequest_23_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_EchoRequest_24_list)(nil)

type _EchoRequest_24_list struct {
	list *[]Enum
}

func (x *_EchoRequest_24_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_EchoRequest_24_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfEnum((protoreflect.EnumNumber)((*x.list)[i]))
}

func (x *_EchoRequest_24_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Enum()
	concreteValue := (Enum)(valueUnwrapped)
	(*x.list)[i] = concreteValue
}

func (x *_EchoRequest_24_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Enum()
	concreteValue := (Enum)(valueUnwrapped)
	*x.list = append(*x.list, concreteValue)
}

func (x *_EchoRequest_24_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message EchoRequest at list field Enums as it is not of Message kind"))
}

func (x *_EchoRequest_24_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_EchoRequest_24_list) NewElement() protoreflect.Value {
	v := 0
	return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(v))
}

func (x *_EchoRequest_24_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_EchoRequest_25_list)(nil)

type _EchoRequest_25_list struct {
	list *[]*durationpb.Duration
}

func (x *_EchoRequest_25_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_EchoRequest_25_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_EchoRequest_25_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*durationpb.Duration)
	(*x.list)[i] = concreteValue
}

func (x *_EchoRequest_25_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*durationpb.Duration)
	*x.list = append(*x.list, concreteValue)
}

func (x *_EchoRequest_25_list) AppendMutable() protoreflect.Value {
	v := new(durationpb.Duration)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_EchoRequest_25_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_EchoRequest_25_list) NewElement() protoreflect.Value {
	v := new(durationpb.Duration)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_EchoRequest_25_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_EchoRequest_26_list)(nil)

type _EchoRequest_26_list struct {
	list *[]*AMessage
}

func (x *_EchoRequest_26_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_EchoRequest_26_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_EchoRequest_26_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*AMessage)
	(*x.list)[i] = concreteValue
}

func (x *_EchoRequest_26_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*AMessage)
	*x.list = append(*x.list, concreteValue)
}

func (x *_EchoRequest_26_list) AppendMutable() protoreflect.Value {
	v := new(AMessage)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_EchoRequest_26_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_EchoRequest_26_list) NewElement() protoreflect.Value {
	v := new(AMessage)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_EchoRequest_26_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_EchoRequest_29_list)(nil)

type _EchoRequest_29_list struct {
	list *[]*v1beta1.Coin
}

func (x *_EchoRequest_29_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_EchoRequest_29_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_EchoRequest_29_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	(*x.list)[i] = concreteValue
}

func (x *_EchoRequest_29_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_EchoRequest_29_list) AppendMutable() protoreflect.Value {
	v := new(v1beta1.Coin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_EchoRequest_29_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_EchoRequest_29_list) NewElement() protoreflect.Value {
	v := new(v1beta1.Coin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_EchoRequest_29_list) IsValid() bool {
	return x.list != nil
}

var (
	md_EchoRequest                            protoreflect.MessageDescriptor
	fd_EchoRequest_u32                        protoreflect.FieldDescriptor
	fd_EchoRequest_u64                        protoreflect.FieldDescriptor
	fd_EchoRequest_str                        protoreflect.FieldDescriptor
	fd_EchoRequest_bz                         protoreflect.FieldDescriptor
	fd_EchoRequest_timestamp                  protoreflect.FieldDescriptor
	fd_EchoRequest_duration                   protoreflect.FieldDescriptor
	fd_EchoRequest_i32                        protoreflect.FieldDescriptor
	fd_EchoRequest_i64                        protoreflect.FieldDescriptor
	fd_EchoRequest_a_bool                     protoreflect.FieldDescriptor
	fd_EchoRequest_an_enum                    protoreflect.FieldDescriptor
	fd_EchoRequest_a_message                  protoreflect.FieldDescriptor
	fd_EchoRequest_a_coin                     protoreflect.FieldDescriptor
	fd_EchoRequest_an_address                 protoreflect.FieldDescriptor
	fd_EchoRequest_page                       protoreflect.FieldDescriptor
	fd_EchoRequest_bools                      protoreflect.FieldDescriptor
	fd_EchoRequest_uints                      protoreflect.FieldDescriptor
	fd_EchoRequest_strings                    protoreflect.FieldDescriptor
	fd_EchoRequest_enums                      protoreflect.FieldDescriptor
	fd_EchoRequest_durations                  protoreflect.FieldDescriptor
	fd_EchoRequest_some_messages              protoreflect.FieldDescriptor
	fd_EchoRequest_positional1                protoreflect.FieldDescriptor
	fd_EchoRequest_positional2                protoreflect.FieldDescriptor
	fd_EchoRequest_positional3_varargs        protoreflect.FieldDescriptor
	fd_EchoRequest_deprecated_field           protoreflect.FieldDescriptor
	fd_EchoRequest_shorthand_deprecated_field protoreflect.FieldDescriptor
	fd_EchoRequest_hidden_bool                protoreflect.FieldDescriptor
)

func init() {
	file_testpb_query_proto_init()
	md_EchoRequest = File_testpb_query_proto.Messages().ByName("EchoRequest")
	fd_EchoRequest_u32 = md_EchoRequest.Fields().ByName("u32")
	fd_EchoRequest_u64 = md_EchoRequest.Fields().ByName("u64")
	fd_EchoRequest_str = md_EchoRequest.Fields().ByName("str")
	fd_EchoRequest_bz = md_EchoRequest.Fields().ByName("bz")
	fd_EchoRequest_timestamp = md_EchoRequest.Fields().ByName("timestamp")
	fd_EchoRequest_duration = md_EchoRequest.Fields().ByName("duration")
	fd_EchoRequest_i32 = md_EchoRequest.Fields().ByName("i32")
	fd_EchoRequest_i64 = md_EchoRequest.Fields().ByName("i64")
	fd_EchoRequest_a_bool = md_EchoRequest.Fields().ByName("a_bool")
	fd_EchoRequest_an_enum = md_EchoRequest.Fields().ByName("an_enum")
	fd_EchoRequest_a_message = md_EchoRequest.Fields().ByName("a_message")
	fd_EchoRequest_a_coin = md_EchoRequest.Fields().ByName("a_coin")
	fd_EchoRequest_an_address = md_EchoRequest.Fields().ByName("an_address")
	fd_EchoRequest_page = md_EchoRequest.Fields().ByName("page")
	fd_EchoRequest_bools = md_EchoRequest.Fields().ByName("bools")
	fd_EchoRequest_uints = md_EchoRequest.Fields().ByName("uints")
	fd_EchoRequest_strings = md_EchoRequest.Fields().ByName("strings")
	fd_EchoRequest_enums = md_EchoRequest.Fields().ByName("enums")
	fd_EchoRequest_durations = md_EchoRequest.Fields().ByName("durations")
	fd_EchoRequest_some_messages = md_EchoRequest.Fields().ByName("some_messages")
	fd_EchoRequest_positional1 = md_EchoRequest.Fields().ByName("positional1")
	fd_EchoRequest_positional2 = md_EchoRequest.Fields().ByName("positional2")
	fd_EchoRequest_positional3_varargs = md_EchoRequest.Fields().ByName("positional3_varargs")
	fd_EchoRequest_deprecated_field = md_EchoRequest.Fields().ByName("deprecated_field")
	fd_EchoRequest_shorthand_deprecated_field = md_EchoRequest.Fields().ByName("shorthand_deprecated_field")
	fd_EchoRequest_hidden_bool = md_EchoRequest.Fields().ByName("hidden_bool")
}

var _ protoreflect.Message = (*fastReflection_EchoRequest)(nil)

type fastReflection_EchoRequest EchoRequest

func (x *EchoRequest) ProtoReflect() protoreflect.Message {
	return (*fastReflection_EchoRequest)(x)
}

func (x *EchoRequest) slowProtoReflect() protoreflect.Message {
	mi := &file_testpb_query_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_EchoRequest_messageType fastReflection_EchoRequest_messageType
var _ protoreflect.MessageType = fastReflection_EchoRequest_messageType{}

type fastReflection_EchoRequest_messageType struct{}

func (x fastReflection_EchoRequest_messageType) Zero() protoreflect.Message {
	return (*fastReflection_EchoRequest)(nil)
}
func (x fastReflection_EchoRequest_messageType) New() protoreflect.Message {
	return new(fastReflection_EchoRequest)
}
func (x fastReflection_EchoRequest_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_EchoRequest
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_EchoRequest) Descriptor() protoreflect.MessageDescriptor {
	return md_EchoRequest
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_EchoRequest) Type() protoreflect.MessageType {
	return _fastReflection_EchoRequest_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_EchoRequest) New() protoreflect.Message {
	return new(fastReflection_EchoRequest)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_EchoRequest) Interface() protoreflect.ProtoMessage {
	return (*EchoRequest)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_EchoRequest) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.U32 != uint32(0) {
		value := protoreflect.ValueOfUint32(x.U32)
		if !f(fd_EchoRequest_u32, value) {
			return
		}
	}
	if x.U64 != uint64(0) {
		value := protoreflect.ValueOfUint64(x.U64)
		if !f(fd_EchoRequest_u64, value) {
			return
		}
	}
	if x.Str != "" {
		value := protoreflect.ValueOfString(x.Str)
		if !f(fd_EchoRequest_str, value) {
			return
		}
	}
	if len(x.Bz) != 0 {
		value := protoreflect.ValueOfBytes(x.Bz)
		if !f(fd_EchoRequest_bz, value) {
			return
		}
	}
	if x.Timestamp != nil {
		value := protoreflect.ValueOfMessage(x.Timestamp.ProtoReflect())
		if !f(fd_EchoRequest_timestamp, value) {
			return
		}
	}
	if x.Duration != nil {
		value := protoreflect.ValueOfMessage(x.Duration.ProtoReflect())
		if !f(fd_EchoRequest_duration, value) {
			return
		}
	}
	if x.I32 != int32(0) {
		value := protoreflect.ValueOfInt32(x.I32)
		if !f(fd_EchoRequest_i32, value) {
			return
		}
	}
	if x.I64 != int64(0) {
		value := protoreflect.ValueOfInt64(x.I64)
		if !f(fd_EchoRequest_i64, value) {
			return
		}
	}
	if x.ABool != false {
		value := protoreflect.ValueOfBool(x.ABool)
		if !f(fd_EchoRequest_a_bool, value) {
			return
		}
	}
	if x.AnEnum != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.AnEnum))
		if !f(fd_EchoRequest_an_enum, value) {
			return
		}
	}
	if x.AMessage != nil {
		value := protoreflect.ValueOfMessage(x.AMessage.ProtoReflect())
		if !f(fd_EchoRequest_a_message, value) {
			return
		}
	}
	if x.ACoin != nil {
		value := protoreflect.ValueOfMessage(x.ACoin.ProtoReflect())
		if !f(fd_EchoRequest_a_coin, value) {
			return
		}
	}
	if x.AnAddress != "" {
		value := protoreflect.ValueOfString(x.AnAddress)
		if !f(fd_EchoRequest_an_address, value) {
			return
		}
	}
	if x.Page != nil {
		value := protoreflect.ValueOfMessage(x.Page.ProtoReflect())
		if !f(fd_EchoRequest_page, value) {
			return
		}
	}
	if len(x.Bools) != 0 {
		value := protoreflect.ValueOfList(&_EchoRequest_21_list{list: &x.Bools})
		if !f(fd_EchoRequest_bools, value) {
			return
		}
	}
	if len(x.Uints) != 0 {
		value := protoreflect.ValueOfList(&_EchoRequest_22_list{list: &x.Uints})
		if !f(fd_EchoRequest_uints, value) {
			return
		}
	}
	if len(x.Strings) != 0 {
		value := protoreflect.ValueOfList(&_EchoRequest_23_list{list: &x.Strings})
		if !f(fd_EchoRequest_strings, value) {
			return
		}
	}
	if len(x.Enums) != 0 {
		value := protoreflect.ValueOfList(&_EchoRequest_24_list{list: &x.Enums})
		if !f(fd_EchoRequest_enums, value) {
			return
		}
	}
	if len(x.Durations) != 0 {
		value := protoreflect.ValueOfList(&_EchoRequest_25_list{list: &x.Durations})
		if !f(fd_EchoRequest_durations, value) {
			return
		}
	}
	if len(x.SomeMessages) != 0 {
		value := protoreflect.ValueOfList(&_EchoRequest_26_list{list: &x.SomeMessages})
		if !f(fd_EchoRequest_some_messages, value) {
			return
		}
	}
	if x.Positional1 != int32(0) {
		value := protoreflect.ValueOfInt32(x.Positional1)
		if !f(fd_EchoRequest_positional1, value) {
			return
		}
	}
	if x.Positional2 != "" {
		value := protoreflect.ValueOfString(x.Positional2)
		if !f(fd_EchoRequest_positional2, value) {
			return
		}
	}
	if len(x.Positional3Varargs) != 0 {
		value := protoreflect.ValueOfList(&_EchoRequest_29_list{list: &x.Positional3Varargs})
		if !f(fd_EchoRequest_positional3_varargs, value) {
			return
		}
	}
	if x.DeprecatedField != "" {
		value := protoreflect.ValueOfString(x.DeprecatedField)
		if !f(fd_EchoRequest_deprecated_field, value) {
			return
		}
	}
	if x.ShorthandDeprecatedField != "" {
		value := protoreflect.ValueOfString(x.ShorthandDeprecatedField)
		if !f(fd_EchoRequest_shorthand_deprecated_field, value) {
			return
		}
	}
	if x.HiddenBool != false {
		value := protoreflect.ValueOfBool(x.HiddenBool)
		if !f(fd_EchoRequest_hidden_bool, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_EchoRequest) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "testpb.EchoRequest.u32":
		return x.U32 != uint32(0)
	case "testpb.EchoRequest.u64":
		return x.U64 != uint64(0)
	case "testpb.EchoRequest.str":
		return x.Str != ""
	case "testpb.EchoRequest.bz":
		return len(x.Bz) != 0
	case "testpb.EchoRequest.timestamp":
		return x.Timestamp != nil
	case "testpb.EchoRequest.duration":
		return x.Duration != nil
	case "testpb.EchoRequest.i32":
		return x.I32 != int32(0)
	case "testpb.EchoRequest.i64":
		return x.I64 != int64(0)
	case "testpb.EchoRequest.a_bool":
		return x.ABool != false
	case "testpb.EchoRequest.an_enum":
		return x.AnEnum != 0
	case "testpb.EchoRequest.a_message":
		return x.AMessage != nil
	case "testpb.EchoRequest.a_coin":
		return x.ACoin != nil
	case "testpb.EchoRequest.an_address":
		return x.AnAddress != ""
	case "testpb.EchoRequest.page":
		return x.Page != nil
	case "testpb.EchoRequest.bools":
		return len(x.Bools) != 0
	case "testpb.EchoRequest.uints":
		return len(x.Uints) != 0
	case "testpb.EchoRequest.strings":
		return len(x.Strings) != 0
	case "testpb.EchoRequest.enums":
		return len(x.Enums) != 0
	case "testpb.EchoRequest.durations":
		return len(x.Durations) != 0
	case "testpb.EchoRequest.some_messages":
		return len(x.SomeMessages) != 0
	case "testpb.EchoRequest.positional1":
		return x.Positional1 != int32(0)
	case "testpb.EchoRequest.positional2":
		return x.Positional2 != ""
	case "testpb.EchoRequest.positional3_varargs":
		return len(x.Positional3Varargs) != 0
	case "testpb.EchoRequest.deprecated_field":
		return x.DeprecatedField != ""
	case "testpb.EchoRequest.shorthand_deprecated_field":
		return x.ShorthandDeprecatedField != ""
	case "testpb.EchoRequest.hidden_bool":
		return x.HiddenBool != false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: testpb.EchoRequest"))
		}
		panic(fmt.Errorf("message testpb.EchoRequest does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EchoRequest) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "testpb.EchoRequest.u32":
		x.U32 = uint32(0)
	case "testpb.EchoRequest.u64":
		x.U64 = uint64(0)
	case "testpb.EchoRequest.str":
		x.Str = ""
	case "testpb.EchoRequest.bz":
		x.Bz = nil
	case "testpb.EchoRequest.timestamp":
		x.Timestamp = nil
	case "testpb.EchoRequest.duration":
		x.Duration = nil
	case "testpb.EchoRequest.i32":
		x.I32 = int32(0)
	case "testpb.EchoRequest.i64":
		x.I64 = int64(0)
	case "testpb.EchoRequest.a_bool":
		x.ABool = false
	case "testpb.EchoRequest.an_enum":
		x.AnEnum = 0
	case "testpb.EchoRequest.a_message":
		x.AMessage = nil
	case "testpb.EchoRequest.a_coin":
		x.ACoin = nil
	case "testpb.EchoRequest.an_address":
		x.AnAddress = ""
	case "testpb.EchoRequest.page":
		x.Page = nil
	case "testpb.EchoRequest.bools":
		x.Bools = nil
	case "testpb.EchoRequest.uints":
		x.Uints = nil
	case "testpb.EchoRequest.strings":
		x.Strings = nil
	case "testpb.EchoRequest.enums":
		x.Enums = nil
	case "testpb.EchoRequest.durations":
		x.Durations = nil
	case "testpb.EchoRequest.some_messages":
		x.SomeMessages = nil
	case "testpb.EchoRequest.positional1":
		x.Positional1 = int32(0)
	case "testpb.EchoRequest.positional2":
		x.Positional2 = ""
	case "testpb.EchoRequest.positional3_varargs":
		x.Positional3Varargs = nil
	case "testpb.EchoRequest.deprecated_field":
		x.DeprecatedField = ""
	case "testpb.EchoRequest.shorthand_deprecated_field":
		x.ShorthandDeprecatedField = ""
	case "testpb.EchoRequest.hidden_bool":
		x.HiddenBool = false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: testpb.EchoRequest"))
		}
		panic(fmt.Errorf("message testpb.EchoRequest does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_EchoRequest) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "testpb.EchoRequest.u32":
		value := x.U32
		return protoreflect.ValueOfUint32(value)
	case "testpb.EchoRequest.u64":
		value := x.U64
		return protoreflect.ValueOfUint64(value)
	case "testpb.EchoRequest.str":
		value := x.Str
		return protoreflect.ValueOfString(value)
	case "testpb.EchoRequest.bz":
		value := x.Bz
		return protoreflect.ValueOfBytes(value)
	case "testpb.EchoRequest.timestamp":
		value := x.Timestamp
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "testpb.EchoRequest.duration":
		value := x.Duration
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "testpb.EchoRequest.i32":
		value := x.I32
		return protoreflect.ValueOfInt32(value)
	case "testpb.EchoRequest.i64":
		value := x.I64
		return protoreflect.ValueOfInt64(value)
	case "testpb.EchoRequest.a_bool":
		value := x.ABool
		return protoreflect.ValueOfBool(value)
	case "testpb.EchoRequest.an_enum":
		value := x.AnEnum
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "testpb.EchoRequest.a_message":
		value := x.AMessage
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "testpb.EchoRequest.a_coin":
		value := x.ACoin
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "testpb.EchoRequest.an_address":
		value := x.AnAddress
		return protoreflect.ValueOfString(value)
	case "testpb.EchoRequest.page":
		value := x.Page
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "testpb.EchoRequest.bools":
		if len(x.Bools) == 0 {
			return protoreflect.ValueOfList(&_EchoRequest_21_list{})
		}
		listValue := &_EchoRequest_21_list{list: &x.Bools}
		return protoreflect.ValueOfList(listValue)
	case "testpb.EchoRequest.uints":
		if len(x.Uints) == 0 {
			return protoreflect.ValueOfList(&_EchoRequest_22_list{})
		}
		listValue := &_EchoRequest_22_list{list: &x.Uints}
		return protoreflect.ValueOfList(listValue)
	case "testpb.EchoRequest.strings":
		if len(x.Strings) == 0 {
			return protoreflect.ValueOfList(&_EchoRequest_23_list{})
		}
		listValue := &_EchoRequest_23_list{list: &x.Strings}
		return protoreflect.ValueOfList(listValue)
	case "testpb.EchoRequest.enums":
		if len(x.Enums) == 0 {
			return protoreflect.ValueOfList(&_EchoRequest_24_list{})
		}
		listValue := &_EchoRequest_24_list{list: &x.Enums}
		return protoreflect.ValueOfList(listValue)
	case "testpb.EchoRequest.durations":
		if len(x.Durations) == 0 {
			return protoreflect.ValueOfList(&_EchoRequest_25_list{})
		}
		listValue := &_EchoRequest_25_list{list: &x.Durations}
		return protoreflect.ValueOfList(listValue)
	case "testpb.EchoRequest.some_messages":
		if len(x.SomeMessages) == 0 {
			return protoreflect.ValueOfList(&_EchoRequest_26_list{})
		}
		listValue := &_EchoRequest_26_list{list: &x.SomeMessages}
		return protoreflect.ValueOfList(listValue)
	case "testpb.EchoRequest.positional1":
		value := x.Positional1
		return protoreflect.ValueOfInt32(value)
	case "testpb.EchoRequest.positional2":
		value := x.Positional2
		return protoreflect.ValueOfString(value)
	case "testpb.EchoRequest.positional3_varargs":
		if len(x.Positional3Varargs) == 0 {
			return protoreflect.ValueOfList(&_EchoRequest_29_list{})
		}
		listValue := &_EchoRequest_29_list{list: &x.Positional3Varargs}
		return protoreflect.ValueOfList(listValue)
	case "testpb.EchoRequest.deprecated_field":
		value := x.DeprecatedField
		return protoreflect.ValueOfString(value)
	case "testpb.EchoRequest.shorthand_deprecated_field":
		value := x.ShorthandDeprecatedField
		return protoreflect.ValueOfString(value)
	case "testpb.EchoRequest.hidden_bool":
		value := x.HiddenBool
		return protoreflect.ValueOfBool(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: testpb.EchoRequest"))
		}
		panic(fmt.Errorf("message testpb.EchoRequest does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EchoRequest) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "testpb.EchoRequest.u32":
		x.U32 = uint32(value.Uint())
	case "testpb.EchoRequest.u64":
		x.U64 = value.Uint()
	case "testpb.EchoRequest.str":
		x.Str = value.Interface().(string)
	case "testpb.EchoRequest.bz":
		x.Bz = value.Bytes()
	case "testpb.EchoRequest.timestamp":
		x.Timestamp = value.Message().Interface().(*timestamppb.Timestamp)
	case "testpb.EchoRequest.duration":
		x.Duration = value.Message().Interface().(*durationpb.Duration)
	case "testpb.EchoRequest.i32":
		x.I32 = int32(value.Int())
	case "testpb.EchoRequest.i64":
		x.I64 = value.Int()
	case "testpb.EchoRequest.a_bool":
		x.ABool = value.Bool()
	case "testpb.EchoRequest.an_enum":
		x.AnEnum = (Enum)(value.Enum())
	case "testpb.EchoRequest.a_message":
		x.AMessage = value.Message().Interface().(*AMessage)
	case "testpb.EchoRequest.a_coin":
		x.ACoin = value.Message().Interface().(*v1beta1.Coin)
	case "testpb.EchoRequest.an_address":
		x.AnAddress = value.Interface().(string)
	case "testpb.EchoRequest.page":
		x.Page = value.Message().Interface().(*v1beta11.PageRequest)
	case "testpb.EchoRequest.bools":
		lv := value.List()
		clv := lv.(*_EchoRequest_21_list)
		x.Bools = *clv.list
	case "testpb.EchoRequest.uints":
		lv := value.List()
		clv := lv.(*_EchoRequest_22_list)
		x.Uints = *clv.list
	case "testpb.EchoRequest.strings":
		lv := value.List()
		clv := lv.(*_EchoRequest_23_list)
		x.Strings = *clv.list
	case "testpb.EchoRequest.enums":
		lv := value.List()
		clv := lv.(*_EchoRequest_24_list)
		x.Enums = *clv.list
	case "testpb.EchoRequest.durations":
		lv := value.List()
		clv := lv.(*_EchoRequest_25_list)
		x.Durations = *clv.list
	case "testpb.EchoRequest.some_messages":
		lv := value.List()
		clv := lv.(*_EchoRequest_26_list)
		x.SomeMessages = *clv.list
	case "testpb.EchoRequest.positional1":
		x.Positional1 = int32(value.Int())
	case "testpb.EchoRequest.positional2":
		x.Positional2 = value.Interface().(string)
	case "testpb.EchoRequest.positional3_varargs":
		lv := value.List()
		clv := lv.(*_EchoRequest_29_list)
		x.Positional3Varargs = *clv.list
	case "testpb.EchoRequest.deprecated_field":
		x.DeprecatedField = value.Interface().(string)
	case "testpb.EchoRequest.shorthand_deprecated_field":
		x.ShorthandDeprecatedField = value.Interface().(string)
	case "testpb.EchoRequest.hidden_bool":
		x.HiddenBool = value.Bool()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: testpb.EchoRequest"))
		}
		panic(fmt.Errorf("message testpb.EchoRequest does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EchoRequest) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "testpb.EchoRequest.timestamp":
		if x.Timestamp == nil {
			x.Timestamp = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.Timestamp.ProtoReflect())
	case "testpb.EchoRequest.duration":
		if x.Duration == nil {
			x.Duration = new(durationpb.Duration)
		}
		return protoreflect.ValueOfMessage(x.Duration.ProtoReflect())
	case "testpb.EchoRequest.a_message":
		if x.AMessage == nil {
			x.AMessage = new(AMessage)
		}
		return protoreflect.ValueOfMessage(x.AMessage.ProtoReflect())
	case "testpb.EchoRequest.a_coin":
		if x.ACoin == nil {
			x.ACoin = new(v1beta1.Coin)
		}
		return protoreflect.ValueOfMessage(x.ACoin.ProtoReflect())
	case "testpb.EchoRequest.page":
		if x.Page == nil {
			x.Page = new(v1beta11.PageRequest)
		}
		return protoreflect.ValueOfMessage(x.Page.ProtoReflect())
	case "testpb.EchoRequest.bools":
		if x.Bools == nil {
			x.Bools = []bool{}
		}
		value := &_EchoRequest_21_list{list: &x.Bools}
		return protoreflect.ValueOfList(value)
	case "testpb.EchoRequest.uints":
		if x.Uints == nil {
			x.Uints = []uint32{}
		}
		value := &_EchoRequest_22_list{list: &x.Uints}
		return protoreflect.ValueOfList(value)
	case "testpb.EchoRequest.strings":
		if x.Strings == nil {
			x.Strings = []string{}
		}
		value := &_EchoRequest_23_list{list: &x.Strings}
		return protoreflect.ValueOfList(value)
	case "testpb.EchoRequest.enums":
		if x.Enums == nil {
			x.Enums = []Enum{}
		}
		value := &_EchoRequest_24_list{list: &x.Enums}
		return protoreflect.ValueOfList(value)
	case "testpb.EchoRequest.durations":
		if x.Durations == nil {
			x.Durations = []*durationpb.Duration{}
		}
		value := &_EchoRequest_25_list{list: &x.Durations}
		return protoreflect.ValueOfList(value)
	case "testpb.EchoRequest.some_messages":
		if x.SomeMessages == nil {
			x.SomeMessages = []*AMessage{}
		}
		value := &_EchoRequest_26_list{list: &x.SomeMessages}
		return protoreflect.ValueOfList(value)
	case "testpb.EchoRequest.positional3_varargs":
		if x.Positional3Varargs == nil {
			x.Positional3Varargs = []*v1beta1.Coin{}
		}
		value := &_EchoRequest_29_list{list: &x.Positional3Varargs}
		return protoreflect.ValueOfList(value)
	case "testpb.EchoRequest.u32":
		panic(fmt.Errorf("field u32 of message testpb.EchoRequest is not mutable"))
	case "testpb.EchoRequest.u64":
		panic(fmt.Errorf("field u64 of message testpb.EchoRequest is not mutable"))
	case "testpb.EchoRequest.str":
		panic(fmt.Errorf("field str of message testpb.EchoRequest is not mutable"))
	case "testpb.EchoRequest.bz":
		panic(fmt.Errorf("field bz of message testpb.EchoRequest is not mutable"))
	case "testpb.EchoRequest.i32":
		panic(fmt.Errorf("field i32 of message testpb.EchoRequest is not mutable"))
	case "testpb.EchoRequest.i64":
		panic(fmt.Errorf("field i64 of message testpb.EchoRequest is not mutable"))
	case "testpb.EchoRequest.a_bool":
		panic(fmt.Errorf("field a_bool of message testpb.EchoRequest is not mutable"))
	case "testpb.EchoRequest.an_enum":
		panic(fmt.Errorf("field an_enum of message testpb.EchoRequest is not mutable"))
	case "testpb.EchoRequest.an_address":
		panic(fmt.Errorf("field an_address of message testpb.EchoRequest is not mutable"))
	case "testpb.EchoRequest.positional1":
		panic(fmt.Errorf("field positional1 of message testpb.EchoRequest is not mutable"))
	case "testpb.EchoRequest.positional2":
		panic(fmt.Errorf("field positional2 of message testpb.EchoRequest is not mutable"))
	case "testpb.EchoRequest.deprecated_field":
		panic(fmt.Errorf("field deprecated_field of message testpb.EchoRequest is not mutable"))
	case "testpb.EchoRequest.shorthand_deprecated_field":
		panic(fmt.Errorf("field shorthand_deprecated_field of message testpb.EchoRequest is not mutable"))
	case "testpb.EchoRequest.hidden_bool":
		panic(fmt.Errorf("field hidden_bool of message testpb.EchoRequest is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: testpb.EchoRequest"))
		}
		panic(fmt.Errorf("message testpb.EchoRequest does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_EchoRequest) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "testpb.EchoRequest.u32":
		return protoreflect.ValueOfUint32(uint32(0))
	case "testpb.EchoRequest.u64":
		return protoreflect.ValueOfUint64(uint64(0))
	case "testpb.EchoRequest.str":
		return protoreflect.ValueOfString("")
	case "testpb.EchoRequest.bz":
		return protoreflect.ValueOfBytes(nil)
	case "testpb.EchoRequest.timestamp":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "testpb.EchoRequest.duration":
		m := new(durationpb.Duration)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "testpb.EchoRequest.i32":
		return protoreflect.ValueOfInt32(int32(0))
	case "testpb.EchoRequest.i64":
		return protoreflect.ValueOfInt64(int64(0))
	case "testpb.EchoRequest.a_bool":
		return protoreflect.ValueOfBool(false)
	case "testpb.EchoRequest.an_enum":
		return protoreflect.ValueOfEnum(0)
	case "testpb.EchoRequest.a_message":
		m := new(AMessage)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "testpb.EchoRequest.a_coin":
		m := new(v1beta1.Coin)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "testpb.EchoRequest.an_address":
		return protoreflect.ValueOfString("")
	case "testpb.EchoRequest.page":
		m := new(v1beta11.PageRequest)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "testpb.EchoRequest.bools":
		list := []bool{}
		return protoreflect.ValueOfList(&_EchoRequest_21_list{list: &list})
	case "testpb.EchoRequest.uints":
		list := []uint32{}
		return protoreflect.ValueOfList(&_EchoRequest_22_list{list: &list})
	case "testpb.EchoRequest.strings":
		list := []string{}
		return protoreflect.ValueOfList(&_EchoRequest_23_list{list: &list})
	case "testpb.EchoRequest.enums":
		list := []Enum{}
		return protoreflect.ValueOfList(&_EchoRequest_24_list{list: &list})
	case "testpb.EchoRequest.durations":
		list := []*durationpb.Duration{}
		return protoreflect.ValueOfList(&_EchoRequest_25_list{list: &list})
	case "testpb.EchoRequest.some_messages":
		list := []*AMessage{}
		return protoreflect.ValueOfList(&_EchoRequest_26_list{list: &list})
	case "testpb.EchoRequest.positional1":
		return protoreflect.ValueOfInt32(int32(0))
	case "testpb.EchoRequest.positional2":
		return protoreflect.ValueOfString("")
	case "testpb.EchoRequest.positional3_varargs":
		list := []*v1beta1.Coin{}
		return protoreflect.ValueOfList(&_EchoRequest_29_list{list: &list})
	case "testpb.EchoRequest.deprecated_field":
		return protoreflect.ValueOfString("")
	case "testpb.EchoRequest.shorthand_deprecated_field":
		return protoreflect.ValueOfString("")
	case "testpb.EchoRequest.hidden_bool":
		return protoreflect.ValueOfBool(false)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: testpb.EchoRequest"))
		}
		panic(fmt.Errorf("message testpb.EchoRequest does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_EchoRequest) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in testpb.EchoRequest", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_EchoRequest) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EchoRequest) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_EchoRequest) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_EchoRequest) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*EchoRequest)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.U32 != 0 {
			n += 1 + runtime.Sov(uint64(x.U32))
		}
		if x.U64 != 0 {
			n += 1 + runtime.Sov(uint64(x.U64))
		}
		l = len(x.Str)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Bz)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Timestamp != nil {
			l = options.Size(x.Timestamp)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Duration != nil {
			l = options.Size(x.Duration)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.I32 != 0 {
			n += 1 + runtime.Sov(uint64(x.I32))
		}
		if x.I64 != 0 {
			n += 1 + runtime.Sov(uint64(x.I64))
		}
		if x.ABool {
			n += 2
		}
		if x.AnEnum != 0 {
			n += 2 + runtime.Sov(uint64(x.AnEnum))
		}
		if x.AMessage != nil {
			l = options.Size(x.AMessage)
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.ACoin != nil {
			l = options.Size(x.ACoin)
			n += 2 + l + runtime.Sov(uint64(l))
		}
		l = len(x.AnAddress)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.Page != nil {
			l = options.Size(x.Page)
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if len(x.Bools) > 0 {
			n += 2 + runtime.Sov(uint64(len(x.Bools))) + len(x.Bools)*1
		}
		if len(x.Uints) > 0 {
			l = 0
			for _, e := range x.Uints {
				l += runtime.Sov(uint64(e))
			}
			n += 2 + runtime.Sov(uint64(l)) + l
		}
		if len(x.Strings) > 0 {
			for _, s := range x.Strings {
				l = len(s)
				n += 2 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.Enums) > 0 {
			l = 0
			for _, e := range x.Enums {
				l += runtime.Sov(uint64(e))
			}
			n += 2 + runtime.Sov(uint64(l)) + l
		}
		if len(x.Durations) > 0 {
			for _, e := range x.Durations {
				l = options.Size(e)
				n += 2 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.SomeMessages) > 0 {
			for _, e := range x.SomeMessages {
				l = options.Size(e)
				n += 2 + l + runtime.Sov(uint64(l))
			}
		}
		if x.Positional1 != 0 {
			n += 2 + runtime.Sov(uint64(x.Positional1))
		}
		l = len(x.Positional2)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if len(x.Positional3Varargs) > 0 {
			for _, e := range x.Positional3Varargs {
				l = options.Size(e)
				n += 2 + l + runtime.Sov(uint64(l))
			}
		}
		l = len(x.DeprecatedField)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ShorthandDeprecatedField)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.HiddenBool {
			n += 3
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*EchoRequest)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.HiddenBool {
			i--
			if x.HiddenBool {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x80
		}
		if len(x.ShorthandDeprecatedField) > 0 {
			i -= len(x.ShorthandDeprecatedField)
			copy(dAtA[i:], x.ShorthandDeprecatedField)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ShorthandDeprecatedField)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xfa
		}
		if len(x.DeprecatedField) > 0 {
			i -= len(x.DeprecatedField)
			copy(dAtA[i:], x.DeprecatedField)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.DeprecatedField)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xf2
		}
		if len(x.Positional3Varargs) > 0 {
			for iNdEx := len(x.Positional3Varargs) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Positional3Varargs[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1
				i--
				dAtA[i] = 0xea
			}
		}
		if len(x.Positional2) > 0 {
			i -= len(x.Positional2)
			copy(dAtA[i:], x.Positional2)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Positional2)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xe2
		}
		if x.Positional1 != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Positional1))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xd8
		}
		if len(x.SomeMessages) > 0 {
			for iNdEx := len(x.SomeMessages) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.SomeMessages[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1
				i--
				dAtA[i] = 0xd2
			}
		}
		if len(x.Durations) > 0 {
			for iNdEx := len(x.Durations) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Durations[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1
				i--
				dAtA[i] = 0xca
			}
		}
		if len(x.Enums) > 0 {
			var pksize2 int
			for _, num := range x.Enums {
				pksize2 += runtime.Sov(uint64(num))
			}
			i -= pksize2
			j1 := i
			for _, num1 := range x.Enums {
				num := uint64(num1)
				for num >= 1<<7 {
					dAtA[j1] = uint8(uint64(num)&0x7f | 0x80)
					num >>= 7
					j1++
				}
				dAtA[j1] = uint8(num)
				j1++
			}
			i = runtime.EncodeVarint(dAtA, i, uint64(pksize2))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xc2
		}
		if len(x.Strings) > 0 {
			for iNdEx := len(x.Strings) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.Strings[iNdEx])
				copy(dAtA[i:], x.Strings[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Strings[iNdEx])))
				i--
				dAtA[i] = 0x1
				i--
				dAtA[i] = 0xba
			}
		}
		if len(x.Uints) > 0 {
			var pksize4 int
			for _, num := range x.Uints {
				pksize4 += runtime.Sov(uint64(num))
			}
			i -= pksize4
			j3 := i
			for _, num := range x.Uints {
				for num >= 1<<7 {
					dAtA[j3] = uint8(uint64(num)&0x7f | 0x80)
					num >>= 7
					j3++
				}
				dAtA[j3] = uint8(num)
				j3++
			}
			i = runtime.EncodeVarint(dAtA, i, uint64(pksize4))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xb2
		}
		if len(x.Bools) > 0 {
			for iNdEx := len(x.Bools) - 1; iNdEx >= 0; iNdEx-- {
				i--
				if x.Bools[iNdEx] {
					dAtA[i] = 1
				} else {
					dAtA[i] = 0
				}
			}
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Bools)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xaa
		}
		if x.Page != nil {
			encoded, err := options.Marshal(x.Page)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa2
		}
		if len(x.AnAddress) > 0 {
			i -= len(x.AnAddress)
			copy(dAtA[i:], x.AnAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.AnAddress)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x9a
		}
		if x.ACoin != nil {
			encoded, err := options.Marshal(x.ACoin)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x92
		}
		if x.AMessage != nil {
			encoded, err := options.Marshal(x.AMessage)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
		if x.AnEnum != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.AnEnum))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x80
		}
		if x.ABool {
			i--
			if x.ABool {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x78
		}
		if x.I64 != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.I64))
			i--
			dAtA[i] = 0x50
		}
		if x.I32 != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.I32))
			i--
			dAtA[i] = 0x38
		}
		if x.Duration != nil {
			encoded, err := options.Marshal(x.Duration)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x32
		}
		if x.Timestamp != nil {
			encoded, err := options.Marshal(x.Timestamp)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.Bz) > 0 {
			i -= len(x.Bz)
			copy(dAtA[i:], x.Bz)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Bz)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.Str) > 0 {
			i -= len(x.Str)
			copy(dAtA[i:], x.Str)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Str)))
			i--
			dAtA[i] = 0x1a
		}
		if x.U64 != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.U64))
			i--
			dAtA[i] = 0x10
		}
		if x.U32 != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.U32))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*EchoRequest)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: EchoRequest: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: EchoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field U32", wireType)
				}
				x.U32 = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.U32 |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field U64", wireType)
				}
				x.U64 = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.U64 |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Str", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Str = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Bz", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Bz = append(x.Bz[:0], dAtA[iNdEx:postIndex]...)
				if x.Bz == nil {
					x.Bz = []byte{}
				}
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Timestamp == nil {
					x.Timestamp = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Timestamp); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Duration == nil {
					x.Duration = &durationpb.Duration{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Duration); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field I32", wireType)
				}
				x.I32 = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.I32 |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 10:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field I64", wireType)
				}
				x.I64 = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.I64 |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 15:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ABool", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.ABool = bool(v != 0)
			case 16:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AnEnum", wireType)
				}
				x.AnEnum = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.AnEnum |= Enum(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 17:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AMessage", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.AMessage == nil {
					x.AMessage = &AMessage{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.AMessage); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 18:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ACoin", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.ACoin == nil {
					x.ACoin = &v1beta1.Coin{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.ACoin); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 19:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AnAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AnAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 20:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Page == nil {
					x.Page = &v1beta11.PageRequest{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Page); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 21:
				if wireType == 0 {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					x.Bools = append(x.Bools, bool(v != 0))
				} else if wireType == 2 {
					var packedLen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						packedLen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if packedLen < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					postIndex := iNdEx + packedLen
					if postIndex < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					if postIndex > l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					var elementCount int
					elementCount = packedLen
					if elementCount != 0 && len(x.Bools) == 0 {
						x.Bools = make([]bool, 0, elementCount)
					}
					for iNdEx < postIndex {
						var v int
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							v |= int(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						x.Bools = append(x.Bools, bool(v != 0))
					}
				} else {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Bools", wireType)
				}
			case 22:
				if wireType == 0 {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					x.Uints = append(x.Uints, v)
				} else if wireType == 2 {
					var packedLen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						packedLen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if packedLen < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					postIndex := iNdEx + packedLen
					if postIndex < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					if postIndex > l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					var elementCount int
					var count int
					for _, integer := range dAtA[iNdEx:postIndex] {
						if integer < 128 {
							count++
						}
					}
					elementCount = count
					if elementCount != 0 && len(x.Uints) == 0 {
						x.Uints = make([]uint32, 0, elementCount)
					}
					for iNdEx < postIndex {
						var v uint32
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							v |= uint32(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						x.Uints = append(x.Uints, v)
					}
				} else {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Uints", wireType)
				}
			case 23:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Strings", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Strings = append(x.Strings, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			case 24:
				if wireType == 0 {
					var v Enum
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= Enum(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					x.Enums = append(x.Enums, v)
				} else if wireType == 2 {
					var packedLen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						packedLen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if packedLen < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					postIndex := iNdEx + packedLen
					if postIndex < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					if postIndex > l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					var elementCount int
					if elementCount != 0 && len(x.Enums) == 0 {
						x.Enums = make([]Enum, 0, elementCount)
					}
					for iNdEx < postIndex {
						var v Enum
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							v |= Enum(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						x.Enums = append(x.Enums, v)
					}
				} else {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Enums", wireType)
				}
			case 25:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Durations", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Durations = append(x.Durations, &durationpb.Duration{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Durations[len(x.Durations)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 26:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SomeMessages", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SomeMessages = append(x.SomeMessages, &AMessage{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.SomeMessages[len(x.SomeMessages)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 27:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Positional1", wireType)
				}
				x.Positional1 = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Positional1 |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 28:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Positional2", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Positional2 = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 29:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Positional3Varargs", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Positional3Varargs = append(x.Positional3Varargs, &v1beta1.Coin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Positional3Varargs[len(x.Positional3Varargs)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 30:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DeprecatedField", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.DeprecatedField = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 31:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ShorthandDeprecatedField", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ShorthandDeprecatedField = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 32:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field HiddenBool", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.HiddenBool = bool(v != 0)
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_AMessage     protoreflect.MessageDescriptor
	fd_AMessage_bar protoreflect.FieldDescriptor
	fd_AMessage_baz protoreflect.FieldDescriptor
)

func init() {
	file_testpb_query_proto_init()
	md_AMessage = File_testpb_query_proto.Messages().ByName("AMessage")
	fd_AMessage_bar = md_AMessage.Fields().ByName("bar")
	fd_AMessage_baz = md_AMessage.Fields().ByName("baz")
}

var _ protoreflect.Message = (*fastReflection_AMessage)(nil)

type fastReflection_AMessage AMessage

func (x *AMessage) ProtoReflect() protoreflect.Message {
	return (*fastReflection_AMessage)(x)
}

func (x *AMessage) slowProtoReflect() protoreflect.Message {
	mi := &file_testpb_query_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_AMessage_messageType fastReflection_AMessage_messageType
var _ protoreflect.MessageType = fastReflection_AMessage_messageType{}

type fastReflection_AMessage_messageType struct{}

func (x fastReflection_AMessage_messageType) Zero() protoreflect.Message {
	return (*fastReflection_AMessage)(nil)
}
func (x fastReflection_AMessage_messageType) New() protoreflect.Message {
	return new(fastReflection_AMessage)
}
func (x fastReflection_AMessage_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_AMessage
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_AMessage) Descriptor() protoreflect.MessageDescriptor {
	return md_AMessage
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_AMessage) Type() protoreflect.MessageType {
	return _fastReflection_AMessage_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_AMessage) New() protoreflect.Message {
	return new(fastReflection_AMessage)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_AMessage) Interface() protoreflect.ProtoMessage {
	return (*AMessage)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_AMessage) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Bar != "" {
		value := protoreflect.ValueOfString(x.Bar)
		if !f(fd_AMessage_bar, value) {
			return
		}
	}
	if x.Baz != int32(0) {
		value := protoreflect.ValueOfInt32(x.Baz)
		if !f(fd_AMessage_baz, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_AMessage) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "testpb.AMessage.bar":
		return x.Bar != ""
	case "testpb.AMessage.baz":
		return x.Baz != int32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: testpb.AMessage"))
		}
		panic(fmt.Errorf("message testpb.AMessage does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AMessage) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "testpb.AMessage.bar":
		x.Bar = ""
	case "testpb.AMessage.baz":
		x.Baz = int32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: testpb.AMessage"))
		}
		panic(fmt.Errorf("message testpb.AMessage does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_AMessage) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "testpb.AMessage.bar":
		value := x.Bar
		return protoreflect.ValueOfString(value)
	case "testpb.AMessage.baz":
		value := x.Baz
		return protoreflect.ValueOfInt32(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: testpb.AMessage"))
		}
		panic(fmt.Errorf("message testpb.AMessage does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AMessage) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "testpb.AMessage.bar":
		x.Bar = value.Interface().(string)
	case "testpb.AMessage.baz":
		x.Baz = int32(value.Int())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: testpb.AMessage"))
		}
		panic(fmt.Errorf("message testpb.AMessage does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AMessage) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "testpb.AMessage.bar":
		panic(fmt.Errorf("field bar of message testpb.AMessage is not mutable"))
	case "testpb.AMessage.baz":
		panic(fmt.Errorf("field baz of message testpb.AMessage is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: testpb.AMessage"))
		}
		panic(fmt.Errorf("message testpb.AMessage does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_AMessage) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "testpb.AMessage.bar":
		return protoreflect.ValueOfString("")
	case "testpb.AMessage.baz":
		return protoreflect.ValueOfInt32(int32(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: testpb.AMessage"))
		}
		panic(fmt.Errorf("message testpb.AMessage does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_AMessage) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in testpb.AMessage", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_AMessage) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AMessage) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_AMessage) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_AMessage) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*AMessage)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Bar)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Baz != 0 {
			n += 1 + runtime.Sov(uint64(x.Baz))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*AMessage)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Baz != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Baz))
			i--
			dAtA[i] = 0x10
		}
		if len(x.Bar) > 0 {
			i -= len(x.Bar)
			copy(dAtA[i:], x.Bar)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Bar)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*AMessage)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: AMessage: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: AMessage: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Bar", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Bar = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Baz", wireType)
				}
				x.Baz = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Baz |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_EchoResponse         protoreflect.MessageDescriptor
	fd_EchoResponse_request protoreflect.FieldDescriptor
)

func init() {
	file_testpb_query_proto_init()
	md_EchoResponse = File_testpb_query_proto.Messages().ByName("EchoResponse")
	fd_EchoResponse_request = md_EchoResponse.Fields().ByName("request")
}

var _ protoreflect.Message = (*fastReflection_EchoResponse)(nil)

type fastReflection_EchoResponse EchoResponse

func (x *EchoResponse) ProtoReflect() protoreflect.Message {
	return (*fastReflection_EchoResponse)(x)
}

func (x *EchoResponse) slowProtoReflect() protoreflect.Message {
	mi := &file_testpb_query_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_EchoResponse_messageType fastReflection_EchoResponse_messageType
var _ protoreflect.MessageType = fastReflection_EchoResponse_messageType{}

type fastReflection_EchoResponse_messageType struct{}

func (x fastReflection_EchoResponse_messageType) Zero() protoreflect.Message {
	return (*fastReflection_EchoResponse)(nil)
}
func (x fastReflection_EchoResponse_messageType) New() protoreflect.Message {
	return new(fastReflection_EchoResponse)
}
func (x fastReflection_EchoResponse_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_EchoResponse
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_EchoResponse) Descriptor() protoreflect.MessageDescriptor {
	return md_EchoResponse
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_EchoResponse) Type() protoreflect.MessageType {
	return _fastReflection_EchoResponse_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_EchoResponse) New() protoreflect.Message {
	return new(fastReflection_EchoResponse)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_EchoResponse) Interface() protoreflect.ProtoMessage {
	return (*EchoResponse)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_EchoResponse) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Request != nil {
		value := protoreflect.ValueOfMessage(x.Request.ProtoReflect())
		if !f(fd_EchoResponse_request, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_EchoResponse) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "testpb.EchoResponse.request":
		return x.Request != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: testpb.EchoResponse"))
		}
		panic(fmt.Errorf("message testpb.EchoResponse does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EchoResponse) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "testpb.EchoResponse.request":
		x.Request = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: testpb.EchoResponse"))
		}
		panic(fmt.Errorf("message testpb.EchoResponse does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_EchoResponse) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "testpb.EchoResponse.request":
		value := x.Request
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: testpb.EchoResponse"))
		}
		panic(fmt.Errorf("message testpb.EchoResponse does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EchoResponse) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "testpb.EchoResponse.request":
		x.Request = value.Message().Interface().(*EchoRequest)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: testpb.EchoResponse"))
		}
		panic(fmt.Errorf("message testpb.EchoResponse does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EchoResponse) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "testpb.EchoResponse.request":
		if x.Request == nil {
			x.Request = new(EchoRequest)
		}
		return protoreflect.ValueOfMessage(x.Request.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: testpb.EchoResponse"))
		}
		panic(fmt.Errorf("message testpb.EchoResponse does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_EchoResponse) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "testpb.EchoResponse.request":
		m := new(EchoRequest)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: testpb.EchoResponse"))
		}
		panic(fmt.Errorf("message testpb.EchoResponse does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_EchoResponse) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in testpb.EchoResponse", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_EchoResponse) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EchoResponse) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_EchoResponse) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_EchoResponse) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*EchoResponse)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Request != nil {
			l = options.Size(x.Request)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*EchoResponse)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Request != nil {
			encoded, err := options.Marshal(x.Request)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*EchoResponse)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: EchoResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: EchoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Request == nil {
					x.Request = &EchoRequest{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Request); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: testpb/query.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Enum int32

const (
	Enum_ENUM_UNSPECIFIED Enum = 0
	Enum_ENUM_ONE         Enum = 1
	Enum_ENUM_TWO         Enum = 2
	Enum_ENUM_FIVE        Enum = 5
	Enum_ENUM_NEG_THREE   Enum = -3
)

// Enum value maps for Enum.
var (
	Enum_name = map[int32]string{
		0:  "ENUM_UNSPECIFIED",
		1:  "ENUM_ONE",
		2:  "ENUM_TWO",
		5:  "ENUM_FIVE",
		-3: "ENUM_NEG_THREE",
	}
	Enum_value = map[string]int32{
		"ENUM_UNSPECIFIED": 0,
		"ENUM_ONE":         1,
		"ENUM_TWO":         2,
		"ENUM_FIVE":        5,
		"ENUM_NEG_THREE":   -3,
	}
)

func (x Enum) Enum() *Enum {
	p := new(Enum)
	*p = x
	return p
}

func (x Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_testpb_query_proto_enumTypes[0].Descriptor()
}

func (Enum) Type() protoreflect.EnumType {
	return &file_testpb_query_proto_enumTypes[0]
}

func (x Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Enum.Descriptor instead.
func (Enum) EnumDescriptor() ([]byte, []int) {
	return file_testpb_query_proto_rawDescGZIP(), []int{0}
}

type EchoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// u32 is an uint32
	U32                      uint32                 `protobuf:"varint,1,opt,name=u32,proto3" json:"u32,omitempty"`
	U64                      uint64                 `protobuf:"varint,2,opt,name=u64,proto3" json:"u64,omitempty"`
	Str                      string                 `protobuf:"bytes,3,opt,name=str,proto3" json:"str,omitempty"`
	Bz                       []byte                 `protobuf:"bytes,4,opt,name=bz,proto3" json:"bz,omitempty"`
	Timestamp                *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Duration                 *durationpb.Duration   `protobuf:"bytes,6,opt,name=duration,proto3" json:"duration,omitempty"`
	I32                      int32                  `protobuf:"varint,7,opt,name=i32,proto3" json:"i32,omitempty"`
	I64                      int64                  `protobuf:"varint,10,opt,name=i64,proto3" json:"i64,omitempty"`
	ABool                    bool                   `protobuf:"varint,15,opt,name=a_bool,json=aBool,proto3" json:"a_bool,omitempty"`
	AnEnum                   Enum                   `protobuf:"varint,16,opt,name=an_enum,json=anEnum,proto3,enum=testpb.Enum" json:"an_enum,omitempty"`
	AMessage                 *AMessage              `protobuf:"bytes,17,opt,name=a_message,json=aMessage,proto3" json:"a_message,omitempty"`
	ACoin                    *v1beta1.Coin          `protobuf:"bytes,18,opt,name=a_coin,json=aCoin,proto3" json:"a_coin,omitempty"`
	AnAddress                string                 `protobuf:"bytes,19,opt,name=an_address,json=anAddress,proto3" json:"an_address,omitempty"`
	Page                     *v1beta11.PageRequest  `protobuf:"bytes,20,opt,name=page,proto3" json:"page,omitempty"`
	Bools                    []bool                 `protobuf:"varint,21,rep,packed,name=bools,proto3" json:"bools,omitempty"`
	Uints                    []uint32               `protobuf:"varint,22,rep,packed,name=uints,proto3" json:"uints,omitempty"`
	Strings                  []string               `protobuf:"bytes,23,rep,name=strings,proto3" json:"strings,omitempty"`
	Enums                    []Enum                 `protobuf:"varint,24,rep,packed,name=enums,proto3,enum=testpb.Enum" json:"enums,omitempty"`
	Durations                []*durationpb.Duration `protobuf:"bytes,25,rep,name=durations,proto3" json:"durations,omitempty"`
	SomeMessages             []*AMessage            `protobuf:"bytes,26,rep,name=some_messages,json=someMessages,proto3" json:"some_messages,omitempty"`
	Positional1              int32                  `protobuf:"varint,27,opt,name=positional1,proto3" json:"positional1,omitempty"`
	Positional2              string                 `protobuf:"bytes,28,opt,name=positional2,proto3" json:"positional2,omitempty"`
	Positional3Varargs       []*v1beta1.Coin        `protobuf:"bytes,29,rep,name=positional3_varargs,json=positional3Varargs,proto3" json:"positional3_varargs,omitempty"`
	DeprecatedField          string                 `protobuf:"bytes,30,opt,name=deprecated_field,json=deprecatedField,proto3" json:"deprecated_field,omitempty"`
	ShorthandDeprecatedField string                 `protobuf:"bytes,31,opt,name=shorthand_deprecated_field,json=shorthandDeprecatedField,proto3" json:"shorthand_deprecated_field,omitempty"`
	HiddenBool               bool                   `protobuf:"varint,32,opt,name=hidden_bool,json=hiddenBool,proto3" json:"hidden_bool,omitempty"`
}

func (x *EchoRequest) Reset() {
	*x = EchoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testpb_query_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EchoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EchoRequest) ProtoMessage() {}

// Deprecated: Use EchoRequest.ProtoReflect.Descriptor instead.
func (*EchoRequest) Descriptor() ([]byte, []int) {
	return file_testpb_query_proto_rawDescGZIP(), []int{0}
}

func (x *EchoRequest) GetU32() uint32 {
	if x != nil {
		return x.U32
	}
	return 0
}

func (x *EchoRequest) GetU64() uint64 {
	if x != nil {
		return x.U64
	}
	return 0
}

func (x *EchoRequest) GetStr() string {
	if x != nil {
		return x.Str
	}
	return ""
}

func (x *EchoRequest) GetBz() []byte {
	if x != nil {
		return x.Bz
	}
	return nil
}

func (x *EchoRequest) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *EchoRequest) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *EchoRequest) GetI32() int32 {
	if x != nil {
		return x.I32
	}
	return 0
}

func (x *EchoRequest) GetI64() int64 {
	if x != nil {
		return x.I64
	}
	return 0
}

func (x *EchoRequest) GetABool() bool {
	if x != nil {
		return x.ABool
	}
	return false
}

func (x *EchoRequest) GetAnEnum() Enum {
	if x != nil {
		return x.AnEnum
	}
	return Enum_ENUM_UNSPECIFIED
}

func (x *EchoRequest) GetAMessage() *AMessage {
	if x != nil {
		return x.AMessage
	}
	return nil
}

func (x *EchoRequest) GetACoin() *v1beta1.Coin {
	if x != nil {
		return x.ACoin
	}
	return nil
}

func (x *EchoRequest) GetAnAddress() string {
	if x != nil {
		return x.AnAddress
	}
	return ""
}

func (x *EchoRequest) GetPage() *v1beta11.PageRequest {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *EchoRequest) GetBools() []bool {
	if x != nil {
		return x.Bools
	}
	return nil
}

func (x *EchoRequest) GetUints() []uint32 {
	if x != nil {
		return x.Uints
	}
	return nil
}

func (x *EchoRequest) GetStrings() []string {
	if x != nil {
		return x.Strings
	}
	return nil
}

func (x *EchoRequest) GetEnums() []Enum {
	if x != nil {
		return x.Enums
	}
	return nil
}

func (x *EchoRequest) GetDurations() []*durationpb.Duration {
	if x != nil {
		return x.Durations
	}
	return nil
}

func (x *EchoRequest) GetSomeMessages() []*AMessage {
	if x != nil {
		return x.SomeMessages
	}
	return nil
}

func (x *EchoRequest) GetPositional1() int32 {
	if x != nil {
		return x.Positional1
	}
	return 0
}

func (x *EchoRequest) GetPositional2() string {
	if x != nil {
		return x.Positional2
	}
	return ""
}

func (x *EchoRequest) GetPositional3Varargs() []*v1beta1.Coin {
	if x != nil {
		return x.Positional3Varargs
	}
	return nil
}

func (x *EchoRequest) GetDeprecatedField() string {
	if x != nil {
		return x.DeprecatedField
	}
	return ""
}

func (x *EchoRequest) GetShorthandDeprecatedField() string {
	if x != nil {
		return x.ShorthandDeprecatedField
	}
	return ""
}

func (x *EchoRequest) GetHiddenBool() bool {
	if x != nil {
		return x.HiddenBool
	}
	return false
}

type AMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bar string `protobuf:"bytes,1,opt,name=bar,proto3" json:"bar,omitempty"`
	Baz int32  `protobuf:"varint,2,opt,name=baz,proto3" json:"baz,omitempty"`
}

func (x *AMessage) Reset() {
	*x = AMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testpb_query_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AMessage) ProtoMessage() {}

// Deprecated: Use AMessage.ProtoReflect.Descriptor instead.
func (*AMessage) Descriptor() ([]byte, []int) {
	return file_testpb_query_proto_rawDescGZIP(), []int{1}
}

func (x *AMessage) GetBar() string {
	if x != nil {
		return x.Bar
	}
	return ""
}

func (x *AMessage) GetBaz() int32 {
	if x != nil {
		return x.Baz
	}
	return 0
}

type EchoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request *EchoRequest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *EchoResponse) Reset() {
	*x = EchoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testpb_query_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EchoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EchoResponse) ProtoMessage() {}

// Deprecated: Use EchoResponse.ProtoReflect.Descriptor instead.
func (*EchoResponse) Descriptor() ([]byte, []int) {
	return file_testpb_query_proto_rawDescGZIP(), []int{2}
}

func (x *EchoResponse) GetRequest() *EchoRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

var File_testpb_query_proto protoreflect.FileDescriptor

var file_testpb_query_proto_rawDesc = []byte{
	0x0a, 0x12, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x62, 0x61, 0x73,
	0x65, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf0, 0x07, 0x0a, 0x0b, 0x45, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x33, 0x32, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x75, 0x33, 0x32, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x36, 0x34, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x36, 0x34, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x74, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x74, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x62, 0x7a,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x62, 0x7a, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x69,
	0x33, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x69, 0x33, 0x32, 0x12, 0x10, 0x0a,
	0x03, 0x69, 0x36, 0x34, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x69, 0x36, 0x34, 0x12,
	0x15, 0x0a, 0x06, 0x61, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x61, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x25, 0x0a, 0x07, 0x61, 0x6e, 0x5f, 0x65, 0x6e, 0x75,
	0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x06, 0x61, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x2d, 0x0a,
	0x09, 0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x41, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x08, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x06,
	0x61, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x05, 0x61, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x37,
	0x0a, 0x0a, 0x61, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x18, 0xd2, 0xb4, 0x2d, 0x14, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x61, 0x6e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3a, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x15, 0x20, 0x03,
	0x28, 0x08, 0x52, 0x05, 0x62, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x69, 0x6e,
	0x74, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x75, 0x69, 0x6e, 0x74, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x22, 0x0a, 0x05, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70,
	0x62, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x05, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x12, 0x37, 0x0a,
	0x09, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x35, 0x0a, 0x0d, 0x73, 0x6f, 0x6d, 0x65, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x41, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x0c, 0x73, 0x6f, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x31, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x31, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x32, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x32, 0x12, 0x4a, 0x0a, 0x13, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x33,
	0x5f, 0x76, 0x61, 0x72, 0x61, 0x72, 0x67, 0x73, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x12, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x33, 0x56, 0x61, 0x72, 0x61, 0x72, 0x67, 0x73, 0x12, 0x29, 0x0a,
	0x10, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x3c, 0x0a, 0x1a, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x68, 0x69, 0x64,
	0x64, 0x65, 0x6e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x2e, 0x0a, 0x08, 0x41, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x62, 0x61, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x61, 0x7a, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x62, 0x61, 0x7a, 0x22, 0x3d, 0x0a, 0x0c, 0x45, 0x63, 0x68, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70,
	0x62, 0x2e, 0x45, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2a, 0x64, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x14,
	0x0a, 0x10, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x4f, 0x4e, 0x45,
	0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x54, 0x57, 0x4f, 0x10, 0x02,
	0x12, 0x0d, 0x0a, 0x09, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x46, 0x49, 0x56, 0x45, 0x10, 0x05, 0x12,
	0x1b, 0x0a, 0x0e, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x4e, 0x45, 0x47, 0x5f, 0x54, 0x48, 0x52, 0x45,
	0x45, 0x10, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x32, 0x3a, 0x0a, 0x05,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x31, 0x0a, 0x04, 0x45, 0x63, 0x68, 0x6f, 0x12, 0x13, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x45, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x14, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x45, 0x63, 0x68, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x88, 0x01, 0x0a, 0x0a, 0x63, 0x6f, 0x6d,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x42, 0x0a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d,
	0x73, 0x64, 0x6b, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x32, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0xa2, 0x02, 0x03,
	0x54, 0x58, 0x58, 0xaa, 0x02, 0x06, 0x54, 0x65, 0x73, 0x74, 0x70, 0x62, 0xca, 0x02, 0x06, 0x54,
	0x65, 0x73, 0x74, 0x70, 0x62, 0xe2, 0x02, 0x12, 0x54, 0x65, 0x73, 0x74, 0x70, 0x62, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x06, 0x54, 0x65, 0x73,
	0x74, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_testpb_query_proto_rawDescOnce sync.Once
	file_testpb_query_proto_rawDescData = file_testpb_query_proto_rawDesc
)

func file_testpb_query_proto_rawDescGZIP() []byte {
	file_testpb_query_proto_rawDescOnce.Do(func() {
		file_testpb_query_proto_rawDescData = protoimpl.X.CompressGZIP(file_testpb_query_proto_rawDescData)
	})
	return file_testpb_query_proto_rawDescData
}

var file_testpb_query_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_testpb_query_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_testpb_query_proto_goTypes = []interface{}{
	(Enum)(0),                     // 0: testpb.Enum
	(*EchoRequest)(nil),           // 1: testpb.EchoRequest
	(*AMessage)(nil),              // 2: testpb.AMessage
	(*EchoResponse)(nil),          // 3: testpb.EchoResponse
	(*timestamppb.Timestamp)(nil), // 4: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),   // 5: google.protobuf.Duration
	(*v1beta1.Coin)(nil),          // 6: cosmos.base.v1beta1.Coin
	(*v1beta11.PageRequest)(nil),  // 7: cosmos.base.query.v1beta1.PageRequest
}
var file_testpb_query_proto_depIdxs = []int32{
	4,  // 0: testpb.EchoRequest.timestamp:type_name -> google.protobuf.Timestamp
	5,  // 1: testpb.EchoRequest.duration:type_name -> google.protobuf.Duration
	0,  // 2: testpb.EchoRequest.an_enum:type_name -> testpb.Enum
	2,  // 3: testpb.EchoRequest.a_message:type_name -> testpb.AMessage
	6,  // 4: testpb.EchoRequest.a_coin:type_name -> cosmos.base.v1beta1.Coin
	7,  // 5: testpb.EchoRequest.page:type_name -> cosmos.base.query.v1beta1.PageRequest
	0,  // 6: testpb.EchoRequest.enums:type_name -> testpb.Enum
	5,  // 7: testpb.EchoRequest.durations:type_name -> google.protobuf.Duration
	2,  // 8: testpb.EchoRequest.some_messages:type_name -> testpb.AMessage
	6,  // 9: testpb.EchoRequest.positional3_varargs:type_name -> cosmos.base.v1beta1.Coin
	1,  // 10: testpb.EchoResponse.request:type_name -> testpb.EchoRequest
	1,  // 11: testpb.Query.Echo:input_type -> testpb.EchoRequest
	3,  // 12: testpb.Query.Echo:output_type -> testpb.EchoResponse
	12, // [12:13] is the sub-list for method output_type
	11, // [11:12] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_testpb_query_proto_init() }
func file_testpb_query_proto_init() {
	if File_testpb_query_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_testpb_query_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EchoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testpb_query_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testpb_query_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EchoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_testpb_query_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_testpb_query_proto_goTypes,
		DependencyIndexes: file_testpb_query_proto_depIdxs,
		EnumInfos:         file_testpb_query_proto_enumTypes,
		MessageInfos:      file_testpb_query_proto_msgTypes,
	}.Build()
	File_testpb_query_proto = out.File
	file_testpb_query_proto_rawDesc = nil
	file_testpb_query_proto_goTypes = nil
	file_testpb_query_proto_depIdxs = nil
}
