---
name: "cosmos-sdk-darwin-0.34.3"
enable_cache: true
distro: "ubuntu"
suites:
- "bionic"
architectures:
- "amd64"
packages:
- "bsdmainutils"
- "ca-certificates"
- "curl"
- "git"
- "xxd"
remotes:
- "url": "https://github.com/cosmos/cosmos-sdk.git"
  "dir": "cosmos-sdk"
files:
- "go1.12.4.linux-amd64.tar.gz"
script: |
  set -e -o pipefail

  f_patch_strings_in_file() {
      local FILE="$1"
      local PATTERN="$2"
      local REPLACEMENT="$3"

      # Find all unique strings in FILE that contain the pattern
      STRINGS=$(strings ${FILE} | grep ${PATTERN} | sort -u -r)

      if [ "${STRINGS}" != "" ] ; then
          echo "File '${FILE}' contain strings with '${PATTERN}' in them:"

          for OLD_STRING in ${STRINGS} ; do
              # Create the new string with a simple bash-replacement
              NEW_STRING=${OLD_STRING//${PATTERN}/${REPLACEMENT}}

              # Create null terminated ASCII HEX representations of the strings
              OLD_STRING_HEX="$(echo -n ${OLD_STRING} | xxd -g 0 -u -ps -c 256)00"
              NEW_STRING_HEX="$(echo -n ${NEW_STRING} | xxd -g 0 -u -ps -c 256)00"

              if [ ${#NEW_STRING_HEX} -le ${#OLD_STRING_HEX} ] ; then
                  # Pad the replacement string with null terminations so the
                  # length matches the original string
                  while [ ${#NEW_STRING_HEX} -lt ${#OLD_STRING_HEX} ] ; do
                      NEW_STRING_HEX="${NEW_STRING_HEX}00"
                  done

                  # Replace every occurrence of OLD_STRING with NEW_STRING
                  echo -n "Replacing ${OLD_STRING} with ${NEW_STRING}... "
                  hexdump -ve '1/1 "%.2X"' ${FILE} | \
                  sed "s/${OLD_STRING_HEX}/${NEW_STRING_HEX}/g" | \
                  xxd -r -p > ${FILE}.tmp
                  chmod --reference ${FILE} ${FILE}.tmp
                  mv ${FILE}.tmp ${FILE}
                  echo "Done!"
              else
                  echo "New string '${NEW_STRING}' is longer than old" \
                      "string '${OLD_STRING}'. Skipping."
              fi
          done
      fi
  }

  # Install go and configure the environment
  export TAR_OPTIONS="--mtime="$REFERENCE_DATE\\\ $REFERENCE_TIME""
  export BUILD_DIR=`pwd`
  tar xf go1.12.4.linux-amd64.tar.gz
  [ -d go/ ]
  rm -f go1.12.4.linux-amd64.tar.gz

  export GOOS=darwin
  export GOROOT=${BUILD_DIR}/go
  export GOPATH=${BUILD_DIR}/gopath
  mkdir -p ${GOPATH}/bin

  export PATH_orig=${PATH}
  export PATH=$GOPATH/bin:$GOROOT/bin:$PATH

  export ARCHS='386 amd64'
  export GO111MODULE=on

  # Make release tarball
  pushd cosmos-sdk
  VERSION=$(git describe --tags | sed 's/^v//')
  COMMIT=$(git log -1 --format='%H')
  DISTNAME=cosmos-sdk-${VERSION}
  git archive --format tar.gz --prefix cosmos-sdk-${VERSION}/ -o ${DISTNAME}.tar.gz HEAD
  SOURCEDIST=`pwd`/`echo cosmos-sdk-*.tar.gz`
  popd

  # Correct tar file order
  mkdir -p temp
  pushd temp
  tar xf $SOURCEDIST
  rm $SOURCEDIST
  find cosmos-sdk-* | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > $SOURCEDIST
  popd

  # Prepare GOPATH and install deps
  distsrc=${GOPATH}/src/github.com/cosmos/cosmos-sdk
  mkdir -p ${distsrc}
  pushd ${distsrc}
  tar --strip-components=1 -xf $SOURCEDIST
  go mod download
  popd

  # Configure LDFLAGS for reproducible builds
  LDFLAGS="-s -w -linkmode=internal \
    -buildid=reproducible \
    -X github.com/cosmos/cosmos-sdk/version.Name=gaia \
    -X github.com/cosmos/cosmos-sdk/version.Version=${VERSION} \
    -X github.com/cosmos/cosmos-sdk/version.Commit=${COMMIT} \
    -X github.com/cosmos/cosmos-sdk/version.BuildTags=netgo"

  # Extract release tarball and build
  for arch in ${ARCHS}; do
    INSTALLPATH=`pwd`/installed/${DISTNAME}-${arch}
    mkdir -p ${INSTALLPATH}

    # Build gaia tool suite
    pushd ${distsrc}
    for prog in gaiacli gaiad gaiareplay; do
      GOARCH=${arch} CGO_ENABLED=0 GOROOT_FINAL=go go build -a \
        -gcflags=all=-trimpath=${GOPATH} \
        -asmflags=all=-trimpath=${GOPATH} \
        -mod=readonly -tags "netgo" \
        -ldflags "${LDFLAGS}" \
        -o ${INSTALLPATH}/${prog} ./cmd/gaia/cmd/${prog}

      # Remove DWARF info from the binary
      go_build_tmpdir="$(strings ${INSTALLPATH}/${prog} | grep /tmp/go-build)"
      f_patch_strings_in_file ${INSTALLPATH}/${prog} ${go_build_tmpdir} /tmp/go-build/b001/_gomod_.go

    done
    popd # ${distsrc}

    pushd ${INSTALLPATH}
    find -type f | sort | tar \
      --no-recursion --mode='u+rw,go+r-w,a+X' \
      --numeric-owner --sort=name \
      --owner=0 --group=0 -c -T - | gzip -9n > ${OUTDIR}/${DISTNAME}-darwin-${arch}.tar.gz
    popd  # installed
  done

  rm -rf ${distsrc}

  mkdir -p $OUTDIR/src
  mv $SOURCEDIST $OUTDIR/src
