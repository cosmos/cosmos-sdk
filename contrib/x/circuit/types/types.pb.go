// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmos/circuit/v1/types.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Level is the permission level.
type Permissions_Level int32

const (
	// LEVEL_NONE_UNSPECIFIED indicates that the account will have no circuit
	// breaker permissions.
	Permissions_LEVEL_NONE_UNSPECIFIED Permissions_Level = 0
	// LEVEL_SOME_MSGS indicates that the account will have permission to
	// trip or reset the circuit breaker for some Msg type URLs. If this level
	// is chosen, a non-empty list of Msg type URLs must be provided in
	// limit_type_urls.
	Permissions_LEVEL_SOME_MSGS Permissions_Level = 1
	// LEVEL_ALL_MSGS indicates that the account can trip or reset the circuit
	// breaker for Msg's of all type URLs.
	Permissions_LEVEL_ALL_MSGS Permissions_Level = 2
	// LEVEL_SUPER_ADMIN indicates that the account can take all circuit breaker
	// actions and can grant permissions to other accounts.
	Permissions_LEVEL_SUPER_ADMIN Permissions_Level = 3
)

var Permissions_Level_name = map[int32]string{
	0: "LEVEL_NONE_UNSPECIFIED",
	1: "LEVEL_SOME_MSGS",
	2: "LEVEL_ALL_MSGS",
	3: "LEVEL_SUPER_ADMIN",
}

var Permissions_Level_value = map[string]int32{
	"LEVEL_NONE_UNSPECIFIED": 0,
	"LEVEL_SOME_MSGS":        1,
	"LEVEL_ALL_MSGS":         2,
	"LEVEL_SUPER_ADMIN":      3,
}

func (x Permissions_Level) String() string {
	return proto.EnumName(Permissions_Level_name, int32(x))
}

func (Permissions_Level) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1f5fe523f8a09dbc, []int{0, 0}
}

// Permissions are the permissions that an account has to trip
// or reset the circuit breaker.
type Permissions struct {
	// level is the level of permissions granted to this account.
	Level Permissions_Level `protobuf:"varint,1,opt,name=level,proto3,enum=cosmos.circuit.v1.Permissions_Level" json:"level,omitempty"`
	// limit_type_urls is used with LEVEL_SOME_MSGS to limit the lists of Msg type
	// URLs that the account can trip. It is an error to use limit_type_urls with
	// a level other than LEVEL_SOME_MSGS.
	LimitTypeUrls []string `protobuf:"bytes,2,rep,name=limit_type_urls,json=limitTypeUrls,proto3" json:"limit_type_urls,omitempty"`
}

func (m *Permissions) Reset()         { *m = Permissions{} }
func (m *Permissions) String() string { return proto.CompactTextString(m) }
func (*Permissions) ProtoMessage()    {}
func (*Permissions) Descriptor() ([]byte, []int) {
	return fileDescriptor_1f5fe523f8a09dbc, []int{0}
}
func (m *Permissions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Permissions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Permissions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Permissions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Permissions.Merge(m, src)
}
func (m *Permissions) XXX_Size() int {
	return m.Size()
}
func (m *Permissions) XXX_DiscardUnknown() {
	xxx_messageInfo_Permissions.DiscardUnknown(m)
}

var xxx_messageInfo_Permissions proto.InternalMessageInfo

func (m *Permissions) GetLevel() Permissions_Level {
	if m != nil {
		return m.Level
	}
	return Permissions_LEVEL_NONE_UNSPECIFIED
}

func (m *Permissions) GetLimitTypeUrls() []string {
	if m != nil {
		return m.LimitTypeUrls
	}
	return nil
}

// GenesisAccountPermissions is the account permissions for the circuit breaker in genesis
type GenesisAccountPermissions struct {
	Address     string       `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Permissions *Permissions `protobuf:"bytes,2,opt,name=permissions,proto3" json:"permissions,omitempty"`
}

func (m *GenesisAccountPermissions) Reset()         { *m = GenesisAccountPermissions{} }
func (m *GenesisAccountPermissions) String() string { return proto.CompactTextString(m) }
func (*GenesisAccountPermissions) ProtoMessage()    {}
func (*GenesisAccountPermissions) Descriptor() ([]byte, []int) {
	return fileDescriptor_1f5fe523f8a09dbc, []int{1}
}
func (m *GenesisAccountPermissions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisAccountPermissions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisAccountPermissions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisAccountPermissions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisAccountPermissions.Merge(m, src)
}
func (m *GenesisAccountPermissions) XXX_Size() int {
	return m.Size()
}
func (m *GenesisAccountPermissions) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisAccountPermissions.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisAccountPermissions proto.InternalMessageInfo

func (m *GenesisAccountPermissions) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *GenesisAccountPermissions) GetPermissions() *Permissions {
	if m != nil {
		return m.Permissions
	}
	return nil
}

// GenesisState is the state that must be provided at genesis.
type GenesisState struct {
	AccountPermissions []*GenesisAccountPermissions `protobuf:"bytes,1,rep,name=account_permissions,json=accountPermissions,proto3" json:"account_permissions,omitempty"`
	DisabledTypeUrls   []string                     `protobuf:"bytes,2,rep,name=disabled_type_urls,json=disabledTypeUrls,proto3" json:"disabled_type_urls,omitempty"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_1f5fe523f8a09dbc, []int{2}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetAccountPermissions() []*GenesisAccountPermissions {
	if m != nil {
		return m.AccountPermissions
	}
	return nil
}

func (m *GenesisState) GetDisabledTypeUrls() []string {
	if m != nil {
		return m.DisabledTypeUrls
	}
	return nil
}

func init() {
	proto.RegisterEnum("cosmos.circuit.v1.Permissions_Level", Permissions_Level_name, Permissions_Level_value)
	proto.RegisterType((*Permissions)(nil), "cosmos.circuit.v1.Permissions")
	proto.RegisterType((*GenesisAccountPermissions)(nil), "cosmos.circuit.v1.GenesisAccountPermissions")
	proto.RegisterType((*GenesisState)(nil), "cosmos.circuit.v1.GenesisState")
}

func init() { proto.RegisterFile("cosmos/circuit/v1/types.proto", fileDescriptor_1f5fe523f8a09dbc) }

var fileDescriptor_1f5fe523f8a09dbc = []byte{
	// 399 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0x4f, 0x8b, 0xda, 0x40,
	0x1c, 0xcd, 0x28, 0xb6, 0x38, 0x69, 0x35, 0x8e, 0xb4, 0xa4, 0x85, 0x86, 0x10, 0x4a, 0xc9, 0xc1,
	0x26, 0x68, 0x6f, 0x3d, 0xd5, 0xd6, 0x28, 0x42, 0x8c, 0x92, 0xd4, 0x1e, 0x0a, 0x25, 0xc4, 0x64,
	0x68, 0x87, 0x26, 0x26, 0x64, 0x26, 0xb6, 0x7e, 0x8b, 0xde, 0xfb, 0x85, 0xf6, 0xe8, 0x69, 0xd9,
	0xe3, 0xa2, 0x5f, 0x64, 0x31, 0x31, 0xbb, 0x01, 0x77, 0xf7, 0x34, 0xcc, 0xef, 0xbd, 0xf7, 0xfb,
	0xf3, 0x78, 0xf0, 0x8d, 0x1f, 0xd3, 0x28, 0xa6, 0xba, 0x4f, 0x52, 0x3f, 0x23, 0x4c, 0xdf, 0xf4,
	0x75, 0xb6, 0x4d, 0x30, 0xd5, 0x92, 0x34, 0x66, 0x31, 0xea, 0x14, 0xb0, 0x76, 0x82, 0xb5, 0x4d,
	0x5f, 0xb9, 0x04, 0x90, 0x5f, 0xe0, 0x34, 0x22, 0x94, 0x92, 0x78, 0x4d, 0xd1, 0x47, 0xd8, 0x08,
	0xf1, 0x06, 0x87, 0x22, 0x90, 0x81, 0xda, 0x1a, 0xbc, 0xd5, 0xce, 0x24, 0x5a, 0x85, 0xae, 0x99,
	0x47, 0xae, 0x5d, 0x48, 0xd0, 0x3b, 0xd8, 0x0e, 0x49, 0x44, 0x98, 0x7b, 0x9c, 0xe9, 0x66, 0x69,
	0x48, 0xc5, 0x9a, 0x5c, 0x57, 0x9b, 0xf6, 0xf3, 0xbc, 0xfc, 0x75, 0x9b, 0xe0, 0x65, 0x1a, 0x52,
	0xc5, 0x87, 0x8d, 0x5c, 0x87, 0x5e, 0xc3, 0x97, 0xa6, 0xf1, 0xcd, 0x30, 0x5d, 0x6b, 0x6e, 0x19,
	0xee, 0xd2, 0x72, 0x16, 0xc6, 0x97, 0xe9, 0x78, 0x6a, 0x8c, 0x04, 0x0e, 0x75, 0x61, 0xbb, 0xc0,
	0x9c, 0xf9, 0xcc, 0x70, 0x67, 0xce, 0xc4, 0x11, 0x00, 0x42, 0xb0, 0x55, 0x14, 0x87, 0xa6, 0x59,
	0xd4, 0x6a, 0xe8, 0x05, 0xec, 0x9c, 0x88, 0xcb, 0x85, 0x61, 0xbb, 0xc3, 0xd1, 0x6c, 0x6a, 0x09,
	0x75, 0xe5, 0x0f, 0x7c, 0x35, 0xc1, 0x6b, 0x4c, 0x09, 0x1d, 0xfa, 0x7e, 0x9c, 0xad, 0x59, 0xf5,
	0x4a, 0x11, 0x3e, 0xf5, 0x82, 0x20, 0xc5, 0x94, 0xe6, 0x77, 0x36, 0xed, 0xf2, 0x8b, 0x3e, 0x41,
	0x3e, 0xb9, 0x23, 0x8a, 0x35, 0x19, 0xa8, 0xfc, 0x40, 0x7a, 0xdc, 0x05, 0xbb, 0x2a, 0x51, 0xfe,
	0x03, 0xf8, 0xec, 0x34, 0xd9, 0x61, 0x1e, 0xc3, 0xe8, 0x07, 0xec, 0x7a, 0xc5, 0x0a, 0x6e, 0xb5,
	0x35, 0x90, 0xeb, 0x2a, 0x3f, 0xe8, 0xdd, 0xd3, 0xfa, 0xc1, 0xbd, 0x6d, 0xe4, 0x9d, 0xdf, 0xd2,
	0x83, 0x28, 0x20, 0xd4, 0x5b, 0x85, 0x38, 0x38, 0x33, 0x5e, 0x28, 0x91, 0xd2, 0xfb, 0xcf, 0xe3,
	0x8b, 0xbd, 0x04, 0x76, 0x7b, 0x09, 0x5c, 0xef, 0x25, 0xf0, 0xef, 0x20, 0x71, 0xbb, 0x83, 0xc4,
	0x5d, 0x1d, 0x24, 0xee, 0x7b, 0xef, 0x27, 0x61, 0xbf, 0xb2, 0x95, 0xe6, 0xc7, 0x91, 0x5e, 0xc6,
	0x28, 0x7f, 0xde, 0xd3, 0xe0, 0xb7, 0xfe, 0xf7, 0x36, 0x53, 0x79, 0xa0, 0x56, 0x4f, 0xf2, 0x44,
	0x7d, 0xb8, 0x09, 0x00, 0x00, 0xff, 0xff, 0x23, 0xcc, 0x04, 0xa6, 0x72, 0x02, 0x00, 0x00,
}

func (m *Permissions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Permissions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Permissions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LimitTypeUrls) > 0 {
		for iNdEx := len(m.LimitTypeUrls) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.LimitTypeUrls[iNdEx])
			copy(dAtA[i:], m.LimitTypeUrls[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.LimitTypeUrls[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Level != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GenesisAccountPermissions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisAccountPermissions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisAccountPermissions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Permissions != nil {
		{
			size, err := m.Permissions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DisabledTypeUrls) > 0 {
		for iNdEx := len(m.DisabledTypeUrls) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DisabledTypeUrls[iNdEx])
			copy(dAtA[i:], m.DisabledTypeUrls[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.DisabledTypeUrls[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.AccountPermissions) > 0 {
		for iNdEx := len(m.AccountPermissions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AccountPermissions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Permissions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Level != 0 {
		n += 1 + sovTypes(uint64(m.Level))
	}
	if len(m.LimitTypeUrls) > 0 {
		for _, s := range m.LimitTypeUrls {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *GenesisAccountPermissions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Permissions != nil {
		l = m.Permissions.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AccountPermissions) > 0 {
		for _, e := range m.AccountPermissions {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.DisabledTypeUrls) > 0 {
		for _, s := range m.DisabledTypeUrls {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Permissions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Permissions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Permissions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= Permissions_Level(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitTypeUrls", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LimitTypeUrls = append(m.LimitTypeUrls, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisAccountPermissions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisAccountPermissions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisAccountPermissions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permissions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Permissions == nil {
				m.Permissions = &Permissions{}
			}
			if err := m.Permissions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountPermissions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountPermissions = append(m.AccountPermissions, &GenesisAccountPermissions{})
			if err := m.AccountPermissions[len(m.AccountPermissions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisabledTypeUrls", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisabledTypeUrls = append(m.DisabledTypeUrls, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
