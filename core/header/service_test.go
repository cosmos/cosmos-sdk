package header

import (
	"bytes"
	"context"
	"testing"
	"time"
)

func TestBytes(t *testing.T) {
	tests := []struct {
		name   string
		info   Info
		expect []byte
	}{
		{
			name: "Valid Info",
			info: Info{
				Height:  12345,
				Hash:    []byte{0x01, 0x02, 0x03},
				Time:    time.Date(2022, 1, 1, 0, 0, 0, 0, time.UTC),
				ChainID: "test-chain",
				AppHash: []byte{0x04, 0x05, 0x06},
			},
			expect: []byte{
				0x39, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Height (12345)
				0x01, 0x02, 0x03, // Hash
				0x00, 0x00, 0x00, 0x00, 0x61, 0x7a, 0x9f, 0x00, // Time (1640995200)
				0x09, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x63, 0x68, 0x61, 0x69, 0x6e, // ChainID ("test-chain")
				0x04, 0x05, 0x06, // AppHash
			},
		},
		{
			name: "Zero Height",
			info: Info{
				Height:  0,
				Hash:    []byte{0x01, 0x02, 0x03},
				Time:    time.Date(2022, 1, 1, 0, 0, 0, 0, time.UTC),
				ChainID: "test-chain",
				AppHash: []byte{0x04, 0x05, 0x06},
			},
			expect: []byte{
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Height (0)
				0x01, 0x02, 0x03, // Hash
				0x00, 0x00, 0x00, 0x00, 0x61, 0x7a, 0x9f, 0x00, // Time (1640995200)
				0x09, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x63, 0x68, 0x61, 0x69, 0x6e, // ChainID ("test-chain")
				0x04, 0x05, 0x06, // AppHash
			},
		},
		// Add more test cases here...
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			svc := &ServiceImpl{} // Replace with your service implementation
			result, err := svc.Bytes(context.Background(), tt.info)
			if err != nil {
				t.Errorf("unexpected error: %v", err)
			}
			if !bytes.Equal(result, tt.expect) {
				t.Errorf("unexpected result:\nexpected: %v\ngot: %v", tt.expect, result)
			}
		})
	}
}

func TestInfo_FromBytes(t *testing.T) {
	tests := []struct {
		name      string
		bytes     []byte
		expected  Info
		expectErr bool
	}{
		{
			name: "Valid bytes",
			bytes: []byte{
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, // Height: 1
				0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, // Hash: [0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08]
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Time: 0
				0x04, 0x00, 0x00, 0x00, // ChainID length: 4
				0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, // ChainID: "chainID"
				0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, // AppHash: [0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10]
			},
			expected: Info{
				Height:  1,
				Hash:    []byte{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08},
				Time:    time.Unix(0, 0),
				ChainID: "chainID",
				AppHash: []byte{0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10},
			},
			expectErr: false,
		},
		{
			name: "Invalid bytes (short length)",
			bytes: []byte{
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, // Height: 1
				0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, // Hash: [0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08]
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Time: 0
				0x04, 0x00, 0x00, 0x00, // ChainID length: 4
				0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, // ChainID: "chainID"
				0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, // AppHash: [0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f]
			},
			expected:  Info{},
			expectErr: true,
		},
		{
			name: "Invalid bytes (missing ChainID)",
			bytes: []byte{
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, // Height: 1
				0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, // Hash: [0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08]
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Time: 0
				0x04, 0x00, 0x00, 0x00, // ChainID length: 4
				0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, // ChainID: "chainID"
			},
			expected:  Info{},
			expectErr: true,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			info := Info{}
			err := info.FromBytes(tt.bytes)

			if tt.expectErr {
				if err == nil {
					t.Errorf("Expected error, but got nil")
				}
			} else {
				if err != nil {
					t.Errorf("Unexpected error: %v", err)
				}
				if info.Height != tt.expected.Height {
					t.Errorf("Unexpected Height. Got %d, expected %d", info.Height, tt.expected.Height)
				}
				if !bytes.Equal(info.Hash, tt.expected.Hash) {
					t.Errorf("Unexpected Hash. Got %v, expected %v", info.Hash, tt.expected.Hash)
				}
				if !info.Time.Equal(tt.expected.Time) {
					t.Errorf("Unexpected Time. Got %v, expected %v", info.Time, tt.expected.Time)
				}
				if info.ChainID != tt.expected.ChainID {
					t.Errorf("Unexpected ChainID. Got %s, expected %s", info.ChainID, tt.expected.ChainID)
				}
				if !bytes.Equal(info.AppHash, tt.expected.AppHash) {
					t.Errorf("Unexpected AppHash. Got %v, expected %v", info.AppHash, tt.expected.AppHash)
				}
			}
		})
	}
}
