// Code generated by MockGen. DO NOT EDIT.
// Source: core/gas/service.go

// Package gas is a generated GoMock package.
package gas

import (
	context "context"
	reflect "reflect"

	gas "cosmossdk.io/core/gas"
	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GasConfig mocks base method.
func (m *MockService) GasConfig(ctx context.Context) gas.GasConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GasConfig", ctx)
	ret0, _ := ret[0].(gas.GasConfig)
	return ret0
}

// GasConfig indicates an expected call of GasConfig.
func (mr *MockServiceMockRecorder) GasConfig(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GasConfig", reflect.TypeOf((*MockService)(nil).GasConfig), ctx)
}

// GasMeter mocks base method.
func (m *MockService) GasMeter(arg0 context.Context) gas.Meter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GasMeter", arg0)
	ret0, _ := ret[0].(gas.Meter)
	return ret0
}

// GasMeter indicates an expected call of GasMeter.
func (mr *MockServiceMockRecorder) GasMeter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GasMeter", reflect.TypeOf((*MockService)(nil).GasMeter), arg0)
}

// MockMeter is a mock of Meter interface.
type MockMeter struct {
	ctrl     *gomock.Controller
	recorder *MockMeterMockRecorder
}

// MockMeterMockRecorder is the mock recorder for MockMeter.
type MockMeterMockRecorder struct {
	mock *MockMeter
}

// NewMockMeter creates a new mock instance.
func NewMockMeter(ctrl *gomock.Controller) *MockMeter {
	mock := &MockMeter{ctrl: ctrl}
	mock.recorder = &MockMeterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeter) EXPECT() *MockMeterMockRecorder {
	return m.recorder
}

// Consume mocks base method.
func (m *MockMeter) Consume(amount gas.Gas, descriptor string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consume", amount, descriptor)
	ret0, _ := ret[0].(error)
	return ret0
}

// Consume indicates an expected call of Consume.
func (mr *MockMeterMockRecorder) Consume(amount, descriptor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockMeter)(nil).Consume), amount, descriptor)
}

// Consumed mocks base method.
func (m *MockMeter) Consumed() gas.Gas {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consumed")
	ret0, _ := ret[0].(gas.Gas)
	return ret0
}

// Consumed indicates an expected call of Consumed.
func (mr *MockMeterMockRecorder) Consumed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consumed", reflect.TypeOf((*MockMeter)(nil).Consumed))
}

// Limit mocks base method.
func (m *MockMeter) Limit() gas.Gas {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Limit")
	ret0, _ := ret[0].(gas.Gas)
	return ret0
}

// Limit indicates an expected call of Limit.
func (mr *MockMeterMockRecorder) Limit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Limit", reflect.TypeOf((*MockMeter)(nil).Limit))
}

// Refund mocks base method.
func (m *MockMeter) Refund(amount gas.Gas, descriptor string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refund", amount, descriptor)
	ret0, _ := ret[0].(error)
	return ret0
}

// Refund indicates an expected call of Refund.
func (mr *MockMeterMockRecorder) Refund(amount, descriptor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refund", reflect.TypeOf((*MockMeter)(nil).Refund), amount, descriptor)
}

// Remaining mocks base method.
func (m *MockMeter) Remaining() gas.Gas {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remaining")
	ret0, _ := ret[0].(gas.Gas)
	return ret0
}

// Remaining indicates an expected call of Remaining.
func (mr *MockMeterMockRecorder) Remaining() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remaining", reflect.TypeOf((*MockMeter)(nil).Remaining))
}
