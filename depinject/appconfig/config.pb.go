// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmos/app/v1/config.proto

package appconfig

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	any "github.com/cosmos/gogoproto/types/any"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Config represents the configuration for a Cosmos SDK ABCI app.
// It is intended that all state machine logic including the version of
// baseapp and tx handlers (and possibly even Tendermint) that an app needs
// can be described in a config object. For compatibility, the framework should
// allow a mixture of declarative and imperative app wiring, however, apps
// that strive for the maximum ease of maintainability should be able to describe
// their state machine with a config object alone.
type Config struct {
	// modules are the module configurations for the app.
	Modules []*ModuleConfig `protobuf:"bytes,1,rep,name=modules,proto3" json:"modules,omitempty"`
	// golang_bindings specifies explicit interface to implementation type bindings which
	// depinject uses to resolve interface inputs to provider functions.  The scope of this
	// field's configuration is global (not module specific).
	GolangBindings []*GolangBinding `protobuf:"bytes,2,rep,name=golang_bindings,json=golangBindings,proto3" json:"golang_bindings,omitempty"`
}

func (m *Config) Reset()         { *m = Config{} }
func (m *Config) String() string { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()    {}
func (*Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c5c7e08cb1a0bd9, []int{0}
}
func (m *Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Config.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Config.Merge(m, src)
}
func (m *Config) XXX_Size() int {
	return m.Size()
}
func (m *Config) XXX_DiscardUnknown() {
	xxx_messageInfo_Config.DiscardUnknown(m)
}

var xxx_messageInfo_Config proto.InternalMessageInfo

func (m *Config) GetModules() []*ModuleConfig {
	if m != nil {
		return m.Modules
	}
	return nil
}

func (m *Config) GetGolangBindings() []*GolangBinding {
	if m != nil {
		return m.GolangBindings
	}
	return nil
}

// ModuleConfig is a module configuration for an app.
type ModuleConfig struct {
	// name is the unique name of the module within the app. It should be a name
	// that persists between different versions of a module so that modules
	// can be smoothly upgraded to new versions.
	//
	// For example, for the module cosmos.bank.module.v1.Module, we may chose
	// to simply name the module "bank" in the app. When we upgrade to
	// cosmos.bank.module.v2.Module, the app-specific name "bank" stays the same
	// and the framework knows that the v2 module should receive all the same state
	// that the v1 module had.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// config is the config object for the module. Module config messages should
	// define a ModuleDescriptor using the cosmos.app.v1alpha1.is_module extension,
	// although this requirement shouldn't be considered stable.
	Config *any.Any `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	// golang_bindings specifies explicit interface to implementation type bindings which
	// depinject uses to resolve interface inputs to provider functions.  The scope of this
	// field's configuration is module specific.
	GolangBindings []*GolangBinding `protobuf:"bytes,3,rep,name=golang_bindings,json=golangBindings,proto3" json:"golang_bindings,omitempty"`
}

func (m *ModuleConfig) Reset()         { *m = ModuleConfig{} }
func (m *ModuleConfig) String() string { return proto.CompactTextString(m) }
func (*ModuleConfig) ProtoMessage()    {}
func (*ModuleConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c5c7e08cb1a0bd9, []int{1}
}
func (m *ModuleConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModuleConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModuleConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModuleConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModuleConfig.Merge(m, src)
}
func (m *ModuleConfig) XXX_Size() int {
	return m.Size()
}
func (m *ModuleConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ModuleConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ModuleConfig proto.InternalMessageInfo

func (m *ModuleConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ModuleConfig) GetConfig() *any.Any {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *ModuleConfig) GetGolangBindings() []*GolangBinding {
	if m != nil {
		return m.GolangBindings
	}
	return nil
}

// GolangBinding is an explicit interface type to implementing type binding for dependency injection.
type GolangBinding struct {
	// interface_type is the interface type which will be bound to a specific implementation type
	InterfaceType string `protobuf:"bytes,1,opt,name=interface_type,json=interfaceType,proto3" json:"interface_type,omitempty"`
	// implementation is the implementing type which will be supplied when an input of type interface is requested
	Implementation string `protobuf:"bytes,2,opt,name=implementation,proto3" json:"implementation,omitempty"`
}

func (m *GolangBinding) Reset()         { *m = GolangBinding{} }
func (m *GolangBinding) String() string { return proto.CompactTextString(m) }
func (*GolangBinding) ProtoMessage()    {}
func (*GolangBinding) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c5c7e08cb1a0bd9, []int{2}
}
func (m *GolangBinding) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GolangBinding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GolangBinding.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GolangBinding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GolangBinding.Merge(m, src)
}
func (m *GolangBinding) XXX_Size() int {
	return m.Size()
}
func (m *GolangBinding) XXX_DiscardUnknown() {
	xxx_messageInfo_GolangBinding.DiscardUnknown(m)
}

var xxx_messageInfo_GolangBinding proto.InternalMessageInfo

func (m *GolangBinding) GetInterfaceType() string {
	if m != nil {
		return m.InterfaceType
	}
	return ""
}

func (m *GolangBinding) GetImplementation() string {
	if m != nil {
		return m.Implementation
	}
	return ""
}

func init() {
	proto.RegisterType((*Config)(nil), "cosmos.app.v1.Config")
	proto.RegisterType((*ModuleConfig)(nil), "cosmos.app.v1.ModuleConfig")
	proto.RegisterType((*GolangBinding)(nil), "cosmos.app.v1.GolangBinding")
}

func init() { proto.RegisterFile("cosmos/app/v1/config.proto", fileDescriptor_9c5c7e08cb1a0bd9) }

var fileDescriptor_9c5c7e08cb1a0bd9 = []byte{
	// 325 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0x31, 0x4b, 0x03, 0x31,
	0x1c, 0xc5, 0x9b, 0x56, 0x2a, 0x4d, 0x6d, 0x85, 0xe0, 0x70, 0x56, 0x39, 0x8e, 0x82, 0xd2, 0x41,
	0x12, 0x5a, 0x71, 0x71, 0xb3, 0x22, 0x4e, 0x2e, 0x87, 0x93, 0x83, 0x25, 0xbd, 0x4b, 0x43, 0xf4,
	0x2e, 0x09, 0x4d, 0x5a, 0xb8, 0x2f, 0xe0, 0xec, 0xe6, 0x57, 0x72, 0xec, 0xe8, 0x28, 0xed, 0x17,
	0x11, 0x13, 0x4f, 0xda, 0xe2, 0xe4, 0x96, 0xfc, 0xdf, 0xef, 0x25, 0xef, 0xf1, 0x87, 0x9d, 0x44,
	0x99, 0x5c, 0x19, 0x42, 0xb5, 0x26, 0xf3, 0x3e, 0x49, 0x94, 0x9c, 0x08, 0x8e, 0xf5, 0x54, 0x59,
	0x85, 0x5a, 0x5e, 0xc3, 0x54, 0x6b, 0x3c, 0xef, 0x77, 0x0e, 0xb9, 0x52, 0x3c, 0x63, 0xc4, 0x89,
	0xe3, 0xd9, 0x84, 0x50, 0x59, 0x78, 0xb2, 0xfb, 0x02, 0x60, 0xfd, 0xda, 0x59, 0xd1, 0x05, 0xdc,
	0xcd, 0x55, 0x3a, 0xcb, 0x98, 0x09, 0x40, 0x54, 0xeb, 0x35, 0x07, 0x47, 0x78, 0xe3, 0x19, 0x7c,
	0xe7, 0x54, 0x4f, 0xc7, 0x25, 0x8b, 0x6e, 0xe0, 0x3e, 0x57, 0x19, 0x95, 0x7c, 0x34, 0x16, 0x32,
	0x15, 0x92, 0x9b, 0xa0, 0xea, 0xec, 0xc7, 0x5b, 0xf6, 0x5b, 0x47, 0x0d, 0x3d, 0x14, 0xb7, 0xf9,
	0xfa, 0xd5, 0x74, 0xdf, 0x00, 0xdc, 0x5b, 0xff, 0x00, 0x21, 0xb8, 0x23, 0x69, 0xce, 0x02, 0x10,
	0x81, 0x5e, 0x23, 0x76, 0x67, 0x74, 0x06, 0xeb, 0xbe, 0x67, 0x50, 0x8d, 0x40, 0xaf, 0x39, 0x38,
	0xc0, 0xbe, 0x19, 0x2e, 0x9b, 0xe1, 0x2b, 0x59, 0xc4, 0x3f, 0xcc, 0x5f, 0xc9, 0x6a, 0xff, 0x48,
	0xf6, 0x08, 0x5b, 0x1b, 0x00, 0x3a, 0x81, 0x6d, 0x21, 0x2d, 0x9b, 0x4e, 0x68, 0xc2, 0x46, 0xb6,
	0xd0, 0x65, 0xc6, 0xd6, 0xef, 0xf4, 0xbe, 0xd0, 0x0c, 0x9d, 0xc2, 0xb6, 0xc8, 0x75, 0xc6, 0x72,
	0x26, 0x2d, 0xb5, 0x42, 0x49, 0x17, 0xba, 0x11, 0x6f, 0x4d, 0x87, 0x97, 0xef, 0xcb, 0x10, 0x2c,
	0x96, 0x21, 0xf8, 0x5c, 0x86, 0xe0, 0x75, 0x15, 0x56, 0x16, 0xab, 0xb0, 0xf2, 0xb1, 0x0a, 0x2b,
	0x0f, 0x91, 0x8f, 0x69, 0xd2, 0x67, 0x2c, 0x14, 0x49, 0x99, 0x16, 0xf2, 0x89, 0x25, 0xf6, 0x7b,
	0xe5, 0xbe, 0xe2, 0xb8, 0xee, 0x8a, 0x9f, 0x7f, 0x05, 0x00, 0x00, 0xff, 0xff, 0x8e, 0x47, 0xed,
	0x78, 0x0d, 0x02, 0x00, 0x00,
}

func (m *Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Config) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Config) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GolangBindings) > 0 {
		for iNdEx := len(m.GolangBindings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GolangBindings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintConfig(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Modules) > 0 {
		for iNdEx := len(m.Modules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Modules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintConfig(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ModuleConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModuleConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModuleConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GolangBindings) > 0 {
		for iNdEx := len(m.GolangBindings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GolangBindings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintConfig(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GolangBinding) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GolangBinding) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GolangBinding) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Implementation) > 0 {
		i -= len(m.Implementation)
		copy(dAtA[i:], m.Implementation)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.Implementation)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.InterfaceType) > 0 {
		i -= len(m.InterfaceType)
		copy(dAtA[i:], m.InterfaceType)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.InterfaceType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintConfig(dAtA []byte, offset int, v uint64) int {
	offset -= sovConfig(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Modules) > 0 {
		for _, e := range m.Modules {
			l = e.Size()
			n += 1 + l + sovConfig(uint64(l))
		}
	}
	if len(m.GolangBindings) > 0 {
		for _, e := range m.GolangBindings {
			l = e.Size()
			n += 1 + l + sovConfig(uint64(l))
		}
	}
	return n
}

func (m *ModuleConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	if len(m.GolangBindings) > 0 {
		for _, e := range m.GolangBindings {
			l = e.Size()
			n += 1 + l + sovConfig(uint64(l))
		}
	}
	return n
}

func (m *GolangBinding) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InterfaceType)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	l = len(m.Implementation)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	return n
}

func sovConfig(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozConfig(x uint64) (n int) {
	return sovConfig(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Modules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Modules = append(m.Modules, &ModuleConfig{})
			if err := m.Modules[len(m.Modules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GolangBindings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GolangBindings = append(m.GolangBindings, &GolangBinding{})
			if err := m.GolangBindings[len(m.GolangBindings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModuleConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModuleConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModuleConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &any.Any{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GolangBindings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GolangBindings = append(m.GolangBindings, &GolangBinding{})
			if err := m.GolangBindings[len(m.GolangBindings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GolangBinding) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GolangBinding: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GolangBinding: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterfaceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InterfaceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Implementation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Implementation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConfig(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthConfig
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupConfig
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthConfig
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthConfig        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConfig          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupConfig = fmt.Errorf("proto: unexpected end of group")
)
