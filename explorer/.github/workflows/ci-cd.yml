name: 🚀 Tajeor Explorer CI/CD

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/tajeor-explorer

jobs:
  # ==========================================
  # Code Quality & Security Checks
  # ==========================================
  quality:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: explorer/package-lock.json

      - name: 📦 Install dependencies
        working-directory: ./explorer
        run: npm ci

      - name: 🔍 Lint code
        working-directory: ./explorer
        run: npm run lint

      - name: 🧪 Run tests
        working-directory: ./explorer
        run: npm test

      - name: 🔒 Security audit
        working-directory: ./explorer
        run: npm audit --audit-level moderate

  # ==========================================
  # Build & Push Docker Images
  # ==========================================
  build:
    name: 🐳 Build & Push
    runs-on: ubuntu-latest
    needs: quality
    permissions:
      contents: read
      packages: write
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🔨 Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./explorer
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🏷️ Output image
        id: image
        run: |
          echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}" >> $GITHUB_OUTPUT

  # ==========================================
  # Security Scanning
  # ==========================================
  security:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    needs: build
    permissions:
      security-events: write
    steps:
      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs.image }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📤 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # ==========================================
  # Deploy to Staging
  # ==========================================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging-explorer.tajeor.network
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup deployment
        run: |
          echo "DOCKER_IMAGE=${{ needs.build.outputs.image }}" >> $GITHUB_ENV
          echo "ENVIRONMENT=staging" >> $GITHUB_ENV

      - name: 🚀 Deploy to staging server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          port: ${{ secrets.STAGING_PORT }}
          script: |
            cd /opt/tajeor-explorer
            git pull origin develop
            export DOCKER_IMAGE=${{ needs.build.outputs.image }}
            export ENVIRONMENT=staging
            ./scripts/deploy.sh update

  # ==========================================
  # Deploy to Production
  # ==========================================
  deploy-production:
    name: 🏭 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security]
    if: startsWith(github.ref, 'refs/tags/v')
    environment:
      name: production
      url: https://explorer.tajeor.network
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup deployment
        run: |
          echo "DOCKER_IMAGE=${{ needs.build.outputs.image }}" >> $GITHUB_ENV
          echo "ENVIRONMENT=production" >> $GITHUB_ENV

      - name: 🚀 Deploy to production server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: ${{ secrets.PRODUCTION_PORT }}
          script: |
            cd /opt/tajeor-explorer
            git pull origin main
            export DOCKER_IMAGE=${{ needs.build.outputs.image }}
            export ENVIRONMENT=production
            ./scripts/deploy.sh update

      - name: 🔔 Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()

  # ==========================================
  # Create GitHub Release
  # ==========================================
  release:
    name: 📦 Create Release
    runs-on: ubuntu-latest
    needs: deploy-production
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📝 Generate release notes
        id: changelog
        uses: mikepenz/release-changelog-builder-action@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📦 Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          body: ${{ steps.changelog.outputs.changelog }}
          makeLatest: true
          generateReleaseNotes: true 