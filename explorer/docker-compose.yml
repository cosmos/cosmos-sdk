version: "3.8"

services:
  # Tajeor Blockchain Explorer API
  tajeor-explorer:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: tajeor-explorer
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3000
      - BLOCKCHAIN_NODE_HOME=/app/blockchain-data
      - CORS_ORIGIN=https://explorer.tajeor.network
      - API_RATE_LIMIT=100
      - LOG_LEVEL=info
    volumes:
      - blockchain-data:/app/blockchain-data:ro
      - ./logs:/app/logs
    networks:
      - tajeor-network
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database for historical data
  postgres:
    image: postgres:15-alpine
    container_name: tajeor-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: tajeor_explorer
      POSTGRES_USER: tajeor
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - tajeor-network
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tajeor"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: tajeor-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    networks:
      - tajeor-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Nginx Reverse Proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: tajeor-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites-enabled:/etc/nginx/sites-enabled:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./static:/var/www/html:ro
      - nginx-logs:/var/log/nginx
    networks:
      - tajeor-network
    depends_on:
      - tajeor-explorer
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: tajeor-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - tajeor-network
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=30d"
      - "--web.enable-lifecycle"

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: tajeor-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - tajeor-network
    depends_on:
      - prometheus

  # Elasticsearch for logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: tajeor-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - tajeor-network
    ports:
      - "9200:9200"

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: tajeor-kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - tajeor-network
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch

  # Logstash for log processing
  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: tajeor-logstash
    restart: unless-stopped
    volumes:
      - ./logging/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
      - ./logs:/app/logs:ro
    networks:
      - tajeor-network
    depends_on:
      - elasticsearch

  # Backup service
  backup:
    image: postgres:15-alpine
    container_name: tajeor-backup
    restart: "no"
    environment:
      POSTGRES_DB: tajeor_explorer
      POSTGRES_USER: tajeor
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    networks:
      - tajeor-network
    depends_on:
      - postgres
    entrypoint: ["/backup.sh"]

networks:
  tajeor-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  blockchain-data:
    driver: local
    driver_opts:
      type: bind
      o: bind
      device: ${BLOCKCHAIN_DATA_PATH:-/d/Private Blockchain/cosmos-sdk/tajeor/.tajeor}
  postgres-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  elasticsearch-data:
    driver: local
  nginx-logs:
    driver: local
