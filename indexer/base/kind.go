package indexerbase

// Kind represents the basic type of a field in an object.
// Each kind defines the types of go values which should be accepted
// by listeners and generated by decoders when providing entity updates.
type Kind int

const (
	// InvalidKind indicates that an invalid type.
	InvalidKind Kind = iota

	// StringKind is a string type and values of this type must be of the go type string
	// or implement fmt.Stringer().
	StringKind

	// BytesKind is a bytes type and values of this type must be of the go type []byte.
	BytesKind

	// Int8Kind is an int8 type and values of this type must be of the go type int8.
	Int8Kind

	// Uint8Kind is a uint8 type and values of this type must be of the go type uint8.
	Uint8Kind

	// Int16Kind is an int16 type and values of this type must be of the go type int16.
	Int16Kind

	// Uint16Kind is a uint16 type and values of this type must be of the go type uint16.
	Uint16Kind

	// Int32Kind is an int32 type and values of this type must be of the go type int32.
	Int32Kind

	// Uint32Kind is a uint32 type and values of this type must be of the go type uint32.
	Uint32Kind

	// Int64Kind is an int64 type and values of this type must be of the go type int64.
	Int64Kind

	// Uint64Kind is a uint64 type and values of this type must be of the go type uint64.
	Uint64Kind

	// IntegerKind represents an arbitrary precision integer number. Values of this type must
	// be of the go type int64, string or a type that implements fmt.Stringer with the resulted string
	// formatted as an integer number.
	IntegerKind

	// DecimalKind represents an arbitrary precision decimal or integer number. Values of this type
	// must be of the go type string or a type that implements fmt.Stringer with the resulting string
	// formatted as decimal numbers with an optional fractional part. Exponential E-notation
	// is supported but NaN and Infinity are not.
	DecimalKind

	// BoolKind is a boolean type and values of this type must be of the go type bool.
	BoolKind

	// TimeKind is a time type and values of this type must be of the go type time.Time.
	TimeKind

	// DurationKind is a duration type and values of this type must be of the go type time.Duration.
	DurationKind

	// Float32Kind is a float32 type and values of this type must be of the go type float32.
	Float32Kind

	// Float64Kind is a float64 type and values of this type must be of the go type float64.
	Float64Kind

	// Bech32AddressKind is a bech32 address type and values of this type must be of the go type string or []byte
	// or a type which implements fmt.Stringer. Fields of this type are expected to set the AddressPrefix field
	// in the field definition to the bech32 address prefix.
	Bech32AddressKind

	// EnumKind is an enum type and values of this type must be of the go type string or implement fmt.Stringer.
	// Fields of this type are expected to set the EnumDefinition field in the field definition to the enum
	// definition.
	EnumKind

	// JSONKind is a JSON type and values of this type can either be of go type json.RawMessage
	// or any type that can be marshaled to JSON using json.Marshal.
	JSONKind
)
