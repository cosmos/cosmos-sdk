// Code generated by protoc-gen-go-cosmos-orm. DO NOT EDIT.

package bankexample

import (
	context "context"
	ormdb "github.com/cosmos/cosmos-sdk/orm/model/ormdb"
	ormlist "github.com/cosmos/cosmos-sdk/orm/model/ormlist"
	ormtable "github.com/cosmos/cosmos-sdk/orm/model/ormtable"
	ormerrors "github.com/cosmos/cosmos-sdk/orm/types/ormerrors"
)

type BalanceStore interface {
	Insert(ctx context.Context, balance *Balance) error
	Update(ctx context.Context, balance *Balance) error
	Save(ctx context.Context, balance *Balance) error
	Delete(ctx context.Context, balance *Balance) error
	Has(ctx context.Context, address string, denom string) (found bool, err error)
	Get(ctx context.Context, address string, denom string) (*Balance, error)
	List(ctx context.Context, prefixKey BalanceIndexKey, opts ...ormlist.Option) (BalanceIterator, error)
	ListRange(ctx context.Context, from, to BalanceIndexKey, opts ...ormlist.Option) (BalanceIterator, error)
}

type BalanceIterator struct {
	ormtable.Iterator
}

func (i BalanceIterator) Value() (*Balance, error) {
	var balance Balance
	err := i.UnmarshalMessage(&balance)
	return &balance, err
}

type BalanceIndexKey interface {
	id() uint32
	values() []interface{}
	balanceIndexKey()
}

type BalanceAddressDenomIndexKey struct {
	vs []interface{}
}

func (x BalanceAddressDenomIndexKey) id() uint32            { return 1 /* primary key */ }
func (x BalanceAddressDenomIndexKey) values() []interface{} { return x.vs }
func (x BalanceAddressDenomIndexKey) balanceIndexKey()      {}

var _ BalanceIndexKey = BalanceAddressDenomIndexKey{}

func (x BalanceAddressDenomIndexKey) WithAddress(address string) BalanceAddressDenomIndexKey {
	x.vs = []interface{}{address}
	return x
}
func (x BalanceAddressDenomIndexKey) WithAddressDenom(address string, denom string) BalanceAddressDenomIndexKey {
	x.vs = []interface{}{address, denom}
	return x
}

type BalanceDenomAddressIndexKey struct {
	vs []interface{}
}

func (x BalanceDenomAddressIndexKey) id() uint32            { return 1 /* primary key */ }
func (x BalanceDenomAddressIndexKey) values() []interface{} { return x.vs }
func (x BalanceDenomAddressIndexKey) balanceIndexKey()      {}

var _ BalanceIndexKey = BalanceDenomAddressIndexKey{}

func (x BalanceDenomAddressIndexKey) WithDenom(denom string) BalanceDenomAddressIndexKey {
	x.vs = []interface{}{denom}
	return x
}
func (x BalanceDenomAddressIndexKey) WithDenomAddress(denom string, address string) BalanceDenomAddressIndexKey {
	x.vs = []interface{}{denom, address}
	return x
}

type BalanceAmountAddressDenomIndexKey struct {
	vs []interface{}
}

func (x BalanceAmountAddressDenomIndexKey) id() uint32            { return 1 /* primary key */ }
func (x BalanceAmountAddressDenomIndexKey) values() []interface{} { return x.vs }
func (x BalanceAmountAddressDenomIndexKey) balanceIndexKey()      {}

var _ BalanceIndexKey = BalanceAmountAddressDenomIndexKey{}

func (x BalanceAmountAddressDenomIndexKey) WithAmount(amount uint64) BalanceAmountAddressDenomIndexKey {
	x.vs = []interface{}{amount}
	return x
}
func (x BalanceAmountAddressDenomIndexKey) WithAddress(address string) BalanceAmountAddressDenomIndexKey {
	x.vs = []interface{}{address}
	return x
}
func (x BalanceAmountAddressDenomIndexKey) WithAmountAddressDenom(amount uint64, address string, denom string) BalanceAmountAddressDenomIndexKey {
	x.vs = []interface{}{amount, address, denom}
	return x
}

type balanceStore struct {
	table ormtable.Table
}

func (x balanceStore) Insert(ctx context.Context, balance *Balance) error {
	return x.table.Insert(ctx, balance)
}
func (x balanceStore) Update(ctx context.Context, balance *Balance) error {
	return x.table.Update(ctx, balance)
}
func (x balanceStore) Save(ctx context.Context, balance *Balance) error {
	return x.table.Save(ctx, balance)
}
func (x balanceStore) Delete(ctx context.Context, balance *Balance) error {
	return x.table.Delete(ctx, balance)
}
func (x balanceStore) Has(ctx context.Context, address string, denom string) (found bool, err error) {
	return x.table.PrimaryKey().Has(ctx, address, denom)
}
func (x balanceStore) Get(ctx context.Context, address string, denom string) (*Balance, error) {
	var balance Balance
	found, err := x.table.PrimaryKey().Get(ctx, &balance, address, denom)
	if !found {
		return nil, err
	}
	return &balance, err
}
func (x balanceStore) List(ctx context.Context, prefixKey BalanceIndexKey, opts ...ormlist.Option) (BalanceIterator, error) {
	opts = append(opts, ormlist.Prefix(prefixKey.values()))
	it, err := x.table.GetIndexByID(prefixKey.id()).Iterator(ctx, opts...)
	return BalanceIterator{it}, err
}
func (x balanceStore) ListRange(ctx context.Context, from, to BalanceIndexKey, opts ...ormlist.Option) (BalanceIterator, error) {
	opts = append(opts, ormlist.Start(from.values()), ormlist.End(to))
	it, err := x.table.GetIndexByID(from.id()).Iterator(ctx, opts...)
	return BalanceIterator{it}, err
}

var _ BalanceStore = balanceStore{}

func NewBalanceStore(db ormdb.ModuleDB) (BalanceStore, error) {
	table := db.GetTable(&Balance{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&Balance{}).ProtoReflect().Descriptor().FullName()))
	}
	return balanceStore{table}, nil
}

type SupplyStore interface {
	Insert(ctx context.Context, supply *Supply) error
	Update(ctx context.Context, supply *Supply) error
	Save(ctx context.Context, supply *Supply) error
	Delete(ctx context.Context, supply *Supply) error
	Has(ctx context.Context, denom string) (found bool, err error)
	Get(ctx context.Context, denom string) (*Supply, error)
	List(ctx context.Context, prefixKey SupplyIndexKey, opts ...ormlist.Option) (SupplyIterator, error)
	ListRange(ctx context.Context, from, to SupplyIndexKey, opts ...ormlist.Option) (SupplyIterator, error)
}

type SupplyIterator struct {
	ormtable.Iterator
}

func (i SupplyIterator) Value() (*Supply, error) {
	var supply Supply
	err := i.UnmarshalMessage(&supply)
	return &supply, err
}

type SupplyIndexKey interface {
	id() uint32
	values() []interface{}
	supplyIndexKey()
}

type SupplyDenomIndexKey struct {
	vs []interface{}
}

func (x SupplyDenomIndexKey) id() uint32            { return 2 /* primary key */ }
func (x SupplyDenomIndexKey) values() []interface{} { return x.vs }
func (x SupplyDenomIndexKey) supplyIndexKey()       {}

var _ SupplyIndexKey = SupplyDenomIndexKey{}

func (x SupplyDenomIndexKey) WithDenom(denom string) SupplyDenomIndexKey {
	x.vs = []interface{}{denom}
	return x
}

type supplyStore struct {
	table ormtable.Table
}

func (x supplyStore) Insert(ctx context.Context, supply *Supply) error {
	return x.table.Insert(ctx, supply)
}
func (x supplyStore) Update(ctx context.Context, supply *Supply) error {
	return x.table.Update(ctx, supply)
}
func (x supplyStore) Save(ctx context.Context, supply *Supply) error {
	return x.table.Save(ctx, supply)
}
func (x supplyStore) Delete(ctx context.Context, supply *Supply) error {
	return x.table.Delete(ctx, supply)
}
func (x supplyStore) Has(ctx context.Context, denom string) (found bool, err error) {
	return x.table.PrimaryKey().Has(ctx, denom)
}
func (x supplyStore) Get(ctx context.Context, denom string) (*Supply, error) {
	var supply Supply
	found, err := x.table.PrimaryKey().Get(ctx, &supply, denom)
	if !found {
		return nil, err
	}
	return &supply, err
}
func (x supplyStore) List(ctx context.Context, prefixKey SupplyIndexKey, opts ...ormlist.Option) (SupplyIterator, error) {
	opts = append(opts, ormlist.Prefix(prefixKey.values()))
	it, err := x.table.GetIndexByID(prefixKey.id()).Iterator(ctx, opts...)
	return SupplyIterator{it}, err
}
func (x supplyStore) ListRange(ctx context.Context, from, to SupplyIndexKey, opts ...ormlist.Option) (SupplyIterator, error) {
	opts = append(opts, ormlist.Start(from.values()), ormlist.End(to))
	it, err := x.table.GetIndexByID(from.id()).Iterator(ctx, opts...)
	return SupplyIterator{it}, err
}

var _ SupplyStore = supplyStore{}

func NewSupplyStore(db ormdb.ModuleDB) (SupplyStore, error) {
	table := db.GetTable(&Supply{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&Supply{}).ProtoReflect().Descriptor().FullName()))
	}
	return supplyStore{table}, nil
}

// singleton store
type ExampleStore interface {
	Get(ctx context.Context) (*Example, error)
	Save(ctx context.Context, example *Example) error
}

type exampleStore struct {
	table ormtable.Table
}

func (x exampleStore) Get(ctx context.Context) (*Example, error) {
	var example Example
	found, err := x.table.Get(ctx, &example)
	if !found {
		return nil, err
	}
	return &example, err
}

func (x exampleStore) Save(ctx context.Context, example *Example) error {
	return x.table.Save(ctx, example)
}

func NewExampleStore(db ormdb.ModuleDB) (ExampleStore, error) {
	table := db.GetTable(&Example{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&Example{}).ProtoReflect().Descriptor().FullName()))
	}
	return &exampleStore{table}, nil
}

type StateStore interface {
	Balance() BalanceStore
	Supply() SupplyStore
	Example() ExampleStore
}

type stateStore struct {
	balance BalanceStore
	supply  SupplyStore
	example ExampleStore
}

func (x stateStore) Balance() BalanceStore {
	return x.balance
}
func (x stateStore) Supply() SupplyStore {
	return x.supply
}
func (x stateStore) Example() ExampleStore {
	return x.example
}

var _ StateStore = stateStore{}

func NewStateStore(db ormdb.ModuleDB) (StateStore, error) {
	balanceStore, err := NewBalanceStore(db)
	if err != nil {
		return nil, err
	}

	supplyStore, err := NewSupplyStore(db)
	if err != nil {
		return nil, err
	}

	exampleStore, err := NewExampleStore(db)
	if err != nil {
		return nil, err
	}

	return stateStore{
		balanceStore,
		supplyStore,
		exampleStore,
	}, nil
}
