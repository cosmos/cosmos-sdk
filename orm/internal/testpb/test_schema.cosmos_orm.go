// Code generated by protoc-gen-go-cosmos-orm. DO NOT EDIT.

package testpb

import (
	context "context"
	ormdb "github.com/cosmos/cosmos-sdk/orm/model/ormdb"
	ormlist "github.com/cosmos/cosmos-sdk/orm/model/ormlist"
	ormtable "github.com/cosmos/cosmos-sdk/orm/model/ormtable"
	ormerrors "github.com/cosmos/cosmos-sdk/orm/types/ormerrors"
)

type ExampleTableStore interface {
	Insert(ctx context.Context, exampleTable *ExampleTable) error
	Update(ctx context.Context, exampleTable *ExampleTable) error
	Save(ctx context.Context, exampleTable *ExampleTable) error
	Delete(ctx context.Context, exampleTable *ExampleTable) error
	Has(ctx context.Context, u32 uint32, i64 int64, str string) (found bool, err error)
	Get(ctx context.Context, u32 uint32, i64 int64, str string) (*ExampleTable, error)
	List(ctx context.Context, prefixKey ExampleTableIndexKey, opts ...ormlist.Option) (ExampleTableIterator, error)
	ListRange(ctx context.Context, from, to ExampleTableIndexKey, opts ...ormlist.Option) (ExampleTableIterator, error)
}

type ExampleTableIterator struct {
	ormtable.Iterator
}

func (i ExampleTableIterator) Value() (*ExampleTable, error) {
	var exampleTable ExampleTable
	err := i.UnmarshalMessage(&exampleTable)
	return &exampleTable, err
}

type ExampleTableIndexKey interface {
	id() uint32
	values() []interface{}
	exampleTableIndexKey()
}

// primary key starting index..
type ExampleTableU32I64StrIndexKey struct {
	vs []interface{}
}

func (x ExampleTableU32I64StrIndexKey) id() uint32            { return 1 }
func (x ExampleTableU32I64StrIndexKey) values() []interface{} { return x.vs }
func (x ExampleTableU32I64StrIndexKey) exampleTableIndexKey() {}

func (x ExampleTableU32I64StrIndexKey) WithU32(u32 uint32) ExampleTableU32I64StrIndexKey {
	x.vs = []interface{}{u32}
	return x
}

func (x ExampleTableU32I64StrIndexKey) WithU32I64(u32 uint32, i64 int64) ExampleTableU32I64StrIndexKey {
	x.vs = []interface{}{u32, i64}
	return x
}

func (x ExampleTableU32I64StrIndexKey) WithU32I64Str(u32 uint32, i64 int64, str string) ExampleTableU32I64StrIndexKey {
	x.vs = []interface{}{u32, i64, str}
	return x
}

type ExampleTableU64StrIndexKey struct {
	vs []interface{}
}

func (x ExampleTableU64StrIndexKey) id() uint32            { return 1 }
func (x ExampleTableU64StrIndexKey) values() []interface{} { return x.vs }
func (x ExampleTableU64StrIndexKey) exampleTableIndexKey() {}

func (x ExampleTableU64StrIndexKey) WithU64(u64 uint64) ExampleTableU64StrIndexKey {
	x.vs = []interface{}{u64}
	return x
}

func (x ExampleTableU64StrIndexKey) WithU64Str(u64 uint64, str string) ExampleTableU64StrIndexKey {
	x.vs = []interface{}{u64, str}
	return x
}

type ExampleTableStrU32IndexKey struct {
	vs []interface{}
}

func (x ExampleTableStrU32IndexKey) id() uint32            { return 2 }
func (x ExampleTableStrU32IndexKey) values() []interface{} { return x.vs }
func (x ExampleTableStrU32IndexKey) exampleTableIndexKey() {}

func (x ExampleTableStrU32IndexKey) WithStr(str string) ExampleTableStrU32IndexKey {
	x.vs = []interface{}{str}
	return x
}

func (x ExampleTableStrU32IndexKey) WithStrU32(str string, u32 uint32) ExampleTableStrU32IndexKey {
	x.vs = []interface{}{str, u32}
	return x
}

type ExampleTableBzStrIndexKey struct {
	vs []interface{}
}

func (x ExampleTableBzStrIndexKey) id() uint32            { return 3 }
func (x ExampleTableBzStrIndexKey) values() []interface{} { return x.vs }
func (x ExampleTableBzStrIndexKey) exampleTableIndexKey() {}

func (x ExampleTableBzStrIndexKey) WithBz(bz []byte) ExampleTableBzStrIndexKey {
	x.vs = []interface{}{bz}
	return x
}

func (x ExampleTableBzStrIndexKey) WithBzStr(bz []byte, str string) ExampleTableBzStrIndexKey {
	x.vs = []interface{}{bz, str}
	return x
}

type exampleTableStore struct {
	table ormtable.Table
}

func (x exampleTableStore) Insert(ctx context.Context, exampleTable *ExampleTable) error {
	return x.table.Insert(ctx, exampleTable)
}
func (x exampleTableStore) Update(ctx context.Context, exampleTable *ExampleTable) error {
	return x.table.Update(ctx, exampleTable)
}
func (x exampleTableStore) Save(ctx context.Context, exampleTable *ExampleTable) error {
	return x.table.Save(ctx, exampleTable)
}
func (x exampleTableStore) Delete(ctx context.Context, exampleTable *ExampleTable) error {
	return x.table.Delete(ctx, exampleTable)
}
func (x exampleTableStore) Has(ctx context.Context, u32 uint32, i64 int64, str string) (found bool, err error) {
	return x.table.PrimaryKey().Has(ctx, u32, i64, str)
}
func (x exampleTableStore) Get(ctx context.Context, u32 uint32, i64 int64, str string) (*ExampleTable, error) {
	var exampleTable ExampleTable
	found, err := x.table.PrimaryKey().Get(ctx, &exampleTable, u32, i64, str)
	if !found {
		return nil, err
	}
	return &exampleTable, err
}
func (x exampleTableStore) List(ctx context.Context, prefixKey ExampleTableIndexKey, opts ...ormlist.Option) (ExampleTableIterator, error) {
	opts = append(opts, ormlist.Prefix(prefixKey.values()))
	it, err := x.table.GetIndexByID(prefixKey.id()).Iterator(ctx, opts...)
	return ExampleTableIterator{it}, err
}
func (x exampleTableStore) ListRange(ctx context.Context, from, to ExampleTableIndexKey, opts ...ormlist.Option) (ExampleTableIterator, error) {
	opts = append(opts, ormlist.Start(from.values()), ormlist.End(to))
	it, err := x.table.GetIndexByID(from.id()).Iterator(ctx, opts...)
	return ExampleTableIterator{it}, err
}

var _ ExampleTableStore = exampleTableStore{}

func NewExampleTableStore(db ormdb.ModuleDB) (ExampleTableStore, error) {
	table := db.GetTable(&ExampleTable{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&ExampleTable{}).ProtoReflect().Descriptor().FullName()))
	}
	return exampleTableStore{table}, nil
}

type ExampleAutoIncrementTableStore interface {
	Insert(ctx context.Context, exampleAutoIncrementTable *ExampleAutoIncrementTable) error
	Update(ctx context.Context, exampleAutoIncrementTable *ExampleAutoIncrementTable) error
	Save(ctx context.Context, exampleAutoIncrementTable *ExampleAutoIncrementTable) error
	Delete(ctx context.Context, exampleAutoIncrementTable *ExampleAutoIncrementTable) error
	Has(ctx context.Context, id uint64) (found bool, err error)
	Get(ctx context.Context, id uint64) (*ExampleAutoIncrementTable, error)
	List(ctx context.Context, prefixKey ExampleAutoIncrementTableIndexKey, opts ...ormlist.Option) (ExampleAutoIncrementTableIterator, error)
	ListRange(ctx context.Context, from, to ExampleAutoIncrementTableIndexKey, opts ...ormlist.Option) (ExampleAutoIncrementTableIterator, error)
}

type ExampleAutoIncrementTableIterator struct {
	ormtable.Iterator
}

func (i ExampleAutoIncrementTableIterator) Value() (*ExampleAutoIncrementTable, error) {
	var exampleAutoIncrementTable ExampleAutoIncrementTable
	err := i.UnmarshalMessage(&exampleAutoIncrementTable)
	return &exampleAutoIncrementTable, err
}

type ExampleAutoIncrementTableIndexKey interface {
	id() uint32
	values() []interface{}
	exampleAutoIncrementTableIndexKey()
}

// primary key starting index..
type ExampleAutoIncrementTableIdIndexKey struct {
	vs []interface{}
}

func (x ExampleAutoIncrementTableIdIndexKey) id() uint32                         { return 3 }
func (x ExampleAutoIncrementTableIdIndexKey) values() []interface{}              { return x.vs }
func (x ExampleAutoIncrementTableIdIndexKey) exampleAutoIncrementTableIndexKey() {}

func (x ExampleAutoIncrementTableIdIndexKey) WithId(id uint64) ExampleAutoIncrementTableIdIndexKey {
	x.vs = []interface{}{id}
	return x
}

type ExampleAutoIncrementTableXIndexKey struct {
	vs []interface{}
}

func (x ExampleAutoIncrementTableXIndexKey) id() uint32                         { return 1 }
func (x ExampleAutoIncrementTableXIndexKey) values() []interface{}              { return x.vs }
func (x ExampleAutoIncrementTableXIndexKey) exampleAutoIncrementTableIndexKey() {}

func (x ExampleAutoIncrementTableXIndexKey) WithX(x string) ExampleAutoIncrementTableXIndexKey {
	x.vs = []interface{}{x}
	return x
}

type exampleAutoIncrementTableStore struct {
	table ormtable.Table
}

func (x exampleAutoIncrementTableStore) Insert(ctx context.Context, exampleAutoIncrementTable *ExampleAutoIncrementTable) error {
	return x.table.Insert(ctx, exampleAutoIncrementTable)
}
func (x exampleAutoIncrementTableStore) Update(ctx context.Context, exampleAutoIncrementTable *ExampleAutoIncrementTable) error {
	return x.table.Update(ctx, exampleAutoIncrementTable)
}
func (x exampleAutoIncrementTableStore) Save(ctx context.Context, exampleAutoIncrementTable *ExampleAutoIncrementTable) error {
	return x.table.Save(ctx, exampleAutoIncrementTable)
}
func (x exampleAutoIncrementTableStore) Delete(ctx context.Context, exampleAutoIncrementTable *ExampleAutoIncrementTable) error {
	return x.table.Delete(ctx, exampleAutoIncrementTable)
}
func (x exampleAutoIncrementTableStore) Has(ctx context.Context, id uint64) (found bool, err error) {
	return x.table.PrimaryKey().Has(ctx, id)
}
func (x exampleAutoIncrementTableStore) Get(ctx context.Context, id uint64) (*ExampleAutoIncrementTable, error) {
	var exampleAutoIncrementTable ExampleAutoIncrementTable
	found, err := x.table.PrimaryKey().Get(ctx, &exampleAutoIncrementTable, id)
	if !found {
		return nil, err
	}
	return &exampleAutoIncrementTable, err
}
func (x exampleAutoIncrementTableStore) List(ctx context.Context, prefixKey ExampleAutoIncrementTableIndexKey, opts ...ormlist.Option) (ExampleAutoIncrementTableIterator, error) {
	opts = append(opts, ormlist.Prefix(prefixKey.values()))
	it, err := x.table.GetIndexByID(prefixKey.id()).Iterator(ctx, opts...)
	return ExampleAutoIncrementTableIterator{it}, err
}
func (x exampleAutoIncrementTableStore) ListRange(ctx context.Context, from, to ExampleAutoIncrementTableIndexKey, opts ...ormlist.Option) (ExampleAutoIncrementTableIterator, error) {
	opts = append(opts, ormlist.Start(from.values()), ormlist.End(to))
	it, err := x.table.GetIndexByID(from.id()).Iterator(ctx, opts...)
	return ExampleAutoIncrementTableIterator{it}, err
}

var _ ExampleAutoIncrementTableStore = exampleAutoIncrementTableStore{}

func NewExampleAutoIncrementTableStore(db ormdb.ModuleDB) (ExampleAutoIncrementTableStore, error) {
	table := db.GetTable(&ExampleAutoIncrementTable{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&ExampleAutoIncrementTable{}).ProtoReflect().Descriptor().FullName()))
	}
	return exampleAutoIncrementTableStore{table}, nil
}

// singleton store
type ExampleSingletonStore interface {
	Get(ctx context.Context) (*ExampleSingleton, error)
	Save(ctx context.Context, exampleSingleton *ExampleSingleton) error
}

type exampleSingletonStore struct {
	table ormtable.Table
}

var _ ExampleSingletonStore = exampleSingletonStore{}

func (x exampleSingletonStore) Get(ctx context.Context) (*ExampleSingleton, error) {
	var exampleSingleton ExampleSingleton
	found, err := x.table.Get(ctx, &exampleSingleton)
	if !found {
		return nil, err
	}
	return &exampleSingleton, err
}

func (x exampleSingletonStore) Save(ctx context.Context, exampleSingleton *ExampleSingleton) error {
	return x.table.Save(ctx, exampleSingleton)
}

func NewExampleSingletonStore(db ormdb.ModuleDB) (ExampleSingletonStore, error) {
	table := db.GetTable(&ExampleSingleton{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&ExampleSingleton{}).ProtoReflect().Descriptor().FullName()))
	}
	return &exampleSingletonStore{table}, nil
}

type TestSchemaStore interface {
	ExampleTable() ExampleTableStore
	ExampleAutoIncrementTable() ExampleAutoIncrementTableStore
	ExampleSingleton() ExampleSingletonStore
}

type testSchemaStore struct {
	exampleTable              ExampleTableStore
	exampleAutoIncrementTable ExampleAutoIncrementTableStore
	exampleSingleton          ExampleSingletonStore
}

func (x testSchemaStore) ExampleTable() ExampleTableStore {
	return x.exampleTable
}
func (x testSchemaStore) ExampleAutoIncrementTable() ExampleAutoIncrementTableStore {
	return x.exampleAutoIncrementTable
}
func (x testSchemaStore) ExampleSingleton() ExampleSingletonStore {
	return x.exampleSingleton
}

var _ TestSchemaStore = testSchemaStore{}

func NewTestSchemaStore(db ormdb.ModuleDB) (TestSchemaStore, error) {
	exampleTableStore, err := NewExampleTableStore(db)
	if err != nil {
		return nil, err
	}

	exampleAutoIncrementTableStore, err := NewExampleAutoIncrementTableStore(db)
	if err != nil {
		return nil, err
	}

	exampleSingletonStore, err := NewExampleSingletonStore(db)
	if err != nil {
		return nil, err
	}

	return testSchemaStore{
		exampleTableStore,
		exampleAutoIncrementTableStore,
		exampleSingletonStore,
	}, nil
}
