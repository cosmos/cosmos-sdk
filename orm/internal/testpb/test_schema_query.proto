// Code generated by protoc-gen-go-cosmos-orm-proto. DO NOT EDIT.
syntax = "proto3";
package testpb;

import "cosmos/base/query/v1beta1/pagination.proto";
import "google/protobuf/timestamp.proto";
import "testpb/test_schema.proto";

// TestSchemaQuery queries the state of the tables specified by testpb/test_schema.proto.
service TestSchemaQuery {
  // Get queries the ExampleTable table by its primary key.
  rpc GetExampleTable (GetExampleTableRequest) returns (GetExampleTableResponse) {}
  // GetExampleTableByU64Str queries the ExampleTable table by its U64Str index
  rpc GetExampleTableByU64Str (GetExampleTableByU64StrRequest) returns (GetExampleTableByU64StrResponse) {}
  // ListExampleTable queries the ExampleTable table using prefix and range queries against defined indexes.
  rpc ListExampleTable (ListExampleTableRequest) returns (ListExampleTableResponse) {}
  // Get queries the ExampleAutoIncrementTable table by its primary key.
  rpc GetExampleAutoIncrementTable (GetExampleAutoIncrementTableRequest) returns (GetExampleAutoIncrementTableResponse) {}
  // GetExampleAutoIncrementTableByX queries the ExampleAutoIncrementTable table by its X index
  rpc GetExampleAutoIncrementTableByX (GetExampleAutoIncrementTableByXRequest) returns (GetExampleAutoIncrementTableByXResponse) {}
  // ListExampleAutoIncrementTable queries the ExampleAutoIncrementTable table using prefix and range queries against defined indexes.
  rpc ListExampleAutoIncrementTable (ListExampleAutoIncrementTableRequest) returns (ListExampleAutoIncrementTableResponse) {}
  // GetExampleSingleton queries the ExampleSingleton singleton.
  rpc GetExampleSingleton (GetExampleSingletonRequest) returns (GetExampleSingletonResponse) {}
  // Get queries the ExampleTimestamp table by its primary key.
  rpc GetExampleTimestamp (GetExampleTimestampRequest) returns (GetExampleTimestampResponse) {}
  // ListExampleTimestamp queries the ExampleTimestamp table using prefix and range queries against defined indexes.
  rpc ListExampleTimestamp (ListExampleTimestampRequest) returns (ListExampleTimestampResponse) {}
  // Get queries the SimpleExample table by its primary key.
  rpc GetSimpleExample (GetSimpleExampleRequest) returns (GetSimpleExampleResponse) {}
  // GetSimpleExampleByUnique queries the SimpleExample table by its Unique index
  rpc GetSimpleExampleByUnique (GetSimpleExampleByUniqueRequest) returns (GetSimpleExampleByUniqueResponse) {}
  // ListSimpleExample queries the SimpleExample table using prefix and range queries against defined indexes.
  rpc ListSimpleExample (ListSimpleExampleRequest) returns (ListSimpleExampleResponse) {}
  // Get queries the ExampleAutoIncFieldName table by its primary key.
  rpc GetExampleAutoIncFieldName (GetExampleAutoIncFieldNameRequest) returns (GetExampleAutoIncFieldNameResponse) {}
  // ListExampleAutoIncFieldName queries the ExampleAutoIncFieldName table using prefix and range queries against defined indexes.
  rpc ListExampleAutoIncFieldName (ListExampleAutoIncFieldNameRequest) returns (ListExampleAutoIncFieldNameResponse) {}
}

// GetExampleTableRequest is the TestSchemaQuery/GetExampleTableRequest request type.
message GetExampleTableRequest {
  // u32 specifies the value of the u32 field in the primary key.
  uint32 u32 = 1;
  // i64 specifies the value of the i64 field in the primary key.
  int64 i64 = 2;
  // str specifies the value of the str field in the primary key.
  string str = 3;
}

// GetExampleTableResponse is the TestSchemaQuery/GetExampleTableResponse response type.
message GetExampleTableResponse {
  // value is the response value.
  ExampleTable value = 1;
}

// GetExampleTableByU64StrRequest is the TestSchemaQuery/GetExampleTableByU64StrRequest request type.
message GetExampleTableByU64StrRequest {
  uint64 u64 = 1;
  string str = 2;
}

// GetExampleTableByU64StrResponse is the TestSchemaQuery/GetExampleTableByU64StrResponse response type.
message GetExampleTableByU64StrResponse {
  ExampleTable value = 1;
}

// ListExampleTableRequest is the TestSchemaQuery/ListExampleTableRequest request type.
message ListExampleTableRequest {
  // IndexKey specifies the value of an index key to use in prefix and range queries.
  message IndexKey {
    // key specifies the index key value.
    oneof key {
      // u_32_i_64_str specifies the value of the U32I64Str index key to use in the query.
      U32I64Str u_32_i_64_str = 1;
      // u_64_str specifies the value of the U64Str index key to use in the query.
      U64Str u_64_str = 2;
      // str_u_32 specifies the value of the StrU32 index key to use in the query.
      StrU32 str_u_32 = 3;
      // bz_str specifies the value of the BzStr index key to use in the query.
      BzStr bz_str = 4;
    }
    
    message U32I64Str {
      // u32 is the value of the u32 field in the index.
      // It can be omitted to query for all valid values of that field in this segment of the index.
      optional uint32 u32 = 1;
      // i64 is the value of the i64 field in the index.
      // It can be omitted to query for all valid values of that field in this segment of the index.
      optional int64 i64 = 2;
      // str is the value of the str field in the index.
      // It can be omitted to query for all valid values of that field in this segment of the index.
      optional string str = 3;
    }
    
    message U64Str {
      // u64 is the value of the u64 field in the index.
      // It can be omitted to query for all valid values of that field in this segment of the index.
      optional uint64 u64 = 1;
      // str is the value of the str field in the index.
      // It can be omitted to query for all valid values of that field in this segment of the index.
      optional string str = 2;
    }
    
    message StrU32 {
      // str is the value of the str field in the index.
      // It can be omitted to query for all valid values of that field in this segment of the index.
      optional string str = 1;
      // u32 is the value of the u32 field in the index.
      // It can be omitted to query for all valid values of that field in this segment of the index.
      optional uint32 u32 = 2;
    }
    
    message BzStr {
      // bz is the value of the bz field in the index.
      // It can be omitted to query for all valid values of that field in this segment of the index.
      optional bytes bz = 1;
      // str is the value of the str field in the index.
      // It can be omitted to query for all valid values of that field in this segment of the index.
      optional string str = 2;
    }
  }
  
  // query specifies the type of query - either a prefix or range query.
  oneof query {
    // prefix_query specifies the index key value to use for the prefix query.
    IndexKey prefix_query = 1;
    // range_query specifies the index key from/to values to use for the range query.
    RangeQuery range_query = 2;
  }
  // pagination specifies optional pagination parameters.
  cosmos.base.query.v1beta1.PageRequest pagination = 3;
  
  // RangeQuery specifies the from/to index keys for a range query.
  message RangeQuery {
    // from is the index key to use for the start of the range query.
    // To query from the start of an index, specify an index key for that index with empty values.
    IndexKey from = 1;
    // to is the index key to use for the end of the range query.
    // The index key type MUST be the same as the index key type used for from.
    // To query from to the end of an index it can be omitted.
    IndexKey to = 2;
  }
}

// ListExampleTableResponse is the TestSchemaQuery/ListExampleTableResponse response type.
message ListExampleTableResponse {
  // values are the results of the query.
  repeated ExampleTable values = 1;
  // pagination is the pagination response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// GetExampleAutoIncrementTableRequest is the TestSchemaQuery/GetExampleAutoIncrementTableRequest request type.
message GetExampleAutoIncrementTableRequest {
  // id specifies the value of the id field in the primary key.
  uint64 id = 1;
}

// GetExampleAutoIncrementTableResponse is the TestSchemaQuery/GetExampleAutoIncrementTableResponse response type.
message GetExampleAutoIncrementTableResponse {
  // value is the response value.
  ExampleAutoIncrementTable value = 1;
}

// GetExampleAutoIncrementTableByXRequest is the TestSchemaQuery/GetExampleAutoIncrementTableByXRequest request type.
message GetExampleAutoIncrementTableByXRequest {
  string x = 1;
}

// GetExampleAutoIncrementTableByXResponse is the TestSchemaQuery/GetExampleAutoIncrementTableByXResponse response type.
message GetExampleAutoIncrementTableByXResponse {
  ExampleAutoIncrementTable value = 1;
}

// ListExampleAutoIncrementTableRequest is the TestSchemaQuery/ListExampleAutoIncrementTableRequest request type.
message ListExampleAutoIncrementTableRequest {
  // IndexKey specifies the value of an index key to use in prefix and range queries.
  message IndexKey {
    // key specifies the index key value.
    oneof key {
      // id specifies the value of the Id index key to use in the query.
      Id id = 1;
      // x specifies the value of the X index key to use in the query.
      X x = 2;
    }
    
    message Id {
      // id is the value of the id field in the index.
      // It can be omitted to query for all valid values of that field in this segment of the index.
      optional uint64 id = 1;
    }
    
    message X {
      // x is the value of the x field in the index.
      // It can be omitted to query for all valid values of that field in this segment of the index.
      optional string x = 1;
    }
  }
  
  // query specifies the type of query - either a prefix or range query.
  oneof query {
    // prefix_query specifies the index key value to use for the prefix query.
    IndexKey prefix_query = 1;
    // range_query specifies the index key from/to values to use for the range query.
    RangeQuery range_query = 2;
  }
  // pagination specifies optional pagination parameters.
  cosmos.base.query.v1beta1.PageRequest pagination = 3;
  
  // RangeQuery specifies the from/to index keys for a range query.
  message RangeQuery {
    // from is the index key to use for the start of the range query.
    // To query from the start of an index, specify an index key for that index with empty values.
    IndexKey from = 1;
    // to is the index key to use for the end of the range query.
    // The index key type MUST be the same as the index key type used for from.
    // To query from to the end of an index it can be omitted.
    IndexKey to = 2;
  }
}

// ListExampleAutoIncrementTableResponse is the TestSchemaQuery/ListExampleAutoIncrementTableResponse response type.
message ListExampleAutoIncrementTableResponse {
  // values are the results of the query.
  repeated ExampleAutoIncrementTable values = 1;
  // pagination is the pagination response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// GetExampleSingletonRequest is the TestSchemaQuery/GetExampleSingletonRequest request type.
message GetExampleSingletonRequest {
}

// GetExampleSingletonResponse is the TestSchemaQuery/GetExampleSingletonResponse request type.
message GetExampleSingletonResponse {
  ExampleSingleton value = 1;
}

// GetExampleTimestampRequest is the TestSchemaQuery/GetExampleTimestampRequest request type.
message GetExampleTimestampRequest {
  // id specifies the value of the id field in the primary key.
  uint64 id = 1;
}

// GetExampleTimestampResponse is the TestSchemaQuery/GetExampleTimestampResponse response type.
message GetExampleTimestampResponse {
  // value is the response value.
  ExampleTimestamp value = 1;
}

// ListExampleTimestampRequest is the TestSchemaQuery/ListExampleTimestampRequest request type.
message ListExampleTimestampRequest {
  // IndexKey specifies the value of an index key to use in prefix and range queries.
  message IndexKey {
    // key specifies the index key value.
    oneof key {
      // id specifies the value of the Id index key to use in the query.
      Id id = 1;
      // ts specifies the value of the Ts index key to use in the query.
      Ts ts = 2;
    }
    
    message Id {
      // id is the value of the id field in the index.
      // It can be omitted to query for all valid values of that field in this segment of the index.
      optional uint64 id = 1;
    }
    
    message Ts {
      // ts is the value of the ts field in the index.
      // It can be omitted to query for all valid values of that field in this segment of the index.
      optional google.protobuf.Timestamp ts = 1;
    }
  }
  
  // query specifies the type of query - either a prefix or range query.
  oneof query {
    // prefix_query specifies the index key value to use for the prefix query.
    IndexKey prefix_query = 1;
    // range_query specifies the index key from/to values to use for the range query.
    RangeQuery range_query = 2;
  }
  // pagination specifies optional pagination parameters.
  cosmos.base.query.v1beta1.PageRequest pagination = 3;
  
  // RangeQuery specifies the from/to index keys for a range query.
  message RangeQuery {
    // from is the index key to use for the start of the range query.
    // To query from the start of an index, specify an index key for that index with empty values.
    IndexKey from = 1;
    // to is the index key to use for the end of the range query.
    // The index key type MUST be the same as the index key type used for from.
    // To query from to the end of an index it can be omitted.
    IndexKey to = 2;
  }
}

// ListExampleTimestampResponse is the TestSchemaQuery/ListExampleTimestampResponse response type.
message ListExampleTimestampResponse {
  // values are the results of the query.
  repeated ExampleTimestamp values = 1;
  // pagination is the pagination response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// GetSimpleExampleRequest is the TestSchemaQuery/GetSimpleExampleRequest request type.
message GetSimpleExampleRequest {
  // name specifies the value of the name field in the primary key.
  string name = 1;
}

// GetSimpleExampleResponse is the TestSchemaQuery/GetSimpleExampleResponse response type.
message GetSimpleExampleResponse {
  // value is the response value.
  SimpleExample value = 1;
}

// GetSimpleExampleByUniqueRequest is the TestSchemaQuery/GetSimpleExampleByUniqueRequest request type.
message GetSimpleExampleByUniqueRequest {
  string unique = 1;
}

// GetSimpleExampleByUniqueResponse is the TestSchemaQuery/GetSimpleExampleByUniqueResponse response type.
message GetSimpleExampleByUniqueResponse {
  SimpleExample value = 1;
}

// ListSimpleExampleRequest is the TestSchemaQuery/ListSimpleExampleRequest request type.
message ListSimpleExampleRequest {
  // IndexKey specifies the value of an index key to use in prefix and range queries.
  message IndexKey {
    // key specifies the index key value.
    oneof key {
      // name specifies the value of the Name index key to use in the query.
      Name name = 1;
      // unique specifies the value of the Unique index key to use in the query.
      Unique unique = 2;
    }
    
    message Name {
      // name is the value of the name field in the index.
      // It can be omitted to query for all valid values of that field in this segment of the index.
      optional string name = 1;
    }
    
    message Unique {
      // unique is the value of the unique field in the index.
      // It can be omitted to query for all valid values of that field in this segment of the index.
      optional string unique = 1;
    }
  }
  
  // query specifies the type of query - either a prefix or range query.
  oneof query {
    // prefix_query specifies the index key value to use for the prefix query.
    IndexKey prefix_query = 1;
    // range_query specifies the index key from/to values to use for the range query.
    RangeQuery range_query = 2;
  }
  // pagination specifies optional pagination parameters.
  cosmos.base.query.v1beta1.PageRequest pagination = 3;
  
  // RangeQuery specifies the from/to index keys for a range query.
  message RangeQuery {
    // from is the index key to use for the start of the range query.
    // To query from the start of an index, specify an index key for that index with empty values.
    IndexKey from = 1;
    // to is the index key to use for the end of the range query.
    // The index key type MUST be the same as the index key type used for from.
    // To query from to the end of an index it can be omitted.
    IndexKey to = 2;
  }
}

// ListSimpleExampleResponse is the TestSchemaQuery/ListSimpleExampleResponse response type.
message ListSimpleExampleResponse {
  // values are the results of the query.
  repeated SimpleExample values = 1;
  // pagination is the pagination response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// GetExampleAutoIncFieldNameRequest is the TestSchemaQuery/GetExampleAutoIncFieldNameRequest request type.
message GetExampleAutoIncFieldNameRequest {
  // foo specifies the value of the foo field in the primary key.
  uint64 foo = 1;
}

// GetExampleAutoIncFieldNameResponse is the TestSchemaQuery/GetExampleAutoIncFieldNameResponse response type.
message GetExampleAutoIncFieldNameResponse {
  // value is the response value.
  ExampleAutoIncFieldName value = 1;
}

// ListExampleAutoIncFieldNameRequest is the TestSchemaQuery/ListExampleAutoIncFieldNameRequest request type.
message ListExampleAutoIncFieldNameRequest {
  // IndexKey specifies the value of an index key to use in prefix and range queries.
  message IndexKey {
    // key specifies the index key value.
    oneof key {
      // foo specifies the value of the Foo index key to use in the query.
      Foo foo = 1;
    }
    
    message Foo {
      // foo is the value of the foo field in the index.
      // It can be omitted to query for all valid values of that field in this segment of the index.
      optional uint64 foo = 1;
    }
  }
  
  // query specifies the type of query - either a prefix or range query.
  oneof query {
    // prefix_query specifies the index key value to use for the prefix query.
    IndexKey prefix_query = 1;
    // range_query specifies the index key from/to values to use for the range query.
    RangeQuery range_query = 2;
  }
  // pagination specifies optional pagination parameters.
  cosmos.base.query.v1beta1.PageRequest pagination = 3;
  
  // RangeQuery specifies the from/to index keys for a range query.
  message RangeQuery {
    // from is the index key to use for the start of the range query.
    // To query from the start of an index, specify an index key for that index with empty values.
    IndexKey from = 1;
    // to is the index key to use for the end of the range query.
    // The index key type MUST be the same as the index key type used for from.
    // To query from to the end of an index it can be omitted.
    IndexKey to = 2;
  }
}

// ListExampleAutoIncFieldNameResponse is the TestSchemaQuery/ListExampleAutoIncFieldNameResponse response type.
message ListExampleAutoIncFieldNameResponse {
  // values are the results of the query.
  repeated ExampleAutoIncFieldName values = 1;
  // pagination is the pagination response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

