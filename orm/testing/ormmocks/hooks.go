// Code generated by MockGen. DO NOT EDIT.
// Source: orm/model/ormtable/hooks.go

// Package ormmocks is a generated GoMock package.
package ormmocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	proto "google.golang.org/protobuf/proto"
)

// MockHooks is a mock of Hooks interface.
type MockHooks struct {
	ctrl     *gomock.Controller
	recorder *MockHooksMockRecorder
}

// MockHooksMockRecorder is the mock recorder for MockHooks.
type MockHooksMockRecorder struct {
	mock *MockHooks
}

// NewMockHooks creates a new mock instance.
func NewMockHooks(ctrl *gomock.Controller) *MockHooks {
	mock := &MockHooks{ctrl: ctrl}
	mock.recorder = &MockHooksMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHooks) EXPECT() *MockHooksMockRecorder {
	return m.recorder
}

// OnDelete mocks base method.
func (m *MockHooks) OnDelete(arg0 proto.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnDelete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnDelete indicates an expected call of OnDelete.
func (mr *MockHooksMockRecorder) OnDelete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnDelete", reflect.TypeOf((*MockHooks)(nil).OnDelete), arg0)
}

// OnInsert mocks base method.
func (m *MockHooks) OnInsert(arg0 proto.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnInsert", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnInsert indicates an expected call of OnInsert.
func (mr *MockHooksMockRecorder) OnInsert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnInsert", reflect.TypeOf((*MockHooks)(nil).OnInsert), arg0)
}

// OnUpdate mocks base method.
func (m *MockHooks) OnUpdate(existing, new proto.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnUpdate", existing, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnUpdate indicates an expected call of OnUpdate.
func (mr *MockHooksMockRecorder) OnUpdate(existing, new interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnUpdate", reflect.TypeOf((*MockHooks)(nil).OnUpdate), existing, new)
}
