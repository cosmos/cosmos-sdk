syntax = "proto3";

package cosmos.accounts.v1;

option go_package = "cosmossdk.io/x/accounts/v1";

import "google/protobuf/any.proto";

// UserOperation defines the type used to define a state transition that
// an account wants to make.
message UserOperation {
  // sender defines the account that is sending the UserOperation.
  string sender = 1;
  // authentication_method defines the authentication strategy the account wants to use.
  // since accounts can have multiple authentication methods, this field is used to
  // instruct the account on what auth method to use.
  string authentication_method = 2;
  // authentication_data defines the authentication data associated with the authentication method.
  // It is the account implementer duty to assess that the UserOperation is properly signed.
  google.protobuf.Any authentication_data = 3;
  // authentication_gas_limit expresses the gas limit to be used for the authentication part of the
  // UserOperation.
  uint64 authentication_gas_limit = 4;
  // bundler_payment_messages expresses a list of messages that the account
  // executes to pay the bundler for submitting the UserOperation.
  // It can be empty if the bundler does not need any form of payment,
  // the handshake for submitting the UserOperation might have happened off-chain.
  // Bundlers and accounts are free to use any form of payment, in fact the payment can
  // either be empty or be expressed as:
  // - NFT payment
  // - IBC Token payment.
  // - Payment through delegations.
  repeated google.protobuf.Any bundler_payment_messages = 5;
  // bundler_payment_gas_limit defines the gas limit to be used for the bundler payment.
  // This ensures that, since the bundler executes a list of UserOperations and there needs to
  // be minimal trust between bundler and UserOperation sender, the sender cannot consume
  // the whole bundle gas.
  uint64 bundler_payment_gas_limit = 6;
  // execution_messages expresses a list of messages that the account wants to execute.
  // This concretely is the intent of the transaction expressed as a UserOperation.
  repeated google.protobuf.Any execution_messages = 7;
  // execution_gas_limit defines the gas limit to be used for the execution of the UserOperation's
  // execution messages.
  uint64 execution_gas_limit = 8;

  // tx_compat is populated only when the operation is composed from a raw tx.
  // In fact if a TX comes and the sender of the TX is an abstracted account,
  // we convert the TX into a user operation, and try to authenticate using the
  // x/accounts authenticate method. If a bundler tries to send a UserOperation
  // with a populated tx_compat, the operation will immediately yield a failure.
  TxCompat tx_compat = 9;
}

// TxCompat provides compatibility for x/accounts abstracted account with the cosmos-sdk's Txs.
// In fact TxCompat contains fields coming from the Tx in raw and decoded format. The Raw format
// is mainly needed for proper sig verification.
message TxCompat {
  // auth_info_bytes contains the auth info bytes of the tx.
  // Must not be modified.
  bytes auth_info_bytes = 1;
  // body_bytes contains the body bytes of the tx.
  // must not be modified.
  bytes body_bytes = 2;
}

// UserOperationResponse defines the response of a UserOperation.
// If the operation fails the error field will be populated.
message UserOperationResponse {
  // authentication_gas_used defines the gas used for the authentication part of the UserOperation.
  uint64 authentication_gas_used = 1;
  // bundler_payment_gas_used defines the gas used for the bundler payment part of the UserOperation.
  uint64 bundler_payment_gas_used = 2;
  // bundler_payment_responses defines the responses of the bundler payment messages.
  // It can be empty if the bundler does not need any form of payment.
  repeated google.protobuf.Any bundler_payment_responses = 3;
  // execution_gas_used defines the gas used for the execution part of the UserOperation.
  uint64 execution_gas_used = 4;
  // execution_responses defines the responses of the execution messages.
  repeated google.protobuf.Any execution_responses = 5;
  // error defines the error that occurred during the execution of the UserOperation.
  // If the error is not empty, the UserOperation failed.
  // Other fields might be populated even if the error is not empty, for example
  // if the operation fails after the authentication step, the authentication_gas_used
  // field will be populated.
  string error = 6;
}