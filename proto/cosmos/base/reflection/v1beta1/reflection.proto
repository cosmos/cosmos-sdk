syntax = "proto3";
package cosmos.base.reflection.v1beta1;

import "google/api/annotations.proto";

option go_package = "github.com/cosmos/cosmos-sdk/server/grpc/appreflection";

// ReflectionService defines a service for application reflection.
service ReflectionService {
  // GetAppDescriptor returns the full cosmos application descriptor
  rpc GetAppDescriptor(GetAppDescriptorRequest) returns (GetAppDescriptorResponse) {
    option (google.api.http).get = "/cosmos/base/reflection/v1beta1/app_descriptor";
  };
  // ListAllInterfaces lists all the interfaces registered in the interface
  // registry.
  rpc ListAllInterfaces(ListAllInterfacesRequest) returns (ListAllInterfacesResponse) {
    option (google.api.http).get = "/cosmos/base/reflection/v1beta1/interfaces";
  };

  // ListImplementations list all the concrete types that implement a given
  // interface.
  rpc ListImplementations(ListImplementationsRequest) returns (ListImplementationsResponse) {
    option (google.api.http).get = "/cosmos/base/reflection/v1beta1/interfaces/"
                                   "{interface_name}/implementations";
  };
}

// AppDescriptor describes a cosmos-sdk based application
message AppDescriptor {
  // chain provides the chain descriptor
  ChainDescriptor chain = 2;
  // codec provides metadata information regarding codec related types
  CodecDescriptor codec = 3;
  // configuration provides metadata information regarding the sdk.Config type
  ConfigurationDescriptor configuration = 4;
  // query_services provides metadata information regarding the available queriable endpoints
  QueryServicesDescriptor query_services = 5;
  // tx provides metadata information regarding how to send transactions to the given application
  TxDescriptor tx = 6;
}

// TxDescriptor describes the accepted transaction type
message TxDescriptor {
  // fullname is the protobuf fullname of the raw transaction type (for instance the tx.Tx type)
  string fullname = 1;
  // authn provides information on how to authenticate a transaction in offline mode
  AuthnDescriptor authn = 2;
  // msgs lists the accepted application messages (sdk.ServiceMsg, sdk.Msg)
  // NOTE: not to be confused with proto.Message types
  repeated MsgDescriptor msgs = 3;
}

// AuthnDescriptor provides information on how to sign transactions without relying
// on the online RPCs GetTxMetadata and CombineUnsignedTxAndSignatures
message AuthnDescriptor {
  // sign_modes defines the supported signature algorithm
  repeated SigningModeDescriptor sign_modes = 1;
}

// SigningModeDescriptor provides information on a signing flow of the application
// NOTE(fdymylja): here we could go as far as providing an entire flow on how
// to sign a message given a SigningModeDescriptor, but it's better to think about
// this another time
message SigningModeDescriptor {
  // name defines the unique name of the signing mode
  string name = 1;
  // authn_info_provider_method_fullname defines the fullname of the method to call to get
  // the metadata required to authenticate using the provided sign_modes
  string authn_info_provider_method_fullname = 2;
}

// ChainDescriptor describes chain information of the application
message ChainDescriptor {
  // id is the chain id
  string id = 1;
}

// CodecDescriptor describes the registered interfaces and provides metadata information on the types
message CodecDescriptor {
  // interfaces is a list of the registerted interfaces descriptors
  repeated InterfaceDescriptor interfaces = 1;
}

// InterfaceDescriptor describes the implementation of an interface
message InterfaceDescriptor {
  // fullname is the name of the interface
  string fullname = 1;
  // interface_accepting_messages contains information regarding the proto messages which contain the interface as google.protobuf.Any field
  repeated InterfaceAcceptingMessageDescriptor interface_accepting_messages = 2;
  // interface_implementers is a list of the descriptors of the interface implementers
  repeated InterfaceImplementerDescriptor interface_implementers = 3;
}

// InterfaceImplementerDescriptor describes an interface implementer
message InterfaceImplementerDescriptor {
  // fullname is the protobuf queryable name of the interface implementer
  string fullname = 1;
  // type_url defines the type URL used when marshalling the type as any
  // this is required so we can provide type safe google.protobuf.Any marshalling and
  // unmarshalling, making sure that we don't accept just 'any' type
  // in our interface fields
  string type_url = 2;
}

// InterfaceAcceptingMessageDescriptor describes a protobuf message which contains
// an interface represented as a google.protobuf.Any
message InterfaceAcceptingMessageDescriptor {
  // fullname is the protobuf fullname of the type containing the interface
  string fullname = 1;
  // field_descriptor_names is a list of the protobuf name (not fullname) of the field
  // which contains the interface as google.protobuf.Any (the interface is the same, but
  // it can be in multiple fields of the same proto message)
  repeated string field_descriptor_names = 2;
}

// ConfigurationDescriptor contains metadata information on the sdk.Config
message ConfigurationDescriptor {
  // bech32_account_address_prefix is the account address prefix
  string bech32_account_address_prefix = 1;
  // bech32_validator_address_prefix is the bech32 prefix for validator addresses
  string bech32_validator_address_prefix = 2;
  // bech32_consensus_address_prefix is the bech32 prefix for consensus nodes addresses
  string bech32_consensus_address_prefix = 3;
  // bech32_account_public_key_prefix is the bech32 prefix for accounts public keys
  string bech32_account_public_key_prefix = 4;
  // bech32_validator_public_key_prefix is the bech32 prefix for validators public keys
  string bech32_validator_public_key_prefix = 5;
  // bech32_consensus_public_key_prefix is the bech32 prefix for consensus nodes public keys
  string bech32_consensus_public_key_prefix = 6;
  // purpose is the BIP-0044 purpose code
  uint32 purpose = 7;
  // coin_type is the BIP-0044 coin type code
  uint32 coin_type = 8;
  // full_fundraiser_path is the BIP-0044 prefix (deprecated in favor of full_bip44_path)
  string full_fundraiser_path = 9;
  // full_bip44_path is the BIP-0044 prefix
  string full_bip44_path = 10;
}

// MsgDescriptor describes a cosmos-sdk message that can be delivered with a transaction
message MsgDescriptor {
  // msg contains a descriptor of sdk.ServiceMsg or sdk.Msg
  oneof msg {
    // service_msg is used when the message is an sdk.ServiceMsg type
    ServiceMsgDescriptor service_msg = 1;
    // legacy_msg is used when the message is an sdk.Msg type
    LegacyMsgDescriptor legacy_msg = 2;
  }
}

// ServiceMsgDescriptor describes an sdk.ServiceMsg type
message ServiceMsgDescriptor {
  // fullname is the protobuf fullname of the given sdk.ServiceMsg
  string fullname = 1;
  // route is the sdk.ServiceMsg route, it is equal to type_url
  string route = 2;
  // type_url defines the type URL used when marshalling the type as any
  // this is required so we can provide type safe google.protobuf.Any marshalling and
  // unmarshalling, making sure that we don't accept just 'any' type
  // in our interface fields
  string type_url = 3;
}

// LegacyMsgDescriptor describes an sdk.Msg type
message LegacyMsgDescriptor {
  // fullname is the protobuf fullname of the message
  string fullname = 1;
  // type_url defines the type URL used when marshalling the type as any
  // this is required so we can provide type safe google.protobuf.Any marshalling and
  // unmarshalling, making sure that we don't accept just 'any' type
  // in our interface fields
  string type_url = 2;
}

// GetAppDescriptorRequest is the request type of the GetAppDescriptor RPC.
message GetAppDescriptorRequest {}

// GetAppDescriptorResponse is the response type of the GetAppDescriptor RPC.
message GetAppDescriptorResponse {
  // app contains the cosmos-sdk application descriptor
  AppDescriptor app = 1;
}

// QueryServicesDescriptor contains the list of cosmos-sdk queriable services
message QueryServicesDescriptor {
  // query_services is a list of cosmos-sdk QueryServiceDescriptor
  repeated QueryServiceDescriptor query_services = 1;
}

// QueryServiceDescriptor describes a cosmos-sdk queryable service
message QueryServiceDescriptor {
  // fullname is the protobuf fullname of the service descriptor
  string fullname = 1;
  // methods provides a list of query service methods
  repeated QueryMethodDescriptor methods = 2;
}

// QueryMethodDescriptor describes a queryable method of a query service
// no other info is provided beside method name and tendermint queryable path
// because it would be redundant with the grpc reflection service
message QueryMethodDescriptor {
  // name is the protobuf name (not fullname) of the method
  string name = 1;
  // full_query_path is the path that can be used to query
  // this method via tendermint abci.Query
  string full_query_path = 2;
}

// ListAllInterfacesRequest is the request type of the ListAllInterfaces RPC.
message ListAllInterfacesRequest {}

// ListAllInterfacesResponse is the response type of the ListAllInterfaces RPC.
message ListAllInterfacesResponse {
  // interface_names is an array of all the registered interfaces.
  repeated string interface_names = 1;
}

// ListImplementationsRequest is the request type of the ListImplementations
// RPC.
message ListImplementationsRequest {
  // interface_name defines the interface to query the implementations for.
  string interface_name = 1;
}

// ListImplementationsResponse is the response type of the ListImplementations
// RPC.
message ListImplementationsResponse {
  repeated string implementation_message_names = 1;
}
