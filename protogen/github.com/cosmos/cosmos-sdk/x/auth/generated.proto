syntax = "proto3";
package github.com.cosmos.cosmossdk.x.auth;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option (gogoproto.protosizer_all) = true;
option (gogoproto.sizer_all) = false;
option go_package = "auth";

// BaseAccount - a base account structure.
// This can be extended by embedding within in your AppAccount.
// However one doesn't have to use BaseAccount as long as your struct
// implements Account.
message BaseAccount {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
	uint64 account_number = 1;
	uint64 sequence = 2;
}

// BaseVestingAccount implements the VestingAccount interface. It contains all
// the necessary fields needed for any vesting account implementation.
message BaseVestingAccount {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
	uint64 account_number = 1;
	uint64 sequence = 2;
	int64 end_time = 3;
}

// ContinuousVestingAccount implements the VestingAccount interface. It
// continuously vests by unlocking coins linearly with respect to time.
message ContinuousVestingAccount {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
	uint64 account_number = 1;
	uint64 sequence = 2;
	int64 end_time = 3;
	int64 start_time = 4;
}

// DelayedVestingAccount implements the VestingAccount interface. It vests all
// coins after a specific time, but non prior. In other words, it keeps them
// locked until a specified time.
message DelayedVestingAccount {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
	uint64 account_number = 1;
	uint64 sequence = 2;
	int64 end_time = 3;
}

// Params defines the parameters for the auth module.
message Params {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
	uint64 max_memo_characters = 1;
	uint64 tx_sig_limit = 2;
	uint64 tx_size_cost_per_byte = 3;
	uint64 sig_verify_cost_ed25519 = 4 [(gogoproto.customname) = "SigVerifyCostED25519"];
	uint64 sig_verify_cost_secp256k1 = 5 [(gogoproto.customname) = "SigVerifyCostSecp256k1"];
}

// StdFee includes the amount of coins paid in fees and the maximum
// gas to be used by the transaction. The ratio yields an effective "gasprice",
// which must be above some miminum to be accepted into the mempool.
message StdFee {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
	uint64 gas = 1;
}

// Standard Signature
message StdSignature {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
	bytes signature = 1;
}

// StdTx is a standard way to wrap a Msg with Fee and Signatures.
// NOTE: the first signature is the fee payer (Signatures must not be nil).
message StdTx {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
	github.com.cosmos.cosmossdk.x.auth.StdFee fee = 1 [(gogoproto.nullable) = false];
	repeated github.com.cosmos.cosmossdk.x.auth.StdSignature signatures = 2 [(gogoproto.nullable) = false];
	string memo = 3;
}

