// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: std/codec.proto

package std

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types8 "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_x_auth_exported "github.com/cosmos/cosmos-sdk/x/auth/exported"
	types "github.com/cosmos/cosmos-sdk/x/auth/types"
	types1 "github.com/cosmos/cosmos-sdk/x/auth/vesting/types"
	types2 "github.com/cosmos/cosmos-sdk/x/bank/types"
	types3 "github.com/cosmos/cosmos-sdk/x/crisis/types"
	types4 "github.com/cosmos/cosmos-sdk/x/distribution/types"
	types5 "github.com/cosmos/cosmos-sdk/x/gov/types"
	types6 "github.com/cosmos/cosmos-sdk/x/slashing/types"
	types7 "github.com/cosmos/cosmos-sdk/x/staking/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Account defines the application-level Account type.
type Account struct {
	// sum defines a list of all acceptable concrete Account implementations.
	//
	// Types that are valid to be assigned to Sum:
	//	*Account_BaseAccount
	//	*Account_ContinuousVestingAccount
	//	*Account_DelayedVestingAccount
	//	*Account_PeriodicVestingAccount
	//	*Account_ModuleAccount
	Sum isAccount_Sum `protobuf_oneof:"sum"`
}

func (m *Account) Reset()         { *m = Account{} }
func (m *Account) String() string { return proto.CompactTextString(m) }
func (*Account) ProtoMessage()    {}
func (*Account) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff851c3a98ef46f7, []int{0}
}
func (m *Account) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Account) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Account.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Account) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Account.Merge(m, src)
}
func (m *Account) XXX_Size() int {
	return m.Size()
}
func (m *Account) XXX_DiscardUnknown() {
	xxx_messageInfo_Account.DiscardUnknown(m)
}

var xxx_messageInfo_Account proto.InternalMessageInfo

type isAccount_Sum interface {
	isAccount_Sum()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Account_BaseAccount struct {
	BaseAccount *types.BaseAccount `protobuf:"bytes,1,opt,name=base_account,json=baseAccount,proto3,oneof" json:"base_account,omitempty"`
}
type Account_ContinuousVestingAccount struct {
	ContinuousVestingAccount *types1.ContinuousVestingAccount `protobuf:"bytes,2,opt,name=continuous_vesting_account,json=continuousVestingAccount,proto3,oneof" json:"continuous_vesting_account,omitempty"`
}
type Account_DelayedVestingAccount struct {
	DelayedVestingAccount *types1.DelayedVestingAccount `protobuf:"bytes,3,opt,name=delayed_vesting_account,json=delayedVestingAccount,proto3,oneof" json:"delayed_vesting_account,omitempty"`
}
type Account_PeriodicVestingAccount struct {
	PeriodicVestingAccount *types1.PeriodicVestingAccount `protobuf:"bytes,4,opt,name=periodic_vesting_account,json=periodicVestingAccount,proto3,oneof" json:"periodic_vesting_account,omitempty"`
}
type Account_ModuleAccount struct {
	ModuleAccount *types.ModuleAccount `protobuf:"bytes,5,opt,name=module_account,json=moduleAccount,proto3,oneof" json:"module_account,omitempty"`
}

func (*Account_BaseAccount) isAccount_Sum()              {}
func (*Account_ContinuousVestingAccount) isAccount_Sum() {}
func (*Account_DelayedVestingAccount) isAccount_Sum()    {}
func (*Account_PeriodicVestingAccount) isAccount_Sum()   {}
func (*Account_ModuleAccount) isAccount_Sum()            {}

func (m *Account) GetSum() isAccount_Sum {
	if m != nil {
		return m.Sum
	}
	return nil
}

func (m *Account) GetBaseAccount() *types.BaseAccount {
	if x, ok := m.GetSum().(*Account_BaseAccount); ok {
		return x.BaseAccount
	}
	return nil
}

func (m *Account) GetContinuousVestingAccount() *types1.ContinuousVestingAccount {
	if x, ok := m.GetSum().(*Account_ContinuousVestingAccount); ok {
		return x.ContinuousVestingAccount
	}
	return nil
}

func (m *Account) GetDelayedVestingAccount() *types1.DelayedVestingAccount {
	if x, ok := m.GetSum().(*Account_DelayedVestingAccount); ok {
		return x.DelayedVestingAccount
	}
	return nil
}

func (m *Account) GetPeriodicVestingAccount() *types1.PeriodicVestingAccount {
	if x, ok := m.GetSum().(*Account_PeriodicVestingAccount); ok {
		return x.PeriodicVestingAccount
	}
	return nil
}

func (m *Account) GetModuleAccount() *types.ModuleAccount {
	if x, ok := m.GetSum().(*Account_ModuleAccount); ok {
		return x.ModuleAccount
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Account) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Account_BaseAccount)(nil),
		(*Account_ContinuousVestingAccount)(nil),
		(*Account_DelayedVestingAccount)(nil),
		(*Account_PeriodicVestingAccount)(nil),
		(*Account_ModuleAccount)(nil),
	}
}

// Transaction defines the application-level transaction that can be signed and
// processed by the state-machine. It contains a base of common fields and
// repeated set of Message types.
type Transaction struct {
	StdTxBase `protobuf:"bytes,1,opt,name=base,proto3,embedded=base" json:""`
	Msgs      []Message `protobuf:"bytes,2,rep,name=msgs,proto3" json:"msgs"`
}

func (m *Transaction) Reset()         { *m = Transaction{} }
func (m *Transaction) String() string { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()    {}
func (*Transaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff851c3a98ef46f7, []int{1}
}
func (m *Transaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Transaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Transaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Transaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transaction.Merge(m, src)
}
func (m *Transaction) XXX_Size() int {
	return m.Size()
}
func (m *Transaction) XXX_DiscardUnknown() {
	xxx_messageInfo_Transaction.DiscardUnknown(m)
}

var xxx_messageInfo_Transaction proto.InternalMessageInfo

// Message defines the set of valid concrete message types that can be used to
// construct a transaction.
type Message struct {
	// sum defines the set of all allowed valid messages defined in modules.
	//
	// Types that are valid to be assigned to Sum:
	//	*Message_MsgSend
	//	*Message_MsgMultiSend
	//	*Message_MsgVerifyInvariant
	//	*Message_MsgSetWithdrawAddress
	//	*Message_MsgWithdrawDelegatorReward
	//	*Message_MsgWithdrawValidatorCommission
	//	*Message_MsgFundCommunityPool
	//	*Message_MsgVote
	//	*Message_MsgDeposit
	//	*Message_MsgUnjail
	//	*Message_MsgCreateValidator
	//	*Message_MsgEditValidator
	//	*Message_MsgDelegate
	//	*Message_MsgBeginRedelegate
	//	*Message_MsgUndelegate
	Sum isMessage_Sum `protobuf_oneof:"sum"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff851c3a98ef46f7, []int{2}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Message.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return m.Size()
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

type isMessage_Sum interface {
	isMessage_Sum()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Message_MsgSend struct {
	MsgSend *types2.MsgSend `protobuf:"bytes,1,opt,name=msg_send,json=msgSend,proto3,oneof" json:"msg_send,omitempty"`
}
type Message_MsgMultiSend struct {
	MsgMultiSend *types2.MsgMultiSend `protobuf:"bytes,2,opt,name=msg_multi_send,json=msgMultiSend,proto3,oneof" json:"msg_multi_send,omitempty"`
}
type Message_MsgVerifyInvariant struct {
	MsgVerifyInvariant *types3.MsgVerifyInvariant `protobuf:"bytes,3,opt,name=msg_verify_invariant,json=msgVerifyInvariant,proto3,oneof" json:"msg_verify_invariant,omitempty"`
}
type Message_MsgSetWithdrawAddress struct {
	MsgSetWithdrawAddress *types4.MsgSetWithdrawAddress `protobuf:"bytes,4,opt,name=msg_set_withdraw_address,json=msgSetWithdrawAddress,proto3,oneof" json:"msg_set_withdraw_address,omitempty"`
}
type Message_MsgWithdrawDelegatorReward struct {
	MsgWithdrawDelegatorReward *types4.MsgWithdrawDelegatorReward `protobuf:"bytes,5,opt,name=msg_withdraw_delegator_reward,json=msgWithdrawDelegatorReward,proto3,oneof" json:"msg_withdraw_delegator_reward,omitempty"`
}
type Message_MsgWithdrawValidatorCommission struct {
	MsgWithdrawValidatorCommission *types4.MsgWithdrawValidatorCommission `protobuf:"bytes,6,opt,name=msg_withdraw_validator_commission,json=msgWithdrawValidatorCommission,proto3,oneof" json:"msg_withdraw_validator_commission,omitempty"`
}
type Message_MsgFundCommunityPool struct {
	MsgFundCommunityPool *types4.MsgFundCommunityPool `protobuf:"bytes,7,opt,name=msg_fund_community_pool,json=msgFundCommunityPool,proto3,oneof" json:"msg_fund_community_pool,omitempty"`
}
type Message_MsgVote struct {
	MsgVote *types5.MsgVote `protobuf:"bytes,10,opt,name=msg_vote,json=msgVote,proto3,oneof" json:"msg_vote,omitempty"`
}
type Message_MsgDeposit struct {
	MsgDeposit *types5.MsgDeposit `protobuf:"bytes,11,opt,name=msg_deposit,json=msgDeposit,proto3,oneof" json:"msg_deposit,omitempty"`
}
type Message_MsgUnjail struct {
	MsgUnjail *types6.MsgUnjail `protobuf:"bytes,12,opt,name=msg_unjail,json=msgUnjail,proto3,oneof" json:"msg_unjail,omitempty"`
}
type Message_MsgCreateValidator struct {
	MsgCreateValidator *types7.MsgCreateValidator `protobuf:"bytes,13,opt,name=msg_create_validator,json=msgCreateValidator,proto3,oneof" json:"msg_create_validator,omitempty"`
}
type Message_MsgEditValidator struct {
	MsgEditValidator *types7.MsgEditValidator `protobuf:"bytes,14,opt,name=msg_edit_validator,json=msgEditValidator,proto3,oneof" json:"msg_edit_validator,omitempty"`
}
type Message_MsgDelegate struct {
	MsgDelegate *types7.MsgDelegate `protobuf:"bytes,15,opt,name=msg_delegate,json=msgDelegate,proto3,oneof" json:"msg_delegate,omitempty"`
}
type Message_MsgBeginRedelegate struct {
	MsgBeginRedelegate *types7.MsgBeginRedelegate `protobuf:"bytes,16,opt,name=msg_begin_redelegate,json=msgBeginRedelegate,proto3,oneof" json:"msg_begin_redelegate,omitempty"`
}
type Message_MsgUndelegate struct {
	MsgUndelegate *types7.MsgUndelegate `protobuf:"bytes,17,opt,name=msg_undelegate,json=msgUndelegate,proto3,oneof" json:"msg_undelegate,omitempty"`
}

func (*Message_MsgSend) isMessage_Sum()                        {}
func (*Message_MsgMultiSend) isMessage_Sum()                   {}
func (*Message_MsgVerifyInvariant) isMessage_Sum()             {}
func (*Message_MsgSetWithdrawAddress) isMessage_Sum()          {}
func (*Message_MsgWithdrawDelegatorReward) isMessage_Sum()     {}
func (*Message_MsgWithdrawValidatorCommission) isMessage_Sum() {}
func (*Message_MsgFundCommunityPool) isMessage_Sum()           {}
func (*Message_MsgVote) isMessage_Sum()                        {}
func (*Message_MsgDeposit) isMessage_Sum()                     {}
func (*Message_MsgUnjail) isMessage_Sum()                      {}
func (*Message_MsgCreateValidator) isMessage_Sum()             {}
func (*Message_MsgEditValidator) isMessage_Sum()               {}
func (*Message_MsgDelegate) isMessage_Sum()                    {}
func (*Message_MsgBeginRedelegate) isMessage_Sum()             {}
func (*Message_MsgUndelegate) isMessage_Sum()                  {}

func (m *Message) GetSum() isMessage_Sum {
	if m != nil {
		return m.Sum
	}
	return nil
}

func (m *Message) GetMsgSend() *types2.MsgSend {
	if x, ok := m.GetSum().(*Message_MsgSend); ok {
		return x.MsgSend
	}
	return nil
}

func (m *Message) GetMsgMultiSend() *types2.MsgMultiSend {
	if x, ok := m.GetSum().(*Message_MsgMultiSend); ok {
		return x.MsgMultiSend
	}
	return nil
}

func (m *Message) GetMsgVerifyInvariant() *types3.MsgVerifyInvariant {
	if x, ok := m.GetSum().(*Message_MsgVerifyInvariant); ok {
		return x.MsgVerifyInvariant
	}
	return nil
}

func (m *Message) GetMsgSetWithdrawAddress() *types4.MsgSetWithdrawAddress {
	if x, ok := m.GetSum().(*Message_MsgSetWithdrawAddress); ok {
		return x.MsgSetWithdrawAddress
	}
	return nil
}

func (m *Message) GetMsgWithdrawDelegatorReward() *types4.MsgWithdrawDelegatorReward {
	if x, ok := m.GetSum().(*Message_MsgWithdrawDelegatorReward); ok {
		return x.MsgWithdrawDelegatorReward
	}
	return nil
}

func (m *Message) GetMsgWithdrawValidatorCommission() *types4.MsgWithdrawValidatorCommission {
	if x, ok := m.GetSum().(*Message_MsgWithdrawValidatorCommission); ok {
		return x.MsgWithdrawValidatorCommission
	}
	return nil
}

func (m *Message) GetMsgFundCommunityPool() *types4.MsgFundCommunityPool {
	if x, ok := m.GetSum().(*Message_MsgFundCommunityPool); ok {
		return x.MsgFundCommunityPool
	}
	return nil
}

func (m *Message) GetMsgVote() *types5.MsgVote {
	if x, ok := m.GetSum().(*Message_MsgVote); ok {
		return x.MsgVote
	}
	return nil
}

func (m *Message) GetMsgDeposit() *types5.MsgDeposit {
	if x, ok := m.GetSum().(*Message_MsgDeposit); ok {
		return x.MsgDeposit
	}
	return nil
}

func (m *Message) GetMsgUnjail() *types6.MsgUnjail {
	if x, ok := m.GetSum().(*Message_MsgUnjail); ok {
		return x.MsgUnjail
	}
	return nil
}

func (m *Message) GetMsgCreateValidator() *types7.MsgCreateValidator {
	if x, ok := m.GetSum().(*Message_MsgCreateValidator); ok {
		return x.MsgCreateValidator
	}
	return nil
}

func (m *Message) GetMsgEditValidator() *types7.MsgEditValidator {
	if x, ok := m.GetSum().(*Message_MsgEditValidator); ok {
		return x.MsgEditValidator
	}
	return nil
}

func (m *Message) GetMsgDelegate() *types7.MsgDelegate {
	if x, ok := m.GetSum().(*Message_MsgDelegate); ok {
		return x.MsgDelegate
	}
	return nil
}

func (m *Message) GetMsgBeginRedelegate() *types7.MsgBeginRedelegate {
	if x, ok := m.GetSum().(*Message_MsgBeginRedelegate); ok {
		return x.MsgBeginRedelegate
	}
	return nil
}

func (m *Message) GetMsgUndelegate() *types7.MsgUndelegate {
	if x, ok := m.GetSum().(*Message_MsgUndelegate); ok {
		return x.MsgUndelegate
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Message) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Message_MsgSend)(nil),
		(*Message_MsgMultiSend)(nil),
		(*Message_MsgVerifyInvariant)(nil),
		(*Message_MsgSetWithdrawAddress)(nil),
		(*Message_MsgWithdrawDelegatorReward)(nil),
		(*Message_MsgWithdrawValidatorCommission)(nil),
		(*Message_MsgFundCommunityPool)(nil),
		(*Message_MsgVote)(nil),
		(*Message_MsgDeposit)(nil),
		(*Message_MsgUnjail)(nil),
		(*Message_MsgCreateValidator)(nil),
		(*Message_MsgEditValidator)(nil),
		(*Message_MsgDelegate)(nil),
		(*Message_MsgBeginRedelegate)(nil),
		(*Message_MsgUndelegate)(nil),
	}
}

// SignDoc defines a standard application-level signing document to compose
// signatures for a Transaction.
type SignDoc struct {
	StdSignDocBase `protobuf:"bytes,1,opt,name=base,proto3,embedded=base" json:""`
	Msgs           []Message `protobuf:"bytes,2,rep,name=msgs,proto3" json:"msgs"`
}

func (m *SignDoc) Reset()         { *m = SignDoc{} }
func (m *SignDoc) String() string { return proto.CompactTextString(m) }
func (*SignDoc) ProtoMessage()    {}
func (*SignDoc) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff851c3a98ef46f7, []int{3}
}
func (m *SignDoc) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignDoc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignDoc.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignDoc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignDoc.Merge(m, src)
}
func (m *SignDoc) XXX_Size() int {
	return m.Size()
}
func (m *SignDoc) XXX_DiscardUnknown() {
	xxx_messageInfo_SignDoc.DiscardUnknown(m)
}

var xxx_messageInfo_SignDoc proto.InternalMessageInfo

func (m *SignDoc) GetMsgs() []Message {
	if m != nil {
		return m.Msgs
	}
	return nil
}

// StdFee includes the amount of coins paid in fees and the maximum
// gas to be used by the transaction. The ratio yields an effective "gasprice",
// which must be above some miminum to be accepted into the mempool.
type StdFee struct {
	Amount github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
	Gas    uint64                                   `protobuf:"varint,2,opt,name=gas,proto3" json:"gas,omitempty"`
}

func (m *StdFee) Reset()         { *m = StdFee{} }
func (m *StdFee) String() string { return proto.CompactTextString(m) }
func (*StdFee) ProtoMessage()    {}
func (*StdFee) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff851c3a98ef46f7, []int{4}
}
func (m *StdFee) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StdFee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StdFee.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StdFee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StdFee.Merge(m, src)
}
func (m *StdFee) XXX_Size() int {
	return m.Size()
}
func (m *StdFee) XXX_DiscardUnknown() {
	xxx_messageInfo_StdFee.DiscardUnknown(m)
}

var xxx_messageInfo_StdFee proto.InternalMessageInfo

// StdSignature defines a signature structure that contains the signature of a
// transaction and an optional public key.
type StdSignature struct {
	PubKey    []byte `protobuf:"bytes,1,opt,name=pub_key,json=pubKey,proto3" json:"public_key,omitempty" yaml:"public_key"`
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *StdSignature) Reset()         { *m = StdSignature{} }
func (m *StdSignature) String() string { return proto.CompactTextString(m) }
func (*StdSignature) ProtoMessage()    {}
func (*StdSignature) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff851c3a98ef46f7, []int{5}
}
func (m *StdSignature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StdSignature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StdSignature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StdSignature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StdSignature.Merge(m, src)
}
func (m *StdSignature) XXX_Size() int {
	return m.Size()
}
func (m *StdSignature) XXX_DiscardUnknown() {
	xxx_messageInfo_StdSignature.DiscardUnknown(m)
}

var xxx_messageInfo_StdSignature proto.InternalMessageInfo

// StdTxBase defines a transaction base which application-level concrete transaction
// types can extend.
type StdTxBase struct {
	Fee        StdFee         `protobuf:"bytes,1,opt,name=fee,proto3" json:"fee"`
	Signatures []StdSignature `protobuf:"bytes,2,rep,name=signatures,proto3" json:"signatures"`
	Memo       string         `protobuf:"bytes,3,opt,name=memo,proto3" json:"memo,omitempty"`
}

func (m *StdTxBase) Reset()         { *m = StdTxBase{} }
func (m *StdTxBase) String() string { return proto.CompactTextString(m) }
func (*StdTxBase) ProtoMessage()    {}
func (*StdTxBase) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff851c3a98ef46f7, []int{6}
}
func (m *StdTxBase) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StdTxBase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StdTxBase.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StdTxBase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StdTxBase.Merge(m, src)
}
func (m *StdTxBase) XXX_Size() int {
	return m.Size()
}
func (m *StdTxBase) XXX_DiscardUnknown() {
	xxx_messageInfo_StdTxBase.DiscardUnknown(m)
}

var xxx_messageInfo_StdTxBase proto.InternalMessageInfo

func (m *StdTxBase) GetFee() StdFee {
	if m != nil {
		return m.Fee
	}
	return StdFee{}
}

func (m *StdTxBase) GetSignatures() []StdSignature {
	if m != nil {
		return m.Signatures
	}
	return nil
}

func (m *StdTxBase) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

// StdSignDocBase defines the base structure for which applications can extend
// to define the concrete structure that signers sign over.
type StdSignDocBase struct {
	ChainID       string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty" yaml:"chain_id"`
	AccountNumber uint64 `protobuf:"varint,2,opt,name=account_number,json=accountNumber,proto3" json:"account_number,omitempty" yaml:"account_number"`
	Sequence      uint64 `protobuf:"varint,3,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Memo          string `protobuf:"bytes,4,opt,name=memo,proto3" json:"memo,omitempty"`
	Fee           StdFee `protobuf:"bytes,5,opt,name=fee,proto3" json:"fee"`
}

func (m *StdSignDocBase) Reset()         { *m = StdSignDocBase{} }
func (m *StdSignDocBase) String() string { return proto.CompactTextString(m) }
func (*StdSignDocBase) ProtoMessage()    {}
func (*StdSignDocBase) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff851c3a98ef46f7, []int{7}
}
func (m *StdSignDocBase) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StdSignDocBase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StdSignDocBase.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StdSignDocBase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StdSignDocBase.Merge(m, src)
}
func (m *StdSignDocBase) XXX_Size() int {
	return m.Size()
}
func (m *StdSignDocBase) XXX_DiscardUnknown() {
	xxx_messageInfo_StdSignDocBase.DiscardUnknown(m)
}

var xxx_messageInfo_StdSignDocBase proto.InternalMessageInfo

func (m *StdSignDocBase) GetChainID() string {
	if m != nil {
		return m.ChainID
	}
	return ""
}

func (m *StdSignDocBase) GetAccountNumber() uint64 {
	if m != nil {
		return m.AccountNumber
	}
	return 0
}

func (m *StdSignDocBase) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *StdSignDocBase) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *StdSignDocBase) GetFee() StdFee {
	if m != nil {
		return m.Fee
	}
	return StdFee{}
}

func init() {
	proto.RegisterType((*Account)(nil), "cosmos_sdk.std.v1.Account")
	proto.RegisterType((*Transaction)(nil), "cosmos_sdk.std.v1.Transaction")
	proto.RegisterType((*Message)(nil), "cosmos_sdk.std.v1.Message")
	proto.RegisterType((*SignDoc)(nil), "cosmos_sdk.std.v1.SignDoc")
	proto.RegisterType((*StdFee)(nil), "cosmos_sdk.std.v1.StdFee")
	proto.RegisterType((*StdSignature)(nil), "cosmos_sdk.std.v1.StdSignature")
	proto.RegisterType((*StdTxBase)(nil), "cosmos_sdk.std.v1.StdTxBase")
	proto.RegisterType((*StdSignDocBase)(nil), "cosmos_sdk.std.v1.StdSignDocBase")
}

func init() { proto.RegisterFile("std/codec.proto", fileDescriptor_ff851c3a98ef46f7) }

var fileDescriptor_ff851c3a98ef46f7 = []byte{
	// 1317 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xcf, 0x6f, 0x1b, 0xc5,
	0x17, 0x5f, 0x37, 0x6e, 0xdc, 0x8c, 0x9d, 0xb4, 0x99, 0x6f, 0xfb, 0xad, 0x6b, 0x5a, 0x3b, 0x35,
	0xa8, 0x2a, 0x2d, 0xb1, 0xe9, 0x0f, 0x10, 0xb5, 0x10, 0xa2, 0x4e, 0x1a, 0x39, 0x40, 0xa1, 0xda,
	0xb4, 0x45, 0x20, 0xc1, 0x6a, 0xbc, 0x33, 0xdd, 0x0c, 0xf1, 0xec, 0x2c, 0x3b, 0xb3, 0xae, 0x8d,
	0xc4, 0x09, 0x0e, 0x94, 0x13, 0x57, 0x6e, 0x3d, 0x73, 0xee, 0x89, 0xbf, 0xa0, 0xea, 0xa9, 0x47,
	0x4e, 0x06, 0xa5, 0x17, 0xd4, 0x13, 0xea, 0x5f, 0x80, 0x66, 0x76, 0x76, 0xed, 0xc4, 0x1b, 0xb7,
	0x07, 0x2e, 0xab, 0x79, 0x3f, 0x3e, 0x9f, 0xf7, 0xf6, 0xbd, 0x37, 0xfb, 0x16, 0x1c, 0x15, 0x12,
	0x37, 0x5d, 0x8e, 0x89, 0xdb, 0x08, 0x42, 0x2e, 0x39, 0x5c, 0x76, 0xb9, 0x60, 0x5c, 0x38, 0x02,
	0xef, 0x34, 0x84, 0xc4, 0x8d, 0xfe, 0xa5, 0xca, 0x45, 0xb9, 0x4d, 0x43, 0xec, 0x04, 0x28, 0x94,
	0xc3, 0xa6, 0xf6, 0x6a, 0xc6, 0x4e, 0xab, 0x93, 0x42, 0x8c, 0xaf, 0x9c, 0x9b, 0x76, 0xf6, 0xb8,
	0xc7, 0xc7, 0x27, 0xe3, 0xb7, 0x2c, 0x87, 0x01, 0x11, 0x4d, 0xfd, 0x34, 0xaa, 0xf2, 0xa0, 0x89,
	0x22, 0xb9, 0xdd, 0x9c, 0xb6, 0xac, 0x18, 0x4b, 0x9f, 0x08, 0x49, 0x7d, 0xaf, 0x99, 0x89, 0xed,
	0x22, 0x7f, 0x27, 0xc3, 0x52, 0x19, 0x34, 0xdd, 0x90, 0x0a, 0x2a, 0xb2, 0x79, 0x31, 0x15, 0x32,
	0xa4, 0xdd, 0x48, 0x52, 0xee, 0x67, 0x78, 0x9c, 0x1c, 0x34, 0x3d, 0xde, 0xcf, 0x30, 0x9c, 0x1e,
	0x34, 0x45, 0x0f, 0x89, 0xed, 0xec, 0x74, 0x5e, 0x1b, 0x34, 0x85, 0x44, 0x3b, 0x99, 0xc6, 0xfa,
	0xef, 0x79, 0x50, 0xb8, 0xee, 0xba, 0x3c, 0xf2, 0x25, 0xdc, 0x00, 0xa5, 0x2e, 0x12, 0xc4, 0x41,
	0xb1, 0x5c, 0xce, 0xad, 0xe4, 0xce, 0x17, 0x2f, 0x9f, 0x6d, 0x4c, 0x74, 0x61, 0xd0, 0x50, 0xef,
	0xde, 0xe8, 0x5f, 0x6a, 0xb4, 0x91, 0x20, 0x06, 0xd8, 0xb1, 0xec, 0x62, 0x77, 0x2c, 0xc2, 0x3e,
	0xa8, 0xb8, 0xdc, 0x97, 0xd4, 0x8f, 0x78, 0x24, 0x1c, 0x53, 0xa7, 0x94, 0xf5, 0x90, 0x66, 0x7d,
	0x37, 0x8b, 0x35, 0xf6, 0x54, 0xec, 0x6b, 0x29, 0xfe, 0x6e, 0xac, 0x1c, 0x87, 0x2a, 0xbb, 0x07,
	0xd8, 0x20, 0x03, 0x27, 0x31, 0xe9, 0xa1, 0x21, 0xc1, 0x53, 0x41, 0xe7, 0x74, 0xd0, 0x2b, 0xb3,
	0x83, 0xae, 0xc7, 0xe0, 0xa9, 0x88, 0x27, 0x70, 0x96, 0x01, 0x06, 0xa0, 0x1c, 0x90, 0x90, 0x72,
	0x4c, 0xdd, 0xa9, 0x78, 0x79, 0x1d, 0xef, 0xea, 0xec, 0x78, 0xb7, 0x0c, 0x7a, 0x2a, 0xe0, 0xff,
	0x83, 0x4c, 0x0b, 0xfc, 0x04, 0x2c, 0x31, 0x8e, 0xa3, 0xde, 0xb8, 0x45, 0x87, 0x75, 0x9c, 0xd7,
	0xb3, 0x5b, 0x74, 0x53, 0xfb, 0x8e, 0x69, 0x17, 0xd9, 0xa4, 0xa2, 0x75, 0xed, 0xc9, 0xa3, 0xd5,
	0x77, 0x2e, 0x78, 0x54, 0x6e, 0x47, 0xdd, 0x86, 0xcb, 0x99, 0xb9, 0x3b, 0xc9, 0x7d, 0x12, 0x78,
	0xa7, 0x69, 0x46, 0x9d, 0x0c, 0x02, 0x1e, 0x4a, 0x82, 0x1b, 0x06, 0xda, 0x3e, 0x0c, 0xe6, 0x44,
	0xc4, 0xea, 0x0f, 0x72, 0xa0, 0x78, 0x3b, 0x44, 0xbe, 0x40, 0xae, 0x1a, 0x59, 0xf8, 0x01, 0xc8,
	0xab, 0x39, 0x30, 0x83, 0x73, 0xba, 0x31, 0x75, 0x7d, 0x1b, 0x5b, 0x12, 0xdf, 0x1e, 0xa8, 0xd1,
	0x69, 0x97, 0x1e, 0x8f, 0x6a, 0xd6, 0xd3, 0x51, 0x2d, 0xf7, 0x7c, 0x54, 0xb3, 0x6c, 0x8d, 0x83,
	0x57, 0x41, 0x9e, 0x09, 0x4f, 0x94, 0x0f, 0xad, 0xcc, 0x9d, 0x2f, 0x5e, 0xae, 0x64, 0xe0, 0x6f,
	0x12, 0x21, 0x90, 0x47, 0xda, 0xf9, 0xc7, 0x1a, 0xa5, 0xbc, 0x5b, 0xf9, 0x9f, 0x1e, 0xd6, 0xac,
	0xfa, 0xcf, 0x45, 0x50, 0x30, 0x56, 0xd8, 0x02, 0x47, 0x98, 0xf0, 0x1c, 0x41, 0x7c, 0x6c, 0x72,
	0x39, 0xb3, 0xb7, 0x42, 0xea, 0x7a, 0x6a, 0x3a, 0xe1, 0x6d, 0x11, 0x1f, 0x77, 0x2c, 0xbb, 0xc0,
	0xe2, 0x23, 0xfc, 0x08, 0x2c, 0x29, 0x2c, 0x8b, 0x7a, 0x92, 0xc6, 0x0c, 0xf1, 0xc0, 0xd6, 0x0f,
	0x64, 0xb8, 0xa9, 0x5c, 0x0d, 0x4d, 0x89, 0x4d, 0xc8, 0xf0, 0x6b, 0x70, 0x5c, 0x71, 0xf5, 0x49,
	0x48, 0xef, 0x0d, 0x1d, 0xea, 0xf7, 0x51, 0x48, 0x51, 0x3a, 0x8d, 0x17, 0xf6, 0x32, 0xc6, 0x1f,
	0x06, 0xc3, 0x79, 0x57, 0x43, 0x36, 0x13, 0x44, 0xc7, 0xb2, 0x21, 0x9b, 0xd2, 0x42, 0x1f, 0x94,
	0xe3, 0xf7, 0x94, 0xce, 0x7d, 0x2a, 0xb7, 0x71, 0x88, 0xee, 0x3b, 0x08, 0xe3, 0x90, 0x08, 0x61,
	0x26, 0x70, 0xdf, 0xc4, 0x4f, 0x7e, 0x60, 0xd2, 0xf7, 0x97, 0x9f, 0x1b, 0xec, 0xf5, 0x18, 0xaa,
	0x26, 0x9e, 0x65, 0x19, 0xe0, 0xf7, 0xe0, 0x8c, 0x8a, 0x97, 0xc6, 0xc2, 0xa4, 0x47, 0x3c, 0x24,
	0x79, 0xe8, 0x84, 0xe4, 0x3e, 0x0a, 0xb1, 0x19, 0xc7, 0xf7, 0x5e, 0x1a, 0x34, 0x21, 0x5e, 0x4f,
	0x08, 0x6c, 0x8d, 0xef, 0x58, 0x76, 0x85, 0x1d, 0x68, 0x85, 0x0f, 0x72, 0xe0, 0xec, 0x9e, 0xf8,
	0x7d, 0xd4, 0xa3, 0x58, 0xc7, 0x77, 0x39, 0x63, 0x54, 0x08, 0xca, 0xfd, 0xf2, 0xbc, 0xce, 0xe1,
	0xfd, 0x57, 0xce, 0xe1, 0x6e, 0x42, 0xb2, 0x96, 0x72, 0x74, 0x2c, 0xbb, 0xca, 0x66, 0x7a, 0xc0,
	0x1d, 0x70, 0x52, 0xa5, 0x72, 0x2f, 0xf2, 0xb1, 0x0e, 0x1e, 0xf9, 0x54, 0x0e, 0x9d, 0x80, 0xf3,
	0x5e, 0xb9, 0xa0, 0x13, 0xb8, 0xfc, 0xd2, 0x04, 0x36, 0x22, 0x1f, 0xaf, 0x25, 0xd0, 0x5b, 0x9c,
	0xf7, 0x3a, 0x96, 0xad, 0xe6, 0x65, 0x4a, 0x0f, 0xaf, 0xc5, 0xf3, 0xdc, 0xe7, 0x92, 0x94, 0xc1,
	0xf4, 0xdd, 0x1a, 0x34, 0x3c, 0xde, 0x4f, 0x06, 0x87, 0x4b, 0x62, 0xc6, 0x59, 0x1d, 0x61, 0x1b,
	0x14, 0x15, 0x14, 0x93, 0x80, 0x0b, 0x2a, 0xcb, 0x45, 0x8d, 0xae, 0x1d, 0x84, 0x5e, 0x8f, 0xdd,
	0x3a, 0x96, 0x0d, 0x58, 0x2a, 0xc1, 0x75, 0xa0, 0x24, 0x27, 0xf2, 0xbf, 0x41, 0xb4, 0x57, 0x2e,
	0x65, 0x7d, 0x72, 0x92, 0xf5, 0x63, 0x78, 0xee, 0x68, 0xd7, 0x8e, 0x65, 0x2f, 0xb0, 0x44, 0x80,
	0x4e, 0x7c, 0x19, 0xdc, 0x90, 0x20, 0x49, 0xc6, 0xad, 0x2b, 0x2f, 0x6a, 0xbe, 0x8b, 0xfb, 0xf8,
	0xe2, 0x85, 0x65, 0xe8, 0xd6, 0x34, 0x26, 0x6d, 0x83, 0xb9, 0x0d, 0xfb, 0xb4, 0xf0, 0x0b, 0xa0,
	0xb4, 0x0e, 0xc1, 0x54, 0x4e, 0xd0, 0x2f, 0x69, 0xfa, 0x37, 0x67, 0xd1, 0xdf, 0xc0, 0x54, 0x4e,
	0x92, 0x1f, 0x63, 0xfb, 0x74, 0x70, 0x13, 0x94, 0xe2, 0x2a, 0xea, 0x81, 0x24, 0xe5, 0xa3, 0x9a,
	0xf4, 0x8d, 0x59, 0xa4, 0x66, 0x78, 0x55, 0x33, 0x8a, 0x6c, 0x2c, 0x26, 0x65, 0xe8, 0x12, 0x8f,
	0xfa, 0x4e, 0x48, 0x52, 0xca, 0x63, 0x2f, 0x2f, 0x43, 0x5b, 0x61, 0xec, 0x14, 0x62, 0xca, 0xb0,
	0x4f, 0x0b, 0x3f, 0x8b, 0x3f, 0x60, 0x91, 0x9f, 0x52, 0x2f, 0x6b, 0xea, 0x73, 0xb3, 0xa8, 0xef,
	0xf8, 0x13, 0xac, 0x8b, 0x6c, 0x52, 0xd1, 0xba, 0xf0, 0xe4, 0xd1, 0xea, 0xb9, 0x99, 0x6b, 0x22,
	0xfe, 0xa1, 0x50, 0x19, 0x9a, 0xc5, 0xf0, 0x63, 0x0e, 0x14, 0xb6, 0xa8, 0xe7, 0xaf, 0x73, 0x17,
	0xae, 0xed, 0x59, 0x0a, 0x67, 0xb3, 0x97, 0x82, 0x71, 0xfe, 0x6f, 0x37, 0x43, 0xfd, 0x87, 0x1c,
	0x98, 0xdf, 0x92, 0x78, 0x83, 0x10, 0xf8, 0x15, 0x98, 0x47, 0xcc, 0xfc, 0xd5, 0x28, 0x8a, 0xff,
	0x4d, 0x52, 0xe8, 0x1f, 0x0e, 0xea, 0xb7, 0xdf, 0x56, 0xd8, 0xdf, 0xfe, 0xac, 0x9d, 0x7f, 0x85,
	0xb7, 0x55, 0x00, 0x61, 0x1b, 0x52, 0x78, 0x0c, 0xcc, 0x79, 0x48, 0xe8, 0x55, 0x91, 0xb7, 0xd5,
	0xb1, 0x75, 0x44, 0x6d, 0xa5, 0xbf, 0x1f, 0xd6, 0x72, 0xf5, 0xef, 0x40, 0xc9, 0xbc, 0x21, 0x92,
	0x51, 0x48, 0xe0, 0x06, 0x28, 0x04, 0x51, 0xd7, 0xd9, 0x21, 0x43, 0x5d, 0x93, 0x52, 0x7b, 0xf5,
	0xf9, 0xa8, 0x76, 0x3c, 0x88, 0xba, 0x3d, 0xea, 0x2a, 0xed, 0x5b, 0x9c, 0x51, 0x49, 0x58, 0x20,
	0x87, 0x2f, 0x46, 0xb5, 0xe5, 0x21, 0x62, 0xbd, 0x56, 0x7d, 0x6c, 0xad, 0xdb, 0xf3, 0x41, 0xd4,
	0xfd, 0x98, 0x0c, 0xe1, 0x69, 0xb0, 0x20, 0x12, 0x52, 0x1d, 0xb9, 0x64, 0x8f, 0x15, 0x66, 0x2b,
	0xfe, 0x9a, 0x03, 0x0b, 0xe9, 0xce, 0x85, 0x97, 0xc0, 0xdc, 0x3d, 0x92, 0x74, 0xe2, 0x54, 0x76,
	0x27, 0x36, 0x48, 0x52, 0x43, 0xe5, 0x0b, 0x6f, 0x00, 0x90, 0x72, 0x26, 0xe5, 0xaf, 0x1d, 0xdc,
	0x43, 0xed, 0x67, 0xf0, 0x13, 0x40, 0x08, 0x41, 0x9e, 0x11, 0xc6, 0xf5, 0xe6, 0x5b, 0xb0, 0xf5,
	0xb9, 0xfe, 0x4f, 0x0e, 0x2c, 0xed, 0x6d, 0xbd, 0xfa, 0xd0, 0xb9, 0xdb, 0x88, 0xfa, 0x0e, 0x8d,
	0x17, 0xf7, 0x42, 0xbb, 0xba, 0x3b, 0xaa, 0x15, 0xd6, 0x94, 0x6e, 0x73, 0xfd, 0xc5, 0xa8, 0x76,
	0x34, 0x2e, 0x47, 0xe2, 0x54, 0xb7, 0x0b, 0xfa, 0xb8, 0x89, 0xe1, 0x87, 0x60, 0xc9, 0xfc, 0x14,
	0x39, 0x7e, 0xc4, 0xba, 0x24, 0x8c, 0x9b, 0xd1, 0x3e, 0xf5, 0x62, 0x54, 0x3b, 0x11, 0xa3, 0xf6,
	0xda, 0xeb, 0xf6, 0xa2, 0x51, 0x7c, 0xaa, 0x65, 0x58, 0x01, 0x47, 0x04, 0xf9, 0x36, 0x22, 0xbe,
	0x4b, 0x74, 0x9e, 0x79, 0x3b, 0x95, 0xd3, 0xfc, 0xf3, 0xe3, 0xfc, 0x93, 0x6a, 0x1e, 0x7e, 0xf5,
	0x6a, 0xb6, 0x5b, 0x8f, 0x77, 0xab, 0xb9, 0xa7, 0xbb, 0xd5, 0xdc, 0x5f, 0xbb, 0xd5, 0xdc, 0x2f,
	0xcf, 0xaa, 0xd6, 0xd3, 0x67, 0x55, 0xeb, 0x8f, 0x67, 0x55, 0xeb, 0xcb, 0x95, 0x99, 0x23, 0x27,
	0x24, 0xee, 0xce, 0xeb, 0x1f, 0xf6, 0x2b, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x5e, 0x75, 0x49,
	0x67, 0x26, 0x0d, 0x00, 0x00,
}

func (this *StdFee) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StdFee)
	if !ok {
		that2, ok := that.(StdFee)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Amount) != len(that1.Amount) {
		return false
	}
	for i := range this.Amount {
		if !this.Amount[i].Equal(&that1.Amount[i]) {
			return false
		}
	}
	if this.Gas != that1.Gas {
		return false
	}
	return true
}
func (this *Account) GetAccount() github_com_cosmos_cosmos_sdk_x_auth_exported.Account {
	if x := this.GetBaseAccount(); x != nil {
		return x
	}
	if x := this.GetContinuousVestingAccount(); x != nil {
		return x
	}
	if x := this.GetDelayedVestingAccount(); x != nil {
		return x
	}
	if x := this.GetPeriodicVestingAccount(); x != nil {
		return x
	}
	if x := this.GetModuleAccount(); x != nil {
		return x
	}
	return nil
}

func (this *Account) SetAccount(value github_com_cosmos_cosmos_sdk_x_auth_exported.Account) error {
	if value == nil {
		this.Sum = nil
		return nil
	}
	switch vt := value.(type) {
	case *types.BaseAccount:
		this.Sum = &Account_BaseAccount{vt}
		return nil
	case *types1.ContinuousVestingAccount:
		this.Sum = &Account_ContinuousVestingAccount{vt}
		return nil
	case *types1.DelayedVestingAccount:
		this.Sum = &Account_DelayedVestingAccount{vt}
		return nil
	case *types1.PeriodicVestingAccount:
		this.Sum = &Account_PeriodicVestingAccount{vt}
		return nil
	case *types.ModuleAccount:
		this.Sum = &Account_ModuleAccount{vt}
		return nil
	}
	return fmt.Errorf("can't encode value of type %T as message Account", value)
}

func (this *Message) GetMsg() github_com_cosmos_cosmos_sdk_types.Msg {
	if x := this.GetMsgSend(); x != nil {
		return x
	}
	if x := this.GetMsgMultiSend(); x != nil {
		return x
	}
	if x := this.GetMsgVerifyInvariant(); x != nil {
		return x
	}
	if x := this.GetMsgSetWithdrawAddress(); x != nil {
		return x
	}
	if x := this.GetMsgWithdrawDelegatorReward(); x != nil {
		return x
	}
	if x := this.GetMsgWithdrawValidatorCommission(); x != nil {
		return x
	}
	if x := this.GetMsgFundCommunityPool(); x != nil {
		return x
	}
	if x := this.GetMsgVote(); x != nil {
		return x
	}
	if x := this.GetMsgDeposit(); x != nil {
		return x
	}
	if x := this.GetMsgUnjail(); x != nil {
		return x
	}
	if x := this.GetMsgCreateValidator(); x != nil {
		return x
	}
	if x := this.GetMsgEditValidator(); x != nil {
		return x
	}
	if x := this.GetMsgDelegate(); x != nil {
		return x
	}
	if x := this.GetMsgBeginRedelegate(); x != nil {
		return x
	}
	if x := this.GetMsgUndelegate(); x != nil {
		return x
	}
	return nil
}

func (this *Message) SetMsg(value github_com_cosmos_cosmos_sdk_types.Msg) error {
	if value == nil {
		this.Sum = nil
		return nil
	}
	switch vt := value.(type) {
	case *types2.MsgSend:
		this.Sum = &Message_MsgSend{vt}
		return nil
	case types2.MsgSend:
		this.Sum = &Message_MsgSend{&vt}
		return nil
	case *types2.MsgMultiSend:
		this.Sum = &Message_MsgMultiSend{vt}
		return nil
	case types2.MsgMultiSend:
		this.Sum = &Message_MsgMultiSend{&vt}
		return nil
	case *types3.MsgVerifyInvariant:
		this.Sum = &Message_MsgVerifyInvariant{vt}
		return nil
	case types3.MsgVerifyInvariant:
		this.Sum = &Message_MsgVerifyInvariant{&vt}
		return nil
	case *types4.MsgSetWithdrawAddress:
		this.Sum = &Message_MsgSetWithdrawAddress{vt}
		return nil
	case types4.MsgSetWithdrawAddress:
		this.Sum = &Message_MsgSetWithdrawAddress{&vt}
		return nil
	case *types4.MsgWithdrawDelegatorReward:
		this.Sum = &Message_MsgWithdrawDelegatorReward{vt}
		return nil
	case types4.MsgWithdrawDelegatorReward:
		this.Sum = &Message_MsgWithdrawDelegatorReward{&vt}
		return nil
	case *types4.MsgWithdrawValidatorCommission:
		this.Sum = &Message_MsgWithdrawValidatorCommission{vt}
		return nil
	case types4.MsgWithdrawValidatorCommission:
		this.Sum = &Message_MsgWithdrawValidatorCommission{&vt}
		return nil
	case *types4.MsgFundCommunityPool:
		this.Sum = &Message_MsgFundCommunityPool{vt}
		return nil
	case types4.MsgFundCommunityPool:
		this.Sum = &Message_MsgFundCommunityPool{&vt}
		return nil
	case *types5.MsgVote:
		this.Sum = &Message_MsgVote{vt}
		return nil
	case types5.MsgVote:
		this.Sum = &Message_MsgVote{&vt}
		return nil
	case *types5.MsgDeposit:
		this.Sum = &Message_MsgDeposit{vt}
		return nil
	case types5.MsgDeposit:
		this.Sum = &Message_MsgDeposit{&vt}
		return nil
	case *types6.MsgUnjail:
		this.Sum = &Message_MsgUnjail{vt}
		return nil
	case types6.MsgUnjail:
		this.Sum = &Message_MsgUnjail{&vt}
		return nil
	case *types7.MsgCreateValidator:
		this.Sum = &Message_MsgCreateValidator{vt}
		return nil
	case types7.MsgCreateValidator:
		this.Sum = &Message_MsgCreateValidator{&vt}
		return nil
	case *types7.MsgEditValidator:
		this.Sum = &Message_MsgEditValidator{vt}
		return nil
	case types7.MsgEditValidator:
		this.Sum = &Message_MsgEditValidator{&vt}
		return nil
	case *types7.MsgDelegate:
		this.Sum = &Message_MsgDelegate{vt}
		return nil
	case types7.MsgDelegate:
		this.Sum = &Message_MsgDelegate{&vt}
		return nil
	case *types7.MsgBeginRedelegate:
		this.Sum = &Message_MsgBeginRedelegate{vt}
		return nil
	case types7.MsgBeginRedelegate:
		this.Sum = &Message_MsgBeginRedelegate{&vt}
		return nil
	case *types7.MsgUndelegate:
		this.Sum = &Message_MsgUndelegate{vt}
		return nil
	case types7.MsgUndelegate:
		this.Sum = &Message_MsgUndelegate{&vt}
		return nil
	}
	return fmt.Errorf("can't encode value of type %T as message Message", value)
}

func (m *Account) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Account) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Account) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sum != nil {
		{
			size := m.Sum.Size()
			i -= size
			if _, err := m.Sum.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Account_BaseAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Account_BaseAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BaseAccount != nil {
		{
			size, err := m.BaseAccount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCodec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *Account_ContinuousVestingAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Account_ContinuousVestingAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ContinuousVestingAccount != nil {
		{
			size, err := m.ContinuousVestingAccount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCodec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Account_DelayedVestingAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Account_DelayedVestingAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DelayedVestingAccount != nil {
		{
			size, err := m.DelayedVestingAccount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCodec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Account_PeriodicVestingAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Account_PeriodicVestingAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PeriodicVestingAccount != nil {
		{
			size, err := m.PeriodicVestingAccount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCodec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *Account_ModuleAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Account_ModuleAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ModuleAccount != nil {
		{
			size, err := m.ModuleAccount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCodec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *Transaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Transaction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Transaction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Msgs) > 0 {
		for iNdEx := len(m.Msgs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Msgs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCodec(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.StdTxBase.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCodec(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sum != nil {
		{
			size := m.Sum.Size()
			i -= size
			if _, err := m.Sum.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Message_MsgSend) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_MsgSend) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MsgSend != nil {
		{
			size, err := m.MsgSend.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCodec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *Message_MsgMultiSend) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_MsgMultiSend) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MsgMultiSend != nil {
		{
			size, err := m.MsgMultiSend.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCodec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Message_MsgVerifyInvariant) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_MsgVerifyInvariant) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MsgVerifyInvariant != nil {
		{
			size, err := m.MsgVerifyInvariant.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCodec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Message_MsgSetWithdrawAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_MsgSetWithdrawAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MsgSetWithdrawAddress != nil {
		{
			size, err := m.MsgSetWithdrawAddress.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCodec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *Message_MsgWithdrawDelegatorReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_MsgWithdrawDelegatorReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MsgWithdrawDelegatorReward != nil {
		{
			size, err := m.MsgWithdrawDelegatorReward.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCodec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *Message_MsgWithdrawValidatorCommission) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_MsgWithdrawValidatorCommission) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MsgWithdrawValidatorCommission != nil {
		{
			size, err := m.MsgWithdrawValidatorCommission.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCodec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *Message_MsgFundCommunityPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_MsgFundCommunityPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MsgFundCommunityPool != nil {
		{
			size, err := m.MsgFundCommunityPool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCodec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *Message_MsgVote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_MsgVote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MsgVote != nil {
		{
			size, err := m.MsgVote.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCodec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *Message_MsgDeposit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_MsgDeposit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MsgDeposit != nil {
		{
			size, err := m.MsgDeposit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCodec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *Message_MsgUnjail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_MsgUnjail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MsgUnjail != nil {
		{
			size, err := m.MsgUnjail.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCodec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *Message_MsgCreateValidator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_MsgCreateValidator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MsgCreateValidator != nil {
		{
			size, err := m.MsgCreateValidator.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCodec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *Message_MsgEditValidator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_MsgEditValidator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MsgEditValidator != nil {
		{
			size, err := m.MsgEditValidator.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCodec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *Message_MsgDelegate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_MsgDelegate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MsgDelegate != nil {
		{
			size, err := m.MsgDelegate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCodec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *Message_MsgBeginRedelegate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_MsgBeginRedelegate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MsgBeginRedelegate != nil {
		{
			size, err := m.MsgBeginRedelegate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCodec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *Message_MsgUndelegate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_MsgUndelegate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MsgUndelegate != nil {
		{
			size, err := m.MsgUndelegate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCodec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *SignDoc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignDoc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignDoc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Msgs) > 0 {
		for iNdEx := len(m.Msgs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Msgs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCodec(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.StdSignDocBase.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCodec(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *StdFee) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StdFee) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StdFee) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Gas != 0 {
		i = encodeVarintCodec(dAtA, i, uint64(m.Gas))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCodec(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *StdSignature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StdSignature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StdSignature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintCodec(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PubKey) > 0 {
		i -= len(m.PubKey)
		copy(dAtA[i:], m.PubKey)
		i = encodeVarintCodec(dAtA, i, uint64(len(m.PubKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StdTxBase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StdTxBase) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StdTxBase) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Memo) > 0 {
		i -= len(m.Memo)
		copy(dAtA[i:], m.Memo)
		i = encodeVarintCodec(dAtA, i, uint64(len(m.Memo)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Signatures) > 0 {
		for iNdEx := len(m.Signatures) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Signatures[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCodec(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Fee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCodec(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *StdSignDocBase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StdSignDocBase) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StdSignDocBase) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Fee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCodec(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.Memo) > 0 {
		i -= len(m.Memo)
		copy(dAtA[i:], m.Memo)
		i = encodeVarintCodec(dAtA, i, uint64(len(m.Memo)))
		i--
		dAtA[i] = 0x22
	}
	if m.Sequence != 0 {
		i = encodeVarintCodec(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x18
	}
	if m.AccountNumber != 0 {
		i = encodeVarintCodec(dAtA, i, uint64(m.AccountNumber))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChainID) > 0 {
		i -= len(m.ChainID)
		copy(dAtA[i:], m.ChainID)
		i = encodeVarintCodec(dAtA, i, uint64(len(m.ChainID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCodec(dAtA []byte, offset int, v uint64) int {
	offset -= sovCodec(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Account) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sum != nil {
		n += m.Sum.Size()
	}
	return n
}

func (m *Account_BaseAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseAccount != nil {
		l = m.BaseAccount.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Account_ContinuousVestingAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ContinuousVestingAccount != nil {
		l = m.ContinuousVestingAccount.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Account_DelayedVestingAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DelayedVestingAccount != nil {
		l = m.DelayedVestingAccount.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Account_PeriodicVestingAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PeriodicVestingAccount != nil {
		l = m.PeriodicVestingAccount.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Account_ModuleAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ModuleAccount != nil {
		l = m.ModuleAccount.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Transaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.StdTxBase.Size()
	n += 1 + l + sovCodec(uint64(l))
	if len(m.Msgs) > 0 {
		for _, e := range m.Msgs {
			l = e.Size()
			n += 1 + l + sovCodec(uint64(l))
		}
	}
	return n
}

func (m *Message) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sum != nil {
		n += m.Sum.Size()
	}
	return n
}

func (m *Message_MsgSend) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgSend != nil {
		l = m.MsgSend.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Message_MsgMultiSend) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgMultiSend != nil {
		l = m.MsgMultiSend.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Message_MsgVerifyInvariant) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgVerifyInvariant != nil {
		l = m.MsgVerifyInvariant.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Message_MsgSetWithdrawAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgSetWithdrawAddress != nil {
		l = m.MsgSetWithdrawAddress.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Message_MsgWithdrawDelegatorReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgWithdrawDelegatorReward != nil {
		l = m.MsgWithdrawDelegatorReward.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Message_MsgWithdrawValidatorCommission) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgWithdrawValidatorCommission != nil {
		l = m.MsgWithdrawValidatorCommission.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Message_MsgFundCommunityPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgFundCommunityPool != nil {
		l = m.MsgFundCommunityPool.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Message_MsgVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgVote != nil {
		l = m.MsgVote.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Message_MsgDeposit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgDeposit != nil {
		l = m.MsgDeposit.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Message_MsgUnjail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgUnjail != nil {
		l = m.MsgUnjail.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Message_MsgCreateValidator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgCreateValidator != nil {
		l = m.MsgCreateValidator.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Message_MsgEditValidator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgEditValidator != nil {
		l = m.MsgEditValidator.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Message_MsgDelegate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgDelegate != nil {
		l = m.MsgDelegate.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Message_MsgBeginRedelegate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgBeginRedelegate != nil {
		l = m.MsgBeginRedelegate.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Message_MsgUndelegate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgUndelegate != nil {
		l = m.MsgUndelegate.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *SignDoc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.StdSignDocBase.Size()
	n += 1 + l + sovCodec(uint64(l))
	if len(m.Msgs) > 0 {
		for _, e := range m.Msgs {
			l = e.Size()
			n += 1 + l + sovCodec(uint64(l))
		}
	}
	return n
}

func (m *StdFee) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovCodec(uint64(l))
		}
	}
	if m.Gas != 0 {
		n += 1 + sovCodec(uint64(m.Gas))
	}
	return n
}

func (m *StdSignature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovCodec(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}

func (m *StdTxBase) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Fee.Size()
	n += 1 + l + sovCodec(uint64(l))
	if len(m.Signatures) > 0 {
		for _, e := range m.Signatures {
			l = e.Size()
			n += 1 + l + sovCodec(uint64(l))
		}
	}
	l = len(m.Memo)
	if l > 0 {
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}

func (m *StdSignDocBase) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovCodec(uint64(l))
	}
	if m.AccountNumber != 0 {
		n += 1 + sovCodec(uint64(m.AccountNumber))
	}
	if m.Sequence != 0 {
		n += 1 + sovCodec(uint64(m.Sequence))
	}
	l = len(m.Memo)
	if l > 0 {
		n += 1 + l + sovCodec(uint64(l))
	}
	l = m.Fee.Size()
	n += 1 + l + sovCodec(uint64(l))
	return n
}

func sovCodec(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCodec(x uint64) (n int) {
	return sovCodec(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Account) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Account: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Account: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseAccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.BaseAccount{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Account_BaseAccount{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContinuousVestingAccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types1.ContinuousVestingAccount{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Account_ContinuousVestingAccount{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelayedVestingAccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types1.DelayedVestingAccount{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Account_DelayedVestingAccount{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeriodicVestingAccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types1.PeriodicVestingAccount{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Account_PeriodicVestingAccount{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleAccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.ModuleAccount{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Account_ModuleAccount{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCodec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Transaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Transaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Transaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StdTxBase", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StdTxBase.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msgs = append(m.Msgs, Message{})
			if err := m.Msgs[len(m.Msgs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCodec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgSend", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types2.MsgSend{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Message_MsgSend{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgMultiSend", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types2.MsgMultiSend{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Message_MsgMultiSend{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgVerifyInvariant", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types3.MsgVerifyInvariant{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Message_MsgVerifyInvariant{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgSetWithdrawAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types4.MsgSetWithdrawAddress{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Message_MsgSetWithdrawAddress{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgWithdrawDelegatorReward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types4.MsgWithdrawDelegatorReward{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Message_MsgWithdrawDelegatorReward{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgWithdrawValidatorCommission", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types4.MsgWithdrawValidatorCommission{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Message_MsgWithdrawValidatorCommission{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgFundCommunityPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types4.MsgFundCommunityPool{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Message_MsgFundCommunityPool{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgVote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types5.MsgVote{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Message_MsgVote{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgDeposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types5.MsgDeposit{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Message_MsgDeposit{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgUnjail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types6.MsgUnjail{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Message_MsgUnjail{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgCreateValidator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types7.MsgCreateValidator{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Message_MsgCreateValidator{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgEditValidator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types7.MsgEditValidator{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Message_MsgEditValidator{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgDelegate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types7.MsgDelegate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Message_MsgDelegate{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgBeginRedelegate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types7.MsgBeginRedelegate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Message_MsgBeginRedelegate{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgUndelegate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types7.MsgUndelegate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Message_MsgUndelegate{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCodec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignDoc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignDoc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignDoc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StdSignDocBase", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StdSignDocBase.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msgs = append(m.Msgs, Message{})
			if err := m.Msgs[len(m.Msgs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCodec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StdFee) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StdFee: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StdFee: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types8.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gas", wireType)
			}
			m.Gas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gas |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCodec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StdSignature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StdSignature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StdSignature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = append(m.PubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PubKey == nil {
				m.PubKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCodec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StdTxBase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StdTxBase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StdTxBase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Fee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signatures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signatures = append(m.Signatures, StdSignature{})
			if err := m.Signatures[len(m.Signatures)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCodec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StdSignDocBase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StdSignDocBase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StdSignDocBase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountNumber", wireType)
			}
			m.AccountNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Fee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCodec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCodec(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCodec
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCodec
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCodec
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCodec        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCodec          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCodec = fmt.Errorf("proto: unexpected end of group")
)
