package store

import (
	"math"
	"testing"

	sdk "github.com/cosmos/cosmos-sdk/types"
	"github.com/stretchr/testify/require"
)

func TestPrefixKey(t *testing.T) {
	out1 := PrefixKeyString("fooprefix")
	require.Equal(t, "fooprefix", string(out1))
	out2 := PrefixKeyString("fooprefix", []byte("sub1"), []byte("sub2"))
	require.Equal(t, "fooprefix/sub1/sub2", string(out2))
	out3 := PrefixKeyString("fooprefix", []byte{}, []byte("sub1"))
	require.Equal(t, "fooprefix/sub1", string(out3))
	out4 := PrefixKeyBytes()
	require.Equal(t, 0, len(out4))
}

func TestUint64AndInt64Subkey(t *testing.T) {
	tests := []struct {
		in  int64
		out []byte
	}{
		{
			0,
			[]byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		},
		{
			1000,
			[]byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe8},
		},
		{
			math.MaxInt64,
			[]byte{0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
		},
	}

	for _, tt := range tests {
		require.Equal(t, tt.out, Int64Subkey(tt.in))
		require.Equal(t, tt.out, Uint64Subkey(uint64(tt.in)))
	}

	require.Equal(t, []byte{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}, Uint64Subkey(math.MaxUint64))
}

func TestInt64Subkey_Panics(t *testing.T) {
	require.Panics(t, func() {
		Int64Subkey(-1)
	})
	require.Panics(t, func() {
		Int64Subkey(-10)
	})
}

func TestSDKUintSubkey(t *testing.T) {
	tests := []struct {
		in  sdk.Uint
		out []byte
	}{
		{
			sdk.ZeroUint(),
			[]byte{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
		},
		{
			sdk.OneUint(),
			[]byte{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1},
		},
		{
			sdk.NewUint(1234567890),
			[]byte{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x49, 0x96, 0x2, 0xd2},
		},
	}

	for _, tt := range tests {
		require.Equal(t, tt.out, SDKUintSubkey(tt.in))
	}
}
