// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmos/store/streaming/abci/grpc.proto

package abci

import (
	context "context"
	types1 "cosmossdk.io/store/types"
	fmt "fmt"
	types "github.com/cometbft/cometbft/abci/types"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ListenBeginBlockRequest is the request type for the ListenBeginBlock RPC method
type ListenBeginBlockRequest struct {
	Req *types.RequestBeginBlock  `protobuf:"bytes,1,opt,name=req,proto3" json:"req,omitempty"`
	Res *types.ResponseBeginBlock `protobuf:"bytes,2,opt,name=res,proto3" json:"res,omitempty"`
}

func (m *ListenBeginBlockRequest) Reset()         { *m = ListenBeginBlockRequest{} }
func (m *ListenBeginBlockRequest) String() string { return proto.CompactTextString(m) }
func (*ListenBeginBlockRequest) ProtoMessage()    {}
func (*ListenBeginBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b98083eb9315fb6, []int{0}
}
func (m *ListenBeginBlockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListenBeginBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListenBeginBlockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListenBeginBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListenBeginBlockRequest.Merge(m, src)
}
func (m *ListenBeginBlockRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListenBeginBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListenBeginBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListenBeginBlockRequest proto.InternalMessageInfo

func (m *ListenBeginBlockRequest) GetReq() *types.RequestBeginBlock {
	if m != nil {
		return m.Req
	}
	return nil
}

func (m *ListenBeginBlockRequest) GetRes() *types.ResponseBeginBlock {
	if m != nil {
		return m.Res
	}
	return nil
}

// ListenBeginBlockResponse is the response type for the ListenBeginBlock RPC method
type ListenBeginBlockResponse struct {
}

func (m *ListenBeginBlockResponse) Reset()         { *m = ListenBeginBlockResponse{} }
func (m *ListenBeginBlockResponse) String() string { return proto.CompactTextString(m) }
func (*ListenBeginBlockResponse) ProtoMessage()    {}
func (*ListenBeginBlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b98083eb9315fb6, []int{1}
}
func (m *ListenBeginBlockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListenBeginBlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListenBeginBlockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListenBeginBlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListenBeginBlockResponse.Merge(m, src)
}
func (m *ListenBeginBlockResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListenBeginBlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListenBeginBlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListenBeginBlockResponse proto.InternalMessageInfo

// ListenEndBlockRequest is the request type for the ListenEndBlock RPC method
type ListenEndBlockRequest struct {
	Req *types.RequestEndBlock  `protobuf:"bytes,1,opt,name=req,proto3" json:"req,omitempty"`
	Res *types.ResponseEndBlock `protobuf:"bytes,2,opt,name=res,proto3" json:"res,omitempty"`
}

func (m *ListenEndBlockRequest) Reset()         { *m = ListenEndBlockRequest{} }
func (m *ListenEndBlockRequest) String() string { return proto.CompactTextString(m) }
func (*ListenEndBlockRequest) ProtoMessage()    {}
func (*ListenEndBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b98083eb9315fb6, []int{2}
}
func (m *ListenEndBlockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListenEndBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListenEndBlockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListenEndBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListenEndBlockRequest.Merge(m, src)
}
func (m *ListenEndBlockRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListenEndBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListenEndBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListenEndBlockRequest proto.InternalMessageInfo

func (m *ListenEndBlockRequest) GetReq() *types.RequestEndBlock {
	if m != nil {
		return m.Req
	}
	return nil
}

func (m *ListenEndBlockRequest) GetRes() *types.ResponseEndBlock {
	if m != nil {
		return m.Res
	}
	return nil
}

// ListenEndBlockResponse is the response type for the ListenEndBlock RPC method
type ListenEndBlockResponse struct {
}

func (m *ListenEndBlockResponse) Reset()         { *m = ListenEndBlockResponse{} }
func (m *ListenEndBlockResponse) String() string { return proto.CompactTextString(m) }
func (*ListenEndBlockResponse) ProtoMessage()    {}
func (*ListenEndBlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b98083eb9315fb6, []int{3}
}
func (m *ListenEndBlockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListenEndBlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListenEndBlockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListenEndBlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListenEndBlockResponse.Merge(m, src)
}
func (m *ListenEndBlockResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListenEndBlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListenEndBlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListenEndBlockResponse proto.InternalMessageInfo

// ListenDeliverTxRequest is the request type for the ListenDeliverTx RPC method
type ListenDeliverTxRequest struct {
	// explicitly pass in block height as neither RequestDeliverTx or ResponseDeliverTx contain it
	BlockHeight int64                    `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	Req         *types.RequestDeliverTx  `protobuf:"bytes,2,opt,name=req,proto3" json:"req,omitempty"`
	Res         *types.ResponseDeliverTx `protobuf:"bytes,3,opt,name=res,proto3" json:"res,omitempty"`
}

func (m *ListenDeliverTxRequest) Reset()         { *m = ListenDeliverTxRequest{} }
func (m *ListenDeliverTxRequest) String() string { return proto.CompactTextString(m) }
func (*ListenDeliverTxRequest) ProtoMessage()    {}
func (*ListenDeliverTxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b98083eb9315fb6, []int{4}
}
func (m *ListenDeliverTxRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListenDeliverTxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListenDeliverTxRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListenDeliverTxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListenDeliverTxRequest.Merge(m, src)
}
func (m *ListenDeliverTxRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListenDeliverTxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListenDeliverTxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListenDeliverTxRequest proto.InternalMessageInfo

func (m *ListenDeliverTxRequest) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *ListenDeliverTxRequest) GetReq() *types.RequestDeliverTx {
	if m != nil {
		return m.Req
	}
	return nil
}

func (m *ListenDeliverTxRequest) GetRes() *types.ResponseDeliverTx {
	if m != nil {
		return m.Res
	}
	return nil
}

// ListenDeliverTxResponse is the response type for the ListenDeliverTx RPC method
type ListenDeliverTxResponse struct {
}

func (m *ListenDeliverTxResponse) Reset()         { *m = ListenDeliverTxResponse{} }
func (m *ListenDeliverTxResponse) String() string { return proto.CompactTextString(m) }
func (*ListenDeliverTxResponse) ProtoMessage()    {}
func (*ListenDeliverTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b98083eb9315fb6, []int{5}
}
func (m *ListenDeliverTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListenDeliverTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListenDeliverTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListenDeliverTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListenDeliverTxResponse.Merge(m, src)
}
func (m *ListenDeliverTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListenDeliverTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListenDeliverTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListenDeliverTxResponse proto.InternalMessageInfo

// ListenCommitRequest is the request type for the ListenCommit RPC method
type ListenCommitRequest struct {
	// explicitly pass in block height as ResponseCommit does not contain this info
	BlockHeight int64                 `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	Res         *types.ResponseCommit `protobuf:"bytes,2,opt,name=res,proto3" json:"res,omitempty"`
	ChangeSet   []*types1.StoreKVPair `protobuf:"bytes,3,rep,name=change_set,json=changeSet,proto3" json:"change_set,omitempty"`
}

func (m *ListenCommitRequest) Reset()         { *m = ListenCommitRequest{} }
func (m *ListenCommitRequest) String() string { return proto.CompactTextString(m) }
func (*ListenCommitRequest) ProtoMessage()    {}
func (*ListenCommitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b98083eb9315fb6, []int{6}
}
func (m *ListenCommitRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListenCommitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListenCommitRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListenCommitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListenCommitRequest.Merge(m, src)
}
func (m *ListenCommitRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListenCommitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListenCommitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListenCommitRequest proto.InternalMessageInfo

func (m *ListenCommitRequest) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *ListenCommitRequest) GetRes() *types.ResponseCommit {
	if m != nil {
		return m.Res
	}
	return nil
}

func (m *ListenCommitRequest) GetChangeSet() []*types1.StoreKVPair {
	if m != nil {
		return m.ChangeSet
	}
	return nil
}

// ListenCommitResponse is the response type for the ListenCommit RPC method
type ListenCommitResponse struct {
}

func (m *ListenCommitResponse) Reset()         { *m = ListenCommitResponse{} }
func (m *ListenCommitResponse) String() string { return proto.CompactTextString(m) }
func (*ListenCommitResponse) ProtoMessage()    {}
func (*ListenCommitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b98083eb9315fb6, []int{7}
}
func (m *ListenCommitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListenCommitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListenCommitResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListenCommitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListenCommitResponse.Merge(m, src)
}
func (m *ListenCommitResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListenCommitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListenCommitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListenCommitResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ListenBeginBlockRequest)(nil), "cosmos.store.streaming.abci.ListenBeginBlockRequest")
	proto.RegisterType((*ListenBeginBlockResponse)(nil), "cosmos.store.streaming.abci.ListenBeginBlockResponse")
	proto.RegisterType((*ListenEndBlockRequest)(nil), "cosmos.store.streaming.abci.ListenEndBlockRequest")
	proto.RegisterType((*ListenEndBlockResponse)(nil), "cosmos.store.streaming.abci.ListenEndBlockResponse")
	proto.RegisterType((*ListenDeliverTxRequest)(nil), "cosmos.store.streaming.abci.ListenDeliverTxRequest")
	proto.RegisterType((*ListenDeliverTxResponse)(nil), "cosmos.store.streaming.abci.ListenDeliverTxResponse")
	proto.RegisterType((*ListenCommitRequest)(nil), "cosmos.store.streaming.abci.ListenCommitRequest")
	proto.RegisterType((*ListenCommitResponse)(nil), "cosmos.store.streaming.abci.ListenCommitResponse")
}

func init() {
	proto.RegisterFile("cosmos/store/streaming/abci/grpc.proto", fileDescriptor_7b98083eb9315fb6)
}

var fileDescriptor_7b98083eb9315fb6 = []byte{
	// 519 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0x4f, 0x6f, 0xd3, 0x30,
	0x18, 0xc6, 0x6b, 0x82, 0x90, 0xf0, 0x26, 0x40, 0x1e, 0x8c, 0x90, 0x49, 0xa1, 0x0d, 0x08, 0x71,
	0x72, 0xe8, 0x9f, 0x9d, 0xb8, 0x40, 0x07, 0x12, 0x08, 0x0e, 0xa8, 0x45, 0x1c, 0xb8, 0x4c, 0x69,
	0xfa, 0x2a, 0xb5, 0xd6, 0xc4, 0xad, 0x6d, 0x2a, 0x26, 0x21, 0xc1, 0x01, 0x71, 0xe6, 0x53, 0x70,
	0xe3, 0x7b, 0x70, 0xdc, 0x91, 0x23, 0x6a, 0xbf, 0x08, 0x8a, 0x9d, 0x6e, 0x49, 0xb6, 0x4c, 0xcd,
	0xb1, 0xf6, 0xf3, 0x3c, 0xef, 0xef, 0xed, 0xfb, 0xc6, 0xf8, 0x51, 0xc8, 0x65, 0xcc, 0xa5, 0x2f,
	0x15, 0x17, 0xe0, 0x4b, 0x25, 0x20, 0x88, 0x59, 0x12, 0xf9, 0xc1, 0x28, 0x64, 0x7e, 0x24, 0x66,
	0x21, 0x9d, 0x09, 0xae, 0x38, 0xd9, 0x33, 0x3a, 0xaa, 0x75, 0xf4, 0x54, 0x47, 0x53, 0x9d, 0xb3,
	0xa7, 0x20, 0x19, 0x83, 0x88, 0x59, 0xa2, 0x8c, 0x51, 0x1d, 0xcf, 0x40, 0x1a, 0xa7, 0xf3, 0xb0,
	0x50, 0x61, 0xd1, 0x1e, 0x81, 0x0a, 0xda, 0xfe, 0x94, 0x49, 0x05, 0x49, 0x9a, 0xa0, 0x55, 0xde,
	0x0f, 0x84, 0xef, 0xbe, 0xd5, 0x67, 0x7d, 0x88, 0x58, 0xd2, 0x9f, 0xf2, 0xf0, 0x68, 0x00, 0xf3,
	0x4f, 0x20, 0x15, 0xe9, 0x61, 0x4b, 0xc0, 0xdc, 0x46, 0x4d, 0xf4, 0x78, 0xab, 0xe3, 0xd1, 0xb3,
	0x62, 0xba, 0x3a, 0xcd, 0x64, 0x39, 0x5f, 0x2a, 0x27, 0xfb, 0xa9, 0x4b, 0xda, 0x57, 0xb4, 0xeb,
	0xc1, 0x05, 0x2e, 0x39, 0xe3, 0x89, 0x84, 0xa2, 0x4d, 0x7a, 0x0e, 0xb6, 0xcf, 0x73, 0x18, 0xa9,
	0xf7, 0x0d, 0xe1, 0x3b, 0xe6, 0xf2, 0x65, 0x32, 0x2e, 0x20, 0x76, 0xf2, 0x88, 0xcd, 0x2a, 0xc4,
	0x53, 0x97, 0x06, 0xec, 0xe6, 0x01, 0x5b, 0x95, 0x80, 0x79, 0x93, 0xf4, 0x6c, 0xbc, 0x5b, 0x26,
	0xc8, 0xe0, 0x7e, 0xa1, 0xf5, 0xd5, 0x0b, 0x98, 0xb2, 0x05, 0x88, 0xf7, 0x9f, 0xd7, 0x74, 0x2d,
	0xbc, 0x3d, 0x4a, 0xb5, 0x87, 0x13, 0x60, 0xd1, 0x44, 0x69, 0x4c, 0x6b, 0xb0, 0xa5, 0xcf, 0x5e,
	0xe9, 0x23, 0x03, 0x33, 0xbf, 0x04, 0x46, 0x27, 0x9d, 0x25, 0xeb, 0x0e, 0x7a, 0xa6, 0x03, 0xab,
	0x72, 0x30, 0x06, 0xad, 0xe0, 0x92, 0xde, 0xbd, 0xf5, 0xa4, 0x73, 0x9c, 0x59, 0x0f, 0xbf, 0x11,
	0xde, 0x31, 0x77, 0x07, 0x3c, 0x8e, 0x99, 0xaa, 0xd1, 0x40, 0x3b, 0xff, 0x6f, 0xde, 0xaf, 0x64,
	0xc9, 0x72, 0x53, 0x2d, 0x79, 0x86, 0x71, 0x38, 0x09, 0x92, 0x08, 0x0e, 0x25, 0x28, 0xdb, 0x6a,
	0x5a, 0xba, 0xf5, 0xc2, 0xa2, 0x67, 0xeb, 0x4a, 0x87, 0xe9, 0xaf, 0x37, 0x1f, 0xde, 0x05, 0x4c,
	0x0c, 0xae, 0x1b, 0xd3, 0x10, 0x94, 0xb7, 0x8b, 0x6f, 0x17, 0x71, 0x4d, 0x91, 0xce, 0xf7, 0xab,
	0x78, 0xe7, 0x79, 0xff, 0xe0, 0xb5, 0xb9, 0x04, 0x31, 0x04, 0xb1, 0x60, 0x21, 0x90, 0xaf, 0xf8,
	0x56, 0x79, 0xb9, 0x48, 0x8f, 0x5e, 0xf2, 0x69, 0xd1, 0x8a, 0x6f, 0xc2, 0xd9, 0xaf, 0xe9, 0x32,
	0x60, 0xe4, 0x18, 0xdf, 0x28, 0xae, 0x0f, 0xe9, 0x6c, 0x10, 0x54, 0xda, 0x76, 0xa7, 0x5b, 0xcb,
	0x93, 0x95, 0xfe, 0x82, 0x6f, 0x96, 0xc6, 0x4e, 0x36, 0xc9, 0x29, 0x2f, 0xb3, 0xd3, 0xab, 0x67,
	0xca, 0xaa, 0x4b, 0xbc, 0x9d, 0x9f, 0x14, 0x79, 0xb2, 0x41, 0x4a, 0x61, 0x07, 0x9d, 0x76, 0x0d,
	0x47, 0xf6, 0xb4, 0x3c, 0xfd, 0xb3, 0x74, 0xd1, 0xc9, 0xd2, 0x45, 0xff, 0x96, 0x2e, 0xfa, 0xb9,
	0x72, 0x1b, 0x27, 0x2b, 0xb7, 0xf1, 0x77, 0xe5, 0x36, 0x3e, 0xb6, 0x4c, 0x96, 0x1c, 0x1f, 0x51,
	0xc6, 0x2f, 0x7c, 0x7c, 0x47, 0xd7, 0xf4, 0xc3, 0xd8, 0xfd, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x25,
	0xac, 0xcc, 0x9e, 0xa2, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ABCIListenerServiceClient is the client API for ABCIListenerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ABCIListenerServiceClient interface {
	// ListenBeginBlock is the corresponding endpoint for ABCIListener.ListenBeginBlock
	ListenBeginBlock(ctx context.Context, in *ListenBeginBlockRequest, opts ...grpc.CallOption) (*ListenBeginBlockResponse, error)
	// ListenEndBlock is the corresponding endpoint for ABCIListener.ListenEndBlock
	ListenEndBlock(ctx context.Context, in *ListenEndBlockRequest, opts ...grpc.CallOption) (*ListenEndBlockResponse, error)
	// ListenDeliverTx is the corresponding endpoint for ABCIListener.ListenDeliverTx
	ListenDeliverTx(ctx context.Context, in *ListenDeliverTxRequest, opts ...grpc.CallOption) (*ListenDeliverTxResponse, error)
	// ListenCommit is the corresponding endpoint for ABCIListener.ListenCommit
	ListenCommit(ctx context.Context, in *ListenCommitRequest, opts ...grpc.CallOption) (*ListenCommitResponse, error)
}

type aBCIListenerServiceClient struct {
	cc grpc1.ClientConn
}

func NewABCIListenerServiceClient(cc grpc1.ClientConn) ABCIListenerServiceClient {
	return &aBCIListenerServiceClient{cc}
}

func (c *aBCIListenerServiceClient) ListenBeginBlock(ctx context.Context, in *ListenBeginBlockRequest, opts ...grpc.CallOption) (*ListenBeginBlockResponse, error) {
	out := new(ListenBeginBlockResponse)
	err := c.cc.Invoke(ctx, "/cosmos.store.streaming.abci.ABCIListenerService/ListenBeginBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBCIListenerServiceClient) ListenEndBlock(ctx context.Context, in *ListenEndBlockRequest, opts ...grpc.CallOption) (*ListenEndBlockResponse, error) {
	out := new(ListenEndBlockResponse)
	err := c.cc.Invoke(ctx, "/cosmos.store.streaming.abci.ABCIListenerService/ListenEndBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBCIListenerServiceClient) ListenDeliverTx(ctx context.Context, in *ListenDeliverTxRequest, opts ...grpc.CallOption) (*ListenDeliverTxResponse, error) {
	out := new(ListenDeliverTxResponse)
	err := c.cc.Invoke(ctx, "/cosmos.store.streaming.abci.ABCIListenerService/ListenDeliverTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBCIListenerServiceClient) ListenCommit(ctx context.Context, in *ListenCommitRequest, opts ...grpc.CallOption) (*ListenCommitResponse, error) {
	out := new(ListenCommitResponse)
	err := c.cc.Invoke(ctx, "/cosmos.store.streaming.abci.ABCIListenerService/ListenCommit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ABCIListenerServiceServer is the server API for ABCIListenerService service.
type ABCIListenerServiceServer interface {
	// ListenBeginBlock is the corresponding endpoint for ABCIListener.ListenBeginBlock
	ListenBeginBlock(context.Context, *ListenBeginBlockRequest) (*ListenBeginBlockResponse, error)
	// ListenEndBlock is the corresponding endpoint for ABCIListener.ListenEndBlock
	ListenEndBlock(context.Context, *ListenEndBlockRequest) (*ListenEndBlockResponse, error)
	// ListenDeliverTx is the corresponding endpoint for ABCIListener.ListenDeliverTx
	ListenDeliverTx(context.Context, *ListenDeliverTxRequest) (*ListenDeliverTxResponse, error)
	// ListenCommit is the corresponding endpoint for ABCIListener.ListenCommit
	ListenCommit(context.Context, *ListenCommitRequest) (*ListenCommitResponse, error)
}

// UnimplementedABCIListenerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedABCIListenerServiceServer struct {
}

func (*UnimplementedABCIListenerServiceServer) ListenBeginBlock(ctx context.Context, req *ListenBeginBlockRequest) (*ListenBeginBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListenBeginBlock not implemented")
}
func (*UnimplementedABCIListenerServiceServer) ListenEndBlock(ctx context.Context, req *ListenEndBlockRequest) (*ListenEndBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListenEndBlock not implemented")
}
func (*UnimplementedABCIListenerServiceServer) ListenDeliverTx(ctx context.Context, req *ListenDeliverTxRequest) (*ListenDeliverTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListenDeliverTx not implemented")
}
func (*UnimplementedABCIListenerServiceServer) ListenCommit(ctx context.Context, req *ListenCommitRequest) (*ListenCommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListenCommit not implemented")
}

func RegisterABCIListenerServiceServer(s grpc1.Server, srv ABCIListenerServiceServer) {
	s.RegisterService(&_ABCIListenerService_serviceDesc, srv)
}

func _ABCIListenerService_ListenBeginBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListenBeginBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ABCIListenerServiceServer).ListenBeginBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.store.streaming.abci.ABCIListenerService/ListenBeginBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ABCIListenerServiceServer).ListenBeginBlock(ctx, req.(*ListenBeginBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ABCIListenerService_ListenEndBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListenEndBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ABCIListenerServiceServer).ListenEndBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.store.streaming.abci.ABCIListenerService/ListenEndBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ABCIListenerServiceServer).ListenEndBlock(ctx, req.(*ListenEndBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ABCIListenerService_ListenDeliverTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListenDeliverTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ABCIListenerServiceServer).ListenDeliverTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.store.streaming.abci.ABCIListenerService/ListenDeliverTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ABCIListenerServiceServer).ListenDeliverTx(ctx, req.(*ListenDeliverTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ABCIListenerService_ListenCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListenCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ABCIListenerServiceServer).ListenCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.store.streaming.abci.ABCIListenerService/ListenCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ABCIListenerServiceServer).ListenCommit(ctx, req.(*ListenCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ABCIListenerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cosmos.store.streaming.abci.ABCIListenerService",
	HandlerType: (*ABCIListenerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListenBeginBlock",
			Handler:    _ABCIListenerService_ListenBeginBlock_Handler,
		},
		{
			MethodName: "ListenEndBlock",
			Handler:    _ABCIListenerService_ListenEndBlock_Handler,
		},
		{
			MethodName: "ListenDeliverTx",
			Handler:    _ABCIListenerService_ListenDeliverTx_Handler,
		},
		{
			MethodName: "ListenCommit",
			Handler:    _ABCIListenerService_ListenCommit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cosmos/store/streaming/abci/grpc.proto",
}

func (m *ListenBeginBlockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListenBeginBlockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListenBeginBlockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Res != nil {
		{
			size, err := m.Res.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGrpc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Req != nil {
		{
			size, err := m.Req.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGrpc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListenBeginBlockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListenBeginBlockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListenBeginBlockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ListenEndBlockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListenEndBlockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListenEndBlockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Res != nil {
		{
			size, err := m.Res.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGrpc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Req != nil {
		{
			size, err := m.Req.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGrpc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListenEndBlockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListenEndBlockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListenEndBlockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ListenDeliverTxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListenDeliverTxRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListenDeliverTxRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Res != nil {
		{
			size, err := m.Res.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGrpc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Req != nil {
		{
			size, err := m.Req.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGrpc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.BlockHeight != 0 {
		i = encodeVarintGrpc(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListenDeliverTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListenDeliverTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListenDeliverTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ListenCommitRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListenCommitRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListenCommitRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChangeSet) > 0 {
		for iNdEx := len(m.ChangeSet) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ChangeSet[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGrpc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Res != nil {
		{
			size, err := m.Res.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGrpc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.BlockHeight != 0 {
		i = encodeVarintGrpc(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListenCommitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListenCommitResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListenCommitResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintGrpc(dAtA []byte, offset int, v uint64) int {
	offset -= sovGrpc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ListenBeginBlockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Req != nil {
		l = m.Req.Size()
		n += 1 + l + sovGrpc(uint64(l))
	}
	if m.Res != nil {
		l = m.Res.Size()
		n += 1 + l + sovGrpc(uint64(l))
	}
	return n
}

func (m *ListenBeginBlockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ListenEndBlockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Req != nil {
		l = m.Req.Size()
		n += 1 + l + sovGrpc(uint64(l))
	}
	if m.Res != nil {
		l = m.Res.Size()
		n += 1 + l + sovGrpc(uint64(l))
	}
	return n
}

func (m *ListenEndBlockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ListenDeliverTxRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockHeight != 0 {
		n += 1 + sovGrpc(uint64(m.BlockHeight))
	}
	if m.Req != nil {
		l = m.Req.Size()
		n += 1 + l + sovGrpc(uint64(l))
	}
	if m.Res != nil {
		l = m.Res.Size()
		n += 1 + l + sovGrpc(uint64(l))
	}
	return n
}

func (m *ListenDeliverTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ListenCommitRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockHeight != 0 {
		n += 1 + sovGrpc(uint64(m.BlockHeight))
	}
	if m.Res != nil {
		l = m.Res.Size()
		n += 1 + l + sovGrpc(uint64(l))
	}
	if len(m.ChangeSet) > 0 {
		for _, e := range m.ChangeSet {
			l = e.Size()
			n += 1 + l + sovGrpc(uint64(l))
		}
	}
	return n
}

func (m *ListenCommitResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovGrpc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGrpc(x uint64) (n int) {
	return sovGrpc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ListenBeginBlockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListenBeginBlockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListenBeginBlockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Req", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Req == nil {
				m.Req = &types.RequestBeginBlock{}
			}
			if err := m.Req.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Res", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Res == nil {
				m.Res = &types.ResponseBeginBlock{}
			}
			if err := m.Res.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListenBeginBlockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListenBeginBlockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListenBeginBlockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListenEndBlockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListenEndBlockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListenEndBlockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Req", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Req == nil {
				m.Req = &types.RequestEndBlock{}
			}
			if err := m.Req.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Res", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Res == nil {
				m.Res = &types.ResponseEndBlock{}
			}
			if err := m.Res.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListenEndBlockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListenEndBlockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListenEndBlockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListenDeliverTxRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListenDeliverTxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListenDeliverTxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Req", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Req == nil {
				m.Req = &types.RequestDeliverTx{}
			}
			if err := m.Req.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Res", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Res == nil {
				m.Res = &types.ResponseDeliverTx{}
			}
			if err := m.Res.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListenDeliverTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListenDeliverTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListenDeliverTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListenCommitRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListenCommitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListenCommitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Res", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Res == nil {
				m.Res = &types.ResponseCommit{}
			}
			if err := m.Res.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChangeSet = append(m.ChangeSet, &types1.StoreKVPair{})
			if err := m.ChangeSet[len(m.ChangeSet)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListenCommitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListenCommitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListenCommitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGrpc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGrpc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGrpc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGrpc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGrpc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGrpc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGrpc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGrpc = fmt.Errorf("proto: unexpected end of group")
)
