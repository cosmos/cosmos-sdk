// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmos/base/server/v1beta1/server.proto

package v1beta

import (
	context "context"
	fmt "fmt"
	types1 "github.com/cosmos/cosmos-sdk/store/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/tendermint/tendermint/abci/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// StreamRequest is the message definition for a streaming request sent from a client to the server
type StreamRequest struct {
	// begin_block specifies whether or not stream BeginBlock files
	BeginBlock bool `protobuf:"varint,1,opt,name=begin_block,json=beginBlock,proto3" json:"begin_block,omitempty"`
	// deliver_tx specifies whether or not to stream DeliverTx files
	DeliverTx bool `protobuf:"varint,2,opt,name=deliver_tx,json=deliverTx,proto3" json:"deliver_tx,omitempty"`
	// end_block specifies whether or not to stream EndBlock files
	EndBlock bool `protobuf:"varint,3,opt,name=end_block,json=endBlock,proto3" json:"end_block,omitempty"`
	// store_keys is a (optional) list of store keys for which to restrict the streamed KVPairs to
	StoreKeys []string `protobuf:"bytes,4,rep,name=store_keys,json=storeKeys,proto3" json:"store_keys,omitempty"`
}

func (m *StreamRequest) Reset()         { *m = StreamRequest{} }
func (m *StreamRequest) String() string { return proto.CompactTextString(m) }
func (*StreamRequest) ProtoMessage()    {}
func (*StreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b48d4169ef99d67, []int{0}
}
func (m *StreamRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamRequest.Merge(m, src)
}
func (m *StreamRequest) XXX_Size() int {
	return m.Size()
}
func (m *StreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StreamRequest proto.InternalMessageInfo

func (m *StreamRequest) GetBeginBlock() bool {
	if m != nil {
		return m.BeginBlock
	}
	return false
}

func (m *StreamRequest) GetDeliverTx() bool {
	if m != nil {
		return m.DeliverTx
	}
	return false
}

func (m *StreamRequest) GetEndBlock() bool {
	if m != nil {
		return m.EndBlock
	}
	return false
}

func (m *StreamRequest) GetStoreKeys() []string {
	if m != nil {
		return m.StoreKeys
	}
	return nil
}

// BeginBlockRequest is the message definition for requesting BeginBlock data at a specific height
type BeginBlockRequest struct {
	Height int64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *BeginBlockRequest) Reset()         { *m = BeginBlockRequest{} }
func (m *BeginBlockRequest) String() string { return proto.CompactTextString(m) }
func (*BeginBlockRequest) ProtoMessage()    {}
func (*BeginBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b48d4169ef99d67, []int{1}
}
func (m *BeginBlockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BeginBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BeginBlockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BeginBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BeginBlockRequest.Merge(m, src)
}
func (m *BeginBlockRequest) XXX_Size() int {
	return m.Size()
}
func (m *BeginBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BeginBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BeginBlockRequest proto.InternalMessageInfo

func (m *BeginBlockRequest) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

// DeliverTxRequest is the message definition for requesting DeliverTx data at a specific height
type DeliverTxRequest struct {
	Height int64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *DeliverTxRequest) Reset()         { *m = DeliverTxRequest{} }
func (m *DeliverTxRequest) String() string { return proto.CompactTextString(m) }
func (*DeliverTxRequest) ProtoMessage()    {}
func (*DeliverTxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b48d4169ef99d67, []int{2}
}
func (m *DeliverTxRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeliverTxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeliverTxRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeliverTxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeliverTxRequest.Merge(m, src)
}
func (m *DeliverTxRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeliverTxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeliverTxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeliverTxRequest proto.InternalMessageInfo

func (m *DeliverTxRequest) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

// EndBlockRequest is the message definition for requesting EndBlock data at a specific height
type EndBlockRequest struct {
	Height int64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *EndBlockRequest) Reset()         { *m = EndBlockRequest{} }
func (m *EndBlockRequest) String() string { return proto.CompactTextString(m) }
func (*EndBlockRequest) ProtoMessage()    {}
func (*EndBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b48d4169ef99d67, []int{3}
}
func (m *EndBlockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndBlockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EndBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndBlockRequest.Merge(m, src)
}
func (m *EndBlockRequest) XXX_Size() int {
	return m.Size()
}
func (m *EndBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EndBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EndBlockRequest proto.InternalMessageInfo

func (m *EndBlockRequest) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

// StreamResponse contains the response data for a stream request
type StreamResponse struct {
	// The ChainID for the tendermint application we are streaming data for
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// The block height that this response is for
	Height int64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	// begin_block_payload contains the BeginBlock data
	BeginBlockPayload *BeginBlockPayload `protobuf:"bytes,3,opt,name=begin_block_payload,json=beginBlockPayload,proto3" json:"begin_block_payload,omitempty"`
	// deliver_tx_payload contains the DeliverTx data
	DeliverTxPayload *DeliverTxPayload `protobuf:"bytes,4,opt,name=deliver_tx_payload,json=deliverTxPayload,proto3" json:"deliver_tx_payload,omitempty"`
	// end_block_payload contains the EndBlock data
	EndBlockPayload *EndBlockPayload `protobuf:"bytes,5,opt,name=end_block_payload,json=endBlockPayload,proto3" json:"end_block_payload,omitempty"`
	// error holds any error that occurred while generating the response
	Err string `protobuf:"bytes,6,opt,name=err,proto3" json:"err,omitempty"`
}

func (m *StreamResponse) Reset()         { *m = StreamResponse{} }
func (m *StreamResponse) String() string { return proto.CompactTextString(m) }
func (*StreamResponse) ProtoMessage()    {}
func (*StreamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b48d4169ef99d67, []int{4}
}
func (m *StreamResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamResponse.Merge(m, src)
}
func (m *StreamResponse) XXX_Size() int {
	return m.Size()
}
func (m *StreamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StreamResponse proto.InternalMessageInfo

func (m *StreamResponse) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *StreamResponse) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *StreamResponse) GetBeginBlockPayload() *BeginBlockPayload {
	if m != nil {
		return m.BeginBlockPayload
	}
	return nil
}

func (m *StreamResponse) GetDeliverTxPayload() *DeliverTxPayload {
	if m != nil {
		return m.DeliverTxPayload
	}
	return nil
}

func (m *StreamResponse) GetEndBlockPayload() *EndBlockPayload {
	if m != nil {
		return m.EndBlockPayload
	}
	return nil
}

func (m *StreamResponse) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

// BeginBlockPayload contains the BeginBlock data
type BeginBlockPayload struct {
	Request      *types.RequestBeginBlock  `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	Response     *types.ResponseBeginBlock `protobuf:"bytes,2,opt,name=response,proto3" json:"response,omitempty"`
	StateChanges []*types1.StoreKVPair     `protobuf:"bytes,3,rep,name=state_changes,json=stateChanges,proto3" json:"state_changes,omitempty"`
}

func (m *BeginBlockPayload) Reset()         { *m = BeginBlockPayload{} }
func (m *BeginBlockPayload) String() string { return proto.CompactTextString(m) }
func (*BeginBlockPayload) ProtoMessage()    {}
func (*BeginBlockPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b48d4169ef99d67, []int{5}
}
func (m *BeginBlockPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BeginBlockPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BeginBlockPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BeginBlockPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BeginBlockPayload.Merge(m, src)
}
func (m *BeginBlockPayload) XXX_Size() int {
	return m.Size()
}
func (m *BeginBlockPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_BeginBlockPayload.DiscardUnknown(m)
}

var xxx_messageInfo_BeginBlockPayload proto.InternalMessageInfo

func (m *BeginBlockPayload) GetRequest() *types.RequestBeginBlock {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *BeginBlockPayload) GetResponse() *types.ResponseBeginBlock {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *BeginBlockPayload) GetStateChanges() []*types1.StoreKVPair {
	if m != nil {
		return m.StateChanges
	}
	return nil
}

// DeliverTxPayload contains the DeliverTx data
type DeliverTxPayload struct {
	Request      *types.RequestDeliverTx  `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	Response     *types.ResponseDeliverTx `protobuf:"bytes,2,opt,name=response,proto3" json:"response,omitempty"`
	StateChanges []*types1.StoreKVPair    `protobuf:"bytes,3,rep,name=state_changes,json=stateChanges,proto3" json:"state_changes,omitempty"`
}

func (m *DeliverTxPayload) Reset()         { *m = DeliverTxPayload{} }
func (m *DeliverTxPayload) String() string { return proto.CompactTextString(m) }
func (*DeliverTxPayload) ProtoMessage()    {}
func (*DeliverTxPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b48d4169ef99d67, []int{6}
}
func (m *DeliverTxPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeliverTxPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeliverTxPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeliverTxPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeliverTxPayload.Merge(m, src)
}
func (m *DeliverTxPayload) XXX_Size() int {
	return m.Size()
}
func (m *DeliverTxPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_DeliverTxPayload.DiscardUnknown(m)
}

var xxx_messageInfo_DeliverTxPayload proto.InternalMessageInfo

func (m *DeliverTxPayload) GetRequest() *types.RequestDeliverTx {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *DeliverTxPayload) GetResponse() *types.ResponseDeliverTx {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *DeliverTxPayload) GetStateChanges() []*types1.StoreKVPair {
	if m != nil {
		return m.StateChanges
	}
	return nil
}

// EndBlockPayload contains the EndBlock data
type EndBlockPayload struct {
	Request      *types.RequestEndBlock  `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	Response     *types.ResponseEndBlock `protobuf:"bytes,2,opt,name=response,proto3" json:"response,omitempty"`
	StateChanges []*types1.StoreKVPair   `protobuf:"bytes,3,rep,name=state_changes,json=stateChanges,proto3" json:"state_changes,omitempty"`
}

func (m *EndBlockPayload) Reset()         { *m = EndBlockPayload{} }
func (m *EndBlockPayload) String() string { return proto.CompactTextString(m) }
func (*EndBlockPayload) ProtoMessage()    {}
func (*EndBlockPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b48d4169ef99d67, []int{7}
}
func (m *EndBlockPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndBlockPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndBlockPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EndBlockPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndBlockPayload.Merge(m, src)
}
func (m *EndBlockPayload) XXX_Size() int {
	return m.Size()
}
func (m *EndBlockPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_EndBlockPayload.DiscardUnknown(m)
}

var xxx_messageInfo_EndBlockPayload proto.InternalMessageInfo

func (m *EndBlockPayload) GetRequest() *types.RequestEndBlock {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *EndBlockPayload) GetResponse() *types.ResponseEndBlock {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *EndBlockPayload) GetStateChanges() []*types1.StoreKVPair {
	if m != nil {
		return m.StateChanges
	}
	return nil
}

func init() {
	proto.RegisterType((*StreamRequest)(nil), "cosmos.base.server.v1beta1.StreamRequest")
	proto.RegisterType((*BeginBlockRequest)(nil), "cosmos.base.server.v1beta1.BeginBlockRequest")
	proto.RegisterType((*DeliverTxRequest)(nil), "cosmos.base.server.v1beta1.DeliverTxRequest")
	proto.RegisterType((*EndBlockRequest)(nil), "cosmos.base.server.v1beta1.EndBlockRequest")
	proto.RegisterType((*StreamResponse)(nil), "cosmos.base.server.v1beta1.StreamResponse")
	proto.RegisterType((*BeginBlockPayload)(nil), "cosmos.base.server.v1beta1.BeginBlockPayload")
	proto.RegisterType((*DeliverTxPayload)(nil), "cosmos.base.server.v1beta1.DeliverTxPayload")
	proto.RegisterType((*EndBlockPayload)(nil), "cosmos.base.server.v1beta1.EndBlockPayload")
}

func init() {
	proto.RegisterFile("cosmos/base/server/v1beta1/server.proto", fileDescriptor_9b48d4169ef99d67)
}

var fileDescriptor_9b48d4169ef99d67 = []byte{
	// 733 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0x4b, 0x6f, 0xd3, 0x4c,
	0x14, 0xb5, 0xeb, 0x7c, 0x6d, 0x32, 0xe9, 0x73, 0x3e, 0x54, 0x85, 0x54, 0xa4, 0xa9, 0x91, 0xa0,
	0x0f, 0x6a, 0xd3, 0xb0, 0xe3, 0x29, 0x42, 0xa9, 0x84, 0xba, 0xa9, 0x5c, 0xc4, 0x02, 0x09, 0x82,
	0x1f, 0x83, 0x33, 0x8a, 0x63, 0x87, 0x99, 0x69, 0xd5, 0x2c, 0x59, 0xb3, 0xe1, 0xb7, 0xf0, 0x2b,
	0xba, 0xec, 0x12, 0x24, 0x04, 0xa8, 0xfd, 0x23, 0xc8, 0xe3, 0xf1, 0xd8, 0x49, 0x49, 0x9b, 0x2e,
	0xba, 0x6a, 0x7d, 0xe7, 0x9c, 0x7b, 0xe6, 0xdc, 0x7b, 0x67, 0x26, 0xe0, 0xae, 0x1b, 0xd1, 0x6e,
	0x44, 0x4d, 0xc7, 0xa6, 0xc8, 0xa4, 0x88, 0x1c, 0x22, 0x62, 0x1e, 0x6e, 0x39, 0x88, 0xd9, 0x5b,
	0xe2, 0xd3, 0xe8, 0x91, 0x88, 0x45, 0xb0, 0x9a, 0x00, 0x8d, 0x18, 0x68, 0x88, 0x15, 0x01, 0xac,
	0xde, 0xf0, 0x23, 0x3f, 0xe2, 0x30, 0x33, 0xfe, 0x2f, 0x61, 0x54, 0xd7, 0x06, 0x52, 0xb3, 0x88,
	0x20, 0x99, 0x39, 0xc0, 0x94, 0xa1, 0x10, 0x87, 0xbe, 0x80, 0x2e, 0x31, 0x14, 0x7a, 0x88, 0x74,
	0x71, 0xc8, 0x4c, 0xdb, 0x71, 0xb1, 0xc9, 0xfa, 0x3d, 0x44, 0x93, 0x45, 0xfd, 0x8b, 0x0a, 0x66,
	0xf6, 0x19, 0x41, 0x76, 0xd7, 0x42, 0x9f, 0x0e, 0x10, 0x65, 0x70, 0x19, 0x94, 0x1d, 0xe4, 0xe3,
	0xb0, 0xe5, 0x04, 0x91, 0xdb, 0xa9, 0xa8, 0x75, 0x75, 0xb5, 0x68, 0x01, 0x1e, 0x6a, 0xc6, 0x11,
	0x78, 0x0b, 0x00, 0x0f, 0x05, 0xf8, 0x10, 0x91, 0x16, 0x3b, 0xaa, 0x4c, 0xf0, 0xf5, 0x92, 0x88,
	0xbc, 0x3e, 0x82, 0x4b, 0xa0, 0x84, 0x42, 0x4f, 0xb0, 0x35, 0xbe, 0x5a, 0x44, 0xa1, 0x27, 0xb9,
	0x7c, 0xb3, 0xad, 0x0e, 0xea, 0xd3, 0x4a, 0xa1, 0xae, 0xad, 0x96, 0xac, 0x12, 0x8f, 0xec, 0xa2,
	0x3e, 0xd5, 0x37, 0xc0, 0x42, 0x53, 0x0a, 0xa5, 0x1b, 0x5a, 0x04, 0x93, 0x6d, 0x84, 0xfd, 0x36,
	0xe3, 0x7b, 0xd1, 0x2c, 0xf1, 0xa5, 0xaf, 0x83, 0xf9, 0xed, 0x54, 0xf5, 0x32, 0xec, 0x1a, 0x98,
	0x7b, 0x29, 0xf6, 0x70, 0x19, 0xf4, 0xb3, 0x06, 0x66, 0xd3, 0x8a, 0xd0, 0x5e, 0x14, 0x52, 0x04,
	0x6f, 0x82, 0xa2, 0xdb, 0xb6, 0x71, 0xd8, 0xc2, 0x1e, 0x07, 0x97, 0xac, 0x29, 0xfe, 0xfd, 0xca,
	0xcb, 0x65, 0x99, 0xc8, 0x67, 0x81, 0x2e, 0xf8, 0x3f, 0x57, 0xc5, 0x56, 0xcf, 0xee, 0x07, 0x91,
	0xed, 0xf1, 0x7a, 0x94, 0x1b, 0x9b, 0xc6, 0xe8, 0x7e, 0x1b, 0x59, 0x01, 0xf6, 0x12, 0x52, 0xb3,
	0x70, 0xfc, 0x6b, 0x59, 0xb5, 0x16, 0x9c, 0xe1, 0x05, 0xf8, 0x01, 0xc0, 0xac, 0x13, 0x52, 0xa3,
	0xc0, 0x35, 0xee, 0x5d, 0xa4, 0x21, 0xeb, 0x36, 0x28, 0x31, 0xef, 0x0d, 0xc5, 0xe1, 0x3b, 0xb0,
	0x20, 0x9b, 0x29, 0x05, 0xfe, 0xe3, 0x02, 0x1b, 0x17, 0x09, 0xa4, 0xc5, 0x1e, 0xcc, 0x3f, 0x87,
	0x06, 0xc3, 0x70, 0x11, 0x68, 0x88, 0x90, 0xca, 0x64, 0x5c, 0x53, 0x81, 0x89, 0x03, 0xfa, 0x6f,
	0x35, 0x3f, 0x08, 0x29, 0xfa, 0x31, 0x98, 0x22, 0x49, 0xf3, 0x78, 0x17, 0xca, 0x0d, 0xdd, 0xc8,
	0x46, 0xdb, 0x88, 0x47, 0xdb, 0x10, 0xcd, 0xcd, 0x0d, 0x51, 0x4a, 0x81, 0xcf, 0x40, 0x91, 0x88,
	0x86, 0xf2, 0x5e, 0x95, 0x1b, 0xb7, 0xff, 0x41, 0x4f, 0x00, 0x39, 0xbe, 0x24, 0xc1, 0x5d, 0x30,
	0x43, 0x99, 0xcd, 0x50, 0xcb, 0x6d, 0xdb, 0xa1, 0x8f, 0x68, 0x45, 0xab, 0x6b, 0xab, 0xe5, 0xc6,
	0x9d, 0xc1, 0x3a, 0xc4, 0xb3, 0x2c, 0xcb, 0xb0, 0xcf, 0x27, 0xfb, 0xcd, 0x9e, 0x8d, 0x89, 0x35,
	0xcd, 0xc9, 0x2f, 0x12, 0xae, 0xfe, 0x53, 0xcd, 0x4d, 0x6f, 0x6a, 0xf0, 0xd1, 0xb0, 0xc1, 0x95,
	0x51, 0x06, 0xb3, 0xc1, 0x97, 0xfe, 0x9e, 0x9e, 0xf3, 0xa7, 0x8f, 0xf4, 0x97, 0xd1, 0xaf, 0xc9,
	0xde, 0x0f, 0x35, 0x3b, 0x70, 0xa9, 0xbb, 0x87, 0xc3, 0xee, 0xea, 0xa3, 0xdc, 0xc9, 0xa3, 0x2a,
	0xcd, 0x3d, 0x39, 0x67, 0x6e, 0x65, 0xa4, 0x39, 0xc9, 0xbe, 0x1e, 0x6f, 0x8d, 0x6f, 0x05, 0x50,
	0xda, 0x8f, 0x03, 0x3b, 0x38, 0x40, 0x90, 0x80, 0xf9, 0x6c, 0x5a, 0xb6, 0x6d, 0x66, 0x3f, 0x67,
	0x70, 0xcc, 0xf3, 0x2d, 0xdc, 0x56, 0xaf, 0x76, 0x1d, 0xe8, 0x0a, 0x8c, 0xc0, 0x9c, 0xec, 0xa0,
	0x90, 0x1c, 0xef, 0xb8, 0xa7, 0x8a, 0x57, 0xba, 0x1c, 0x74, 0x05, 0x06, 0x60, 0x36, 0xad, 0xaa,
	0xd0, 0x1b, 0xeb, 0xf4, 0xa7, 0x72, 0x57, 0xb9, 0x2a, 0x74, 0x05, 0xfa, 0x00, 0x24, 0x17, 0x70,
	0xac, 0x05, 0xd7, 0x2e, 0x22, 0x0f, 0x3c, 0x5d, 0xd5, 0xf5, 0x71, 0xa0, 0xc9, 0x48, 0xe8, 0xca,
	0x7d, 0x15, 0x62, 0x30, 0xdd, 0xb4, 0xdd, 0xce, 0x0e, 0x0e, 0x82, 0x6b, 0x96, 0x6a, 0xbe, 0x3f,
	0x3e, 0xad, 0xa9, 0x27, 0xa7, 0x35, 0xf5, 0xcf, 0x69, 0x4d, 0xfd, 0x7a, 0x56, 0x53, 0x4e, 0xce,
	0x6a, 0xca, 0xf7, 0xb3, 0x9a, 0xf2, 0x76, 0xdb, 0xc7, 0xac, 0x7d, 0xe0, 0x18, 0x6e, 0xd4, 0x35,
	0xc5, 0xa3, 0x9e, 0xfc, 0xd9, 0xa4, 0x5e, 0x47, 0x3c, 0xed, 0x94, 0x27, 0xc4, 0xa1, 0x6f, 0x7e,
	0xc4, 0x81, 0xfc, 0x29, 0xe1, 0x93, 0x9e, 0x2b, 0x5e, 0x7d, 0x67, 0x92, 0x3f, 0xe7, 0x0f, 0xfe,
	0x06, 0x00, 0x00, 0xff, 0xff, 0xed, 0x94, 0x60, 0xfc, 0x73, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StateFileClient is the client API for StateFile service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StateFileClient interface {
	BeginBlockDataAt(ctx context.Context, in *BeginBlockRequest, opts ...grpc.CallOption) (*BeginBlockPayload, error)
	DeliverTxDataAt(ctx context.Context, in *DeliverTxRequest, opts ...grpc.CallOption) (*DeliverTxPayload, error)
	EndBlockDataAt(ctx context.Context, in *EndBlockRequest, opts ...grpc.CallOption) (*EndBlockPayload, error)
	StreamData(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (StateFile_StreamDataClient, error)
	BackFillData(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (StateFile_BackFillDataClient, error)
}

type stateFileClient struct {
	cc grpc1.ClientConn
}

func NewStateFileClient(cc grpc1.ClientConn) StateFileClient {
	return &stateFileClient{cc}
}

func (c *stateFileClient) BeginBlockDataAt(ctx context.Context, in *BeginBlockRequest, opts ...grpc.CallOption) (*BeginBlockPayload, error) {
	out := new(BeginBlockPayload)
	err := c.cc.Invoke(ctx, "/cosmos.base.server.v1beta1.StateFile/BeginBlockDataAt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateFileClient) DeliverTxDataAt(ctx context.Context, in *DeliverTxRequest, opts ...grpc.CallOption) (*DeliverTxPayload, error) {
	out := new(DeliverTxPayload)
	err := c.cc.Invoke(ctx, "/cosmos.base.server.v1beta1.StateFile/DeliverTxDataAt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateFileClient) EndBlockDataAt(ctx context.Context, in *EndBlockRequest, opts ...grpc.CallOption) (*EndBlockPayload, error) {
	out := new(EndBlockPayload)
	err := c.cc.Invoke(ctx, "/cosmos.base.server.v1beta1.StateFile/EndBlockDataAt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateFileClient) StreamData(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (StateFile_StreamDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StateFile_serviceDesc.Streams[0], "/cosmos.base.server.v1beta1.StateFile/StreamData", opts...)
	if err != nil {
		return nil, err
	}
	x := &stateFileStreamDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StateFile_StreamDataClient interface {
	Recv() (*StreamResponse, error)
	grpc.ClientStream
}

type stateFileStreamDataClient struct {
	grpc.ClientStream
}

func (x *stateFileStreamDataClient) Recv() (*StreamResponse, error) {
	m := new(StreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *stateFileClient) BackFillData(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (StateFile_BackFillDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StateFile_serviceDesc.Streams[1], "/cosmos.base.server.v1beta1.StateFile/BackFillData", opts...)
	if err != nil {
		return nil, err
	}
	x := &stateFileBackFillDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StateFile_BackFillDataClient interface {
	Recv() (*StreamResponse, error)
	grpc.ClientStream
}

type stateFileBackFillDataClient struct {
	grpc.ClientStream
}

func (x *stateFileBackFillDataClient) Recv() (*StreamResponse, error) {
	m := new(StreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StateFileServer is the server API for StateFile service.
type StateFileServer interface {
	BeginBlockDataAt(context.Context, *BeginBlockRequest) (*BeginBlockPayload, error)
	DeliverTxDataAt(context.Context, *DeliverTxRequest) (*DeliverTxPayload, error)
	EndBlockDataAt(context.Context, *EndBlockRequest) (*EndBlockPayload, error)
	StreamData(*StreamRequest, StateFile_StreamDataServer) error
	BackFillData(*StreamRequest, StateFile_BackFillDataServer) error
}

// UnimplementedStateFileServer can be embedded to have forward compatible implementations.
type UnimplementedStateFileServer struct {
}

func (*UnimplementedStateFileServer) BeginBlockDataAt(ctx context.Context, req *BeginBlockRequest) (*BeginBlockPayload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeginBlockDataAt not implemented")
}
func (*UnimplementedStateFileServer) DeliverTxDataAt(ctx context.Context, req *DeliverTxRequest) (*DeliverTxPayload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeliverTxDataAt not implemented")
}
func (*UnimplementedStateFileServer) EndBlockDataAt(ctx context.Context, req *EndBlockRequest) (*EndBlockPayload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndBlockDataAt not implemented")
}
func (*UnimplementedStateFileServer) StreamData(req *StreamRequest, srv StateFile_StreamDataServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamData not implemented")
}
func (*UnimplementedStateFileServer) BackFillData(req *StreamRequest, srv StateFile_BackFillDataServer) error {
	return status.Errorf(codes.Unimplemented, "method BackFillData not implemented")
}

func RegisterStateFileServer(s grpc1.Server, srv StateFileServer) {
	s.RegisterService(&_StateFile_serviceDesc, srv)
}

func _StateFile_BeginBlockDataAt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BeginBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateFileServer).BeginBlockDataAt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.base.server.v1beta1.StateFile/BeginBlockDataAt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateFileServer).BeginBlockDataAt(ctx, req.(*BeginBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateFile_DeliverTxDataAt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeliverTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateFileServer).DeliverTxDataAt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.base.server.v1beta1.StateFile/DeliverTxDataAt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateFileServer).DeliverTxDataAt(ctx, req.(*DeliverTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateFile_EndBlockDataAt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateFileServer).EndBlockDataAt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.base.server.v1beta1.StateFile/EndBlockDataAt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateFileServer).EndBlockDataAt(ctx, req.(*EndBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateFile_StreamData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StateFileServer).StreamData(m, &stateFileStreamDataServer{stream})
}

type StateFile_StreamDataServer interface {
	Send(*StreamResponse) error
	grpc.ServerStream
}

type stateFileStreamDataServer struct {
	grpc.ServerStream
}

func (x *stateFileStreamDataServer) Send(m *StreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _StateFile_BackFillData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StateFileServer).BackFillData(m, &stateFileBackFillDataServer{stream})
}

type StateFile_BackFillDataServer interface {
	Send(*StreamResponse) error
	grpc.ServerStream
}

type stateFileBackFillDataServer struct {
	grpc.ServerStream
}

func (x *stateFileBackFillDataServer) Send(m *StreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _StateFile_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cosmos.base.server.v1beta1.StateFile",
	HandlerType: (*StateFileServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BeginBlockDataAt",
			Handler:    _StateFile_BeginBlockDataAt_Handler,
		},
		{
			MethodName: "DeliverTxDataAt",
			Handler:    _StateFile_DeliverTxDataAt_Handler,
		},
		{
			MethodName: "EndBlockDataAt",
			Handler:    _StateFile_EndBlockDataAt_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamData",
			Handler:       _StateFile_StreamData_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BackFillData",
			Handler:       _StateFile_BackFillData_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cosmos/base/server/v1beta1/server.proto",
}

func (m *StreamRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StoreKeys) > 0 {
		for iNdEx := len(m.StoreKeys) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.StoreKeys[iNdEx])
			copy(dAtA[i:], m.StoreKeys[iNdEx])
			i = encodeVarintServer(dAtA, i, uint64(len(m.StoreKeys[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.EndBlock {
		i--
		if m.EndBlock {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.DeliverTx {
		i--
		if m.DeliverTx {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.BeginBlock {
		i--
		if m.BeginBlock {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BeginBlockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BeginBlockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BeginBlockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintServer(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeliverTxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeliverTxRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeliverTxRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintServer(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EndBlockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndBlockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndBlockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintServer(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StreamResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Err) > 0 {
		i -= len(m.Err)
		copy(dAtA[i:], m.Err)
		i = encodeVarintServer(dAtA, i, uint64(len(m.Err)))
		i--
		dAtA[i] = 0x32
	}
	if m.EndBlockPayload != nil {
		{
			size, err := m.EndBlockPayload.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServer(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.DeliverTxPayload != nil {
		{
			size, err := m.DeliverTxPayload.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServer(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.BeginBlockPayload != nil {
		{
			size, err := m.BeginBlockPayload.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServer(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Height != 0 {
		i = encodeVarintServer(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintServer(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BeginBlockPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BeginBlockPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BeginBlockPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StateChanges) > 0 {
		for iNdEx := len(m.StateChanges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StateChanges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintServer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Response != nil {
		{
			size, err := m.Response.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServer(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServer(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeliverTxPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeliverTxPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeliverTxPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StateChanges) > 0 {
		for iNdEx := len(m.StateChanges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StateChanges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintServer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Response != nil {
		{
			size, err := m.Response.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServer(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServer(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EndBlockPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndBlockPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndBlockPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StateChanges) > 0 {
		for iNdEx := len(m.StateChanges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StateChanges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintServer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Response != nil {
		{
			size, err := m.Response.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServer(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServer(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintServer(dAtA []byte, offset int, v uint64) int {
	offset -= sovServer(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StreamRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BeginBlock {
		n += 2
	}
	if m.DeliverTx {
		n += 2
	}
	if m.EndBlock {
		n += 2
	}
	if len(m.StoreKeys) > 0 {
		for _, s := range m.StoreKeys {
			l = len(s)
			n += 1 + l + sovServer(uint64(l))
		}
	}
	return n
}

func (m *BeginBlockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovServer(uint64(m.Height))
	}
	return n
}

func (m *DeliverTxRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovServer(uint64(m.Height))
	}
	return n
}

func (m *EndBlockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovServer(uint64(m.Height))
	}
	return n
}

func (m *StreamResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovServer(uint64(m.Height))
	}
	if m.BeginBlockPayload != nil {
		l = m.BeginBlockPayload.Size()
		n += 1 + l + sovServer(uint64(l))
	}
	if m.DeliverTxPayload != nil {
		l = m.DeliverTxPayload.Size()
		n += 1 + l + sovServer(uint64(l))
	}
	if m.EndBlockPayload != nil {
		l = m.EndBlockPayload.Size()
		n += 1 + l + sovServer(uint64(l))
	}
	l = len(m.Err)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	return n
}

func (m *BeginBlockPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovServer(uint64(l))
	}
	if m.Response != nil {
		l = m.Response.Size()
		n += 1 + l + sovServer(uint64(l))
	}
	if len(m.StateChanges) > 0 {
		for _, e := range m.StateChanges {
			l = e.Size()
			n += 1 + l + sovServer(uint64(l))
		}
	}
	return n
}

func (m *DeliverTxPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovServer(uint64(l))
	}
	if m.Response != nil {
		l = m.Response.Size()
		n += 1 + l + sovServer(uint64(l))
	}
	if len(m.StateChanges) > 0 {
		for _, e := range m.StateChanges {
			l = e.Size()
			n += 1 + l + sovServer(uint64(l))
		}
	}
	return n
}

func (m *EndBlockPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovServer(uint64(l))
	}
	if m.Response != nil {
		l = m.Response.Size()
		n += 1 + l + sovServer(uint64(l))
	}
	if len(m.StateChanges) > 0 {
		for _, e := range m.StateChanges {
			l = e.Size()
			n += 1 + l + sovServer(uint64(l))
		}
	}
	return n
}

func sovServer(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozServer(x uint64) (n int) {
	return sovServer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StreamRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginBlock", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BeginBlock = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliverTx", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeliverTx = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndBlock", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EndBlock = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreKeys", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StoreKeys = append(m.StoreKeys, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BeginBlockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BeginBlockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BeginBlockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeliverTxRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeliverTxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeliverTxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndBlockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndBlockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndBlockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginBlockPayload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BeginBlockPayload == nil {
				m.BeginBlockPayload = &BeginBlockPayload{}
			}
			if err := m.BeginBlockPayload.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliverTxPayload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeliverTxPayload == nil {
				m.DeliverTxPayload = &DeliverTxPayload{}
			}
			if err := m.DeliverTxPayload.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndBlockPayload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndBlockPayload == nil {
				m.EndBlockPayload = &EndBlockPayload{}
			}
			if err := m.EndBlockPayload.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Err = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BeginBlockPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BeginBlockPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BeginBlockPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &types.RequestBeginBlock{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Response == nil {
				m.Response = &types.ResponseBeginBlock{}
			}
			if err := m.Response.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateChanges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateChanges = append(m.StateChanges, &types1.StoreKVPair{})
			if err := m.StateChanges[len(m.StateChanges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeliverTxPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeliverTxPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeliverTxPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &types.RequestDeliverTx{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Response == nil {
				m.Response = &types.ResponseDeliverTx{}
			}
			if err := m.Response.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateChanges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateChanges = append(m.StateChanges, &types1.StoreKVPair{})
			if err := m.StateChanges[len(m.StateChanges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndBlockPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndBlockPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndBlockPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &types.RequestEndBlock{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Response == nil {
				m.Response = &types.ResponseEndBlock{}
			}
			if err := m.Response.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateChanges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateChanges = append(m.StateChanges, &types1.StoreKVPair{})
			if err := m.StateChanges[len(m.StateChanges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipServer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowServer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthServer
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupServer
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthServer
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthServer        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowServer          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupServer = fmt.Errorf("proto: unexpected end of group")
)
