package cmd

import (
	"encoding/hex"
	"encoding/json"
	"fmt"
	"os"
	"path/filepath"
	"strings"

	"github.com/cosmos/cosmos-sdk/crypto/keys/secp256k1"
	cryptotypes "github.com/cosmos/cosmos-sdk/crypto/types"
	sdk "github.com/cosmos/cosmos-sdk/types"
	"github.com/spf13/cobra"

	"github.com/tajeor/chain/app"
)

// KeyInfo stores key information
type KeyInfo struct {
	Name       string `json:"name"`
	Type       string `json:"type"`
	Address    string `json:"address"`
	PubKey     string `json:"pubkey"`
	PrivateKey string `json:"private_key,omitempty"` // Only for display, not stored
}

// ValidatorInfo stores validator information
type ValidatorInfo struct {
	Moniker           string `json:"moniker"`
	OperatorAddress   string `json:"operator_address"`
	CommissionRate    string `json:"commission_rate"`
	MinSelfDelegation string `json:"min_self_delegation"`
	Status            string `json:"status"`
	CreatedBy         string `json:"created_by"` // Key name that created this validator
	SelfDelegation    string `json:"self_delegation"`
	TotalDelegation   string `json:"total_delegation"`
	VotingPower       string `json:"voting_power"`
}

// generateKey generates a new secp256k1 private key
func generateKey() (cryptotypes.PrivKey, error) {
	return secp256k1.GenPrivKey(), nil
}

// addressFromPrivKey derives a Cosmos address from a private key
func addressFromPrivKey(privKey cryptotypes.PrivKey) (sdk.AccAddress, error) {
	pubKey := privKey.PubKey()
	return sdk.AccAddress(pubKey.Address()), nil
}

// saveKeyInfo saves key information to the keys directory
func saveKeyInfo(name string, keyInfo KeyInfo) error {
	homeDir := app.DefaultNodeHome
	keysDir := filepath.Join(homeDir, "keys")
	keyFile := filepath.Join(keysDir, name+".json")

	// Remove private key from saved data for security
	saveInfo := keyInfo
	saveInfo.PrivateKey = ""

	keyBytes, err := json.MarshalIndent(saveInfo, "", "  ")
	if err != nil {
		return err
	}

	return os.WriteFile(keyFile, keyBytes, 0600)
}

// loadKeyInfo loads key information from the keys directory
func loadKeyInfo(name string) (*KeyInfo, error) {
	homeDir := app.DefaultNodeHome
	keysDir := filepath.Join(homeDir, "keys")
	keyFile := filepath.Join(keysDir, name+".json")

	keyBytes, err := os.ReadFile(keyFile)
	if err != nil {
		return nil, err
	}

	var keyInfo KeyInfo
	if err := json.Unmarshal(keyBytes, &keyInfo); err != nil {
		return nil, err
	}

	return &keyInfo, nil
}

// listKeys lists all keys in the keys directory
func listKeys() ([]KeyInfo, error) {
	homeDir := app.DefaultNodeHome
	keysDir := filepath.Join(homeDir, "keys")

	entries, err := os.ReadDir(keysDir)
	if err != nil {
		if os.IsNotExist(err) {
			return []KeyInfo{}, nil
		}
		return nil, err
	}

	var keys []KeyInfo
	for _, entry := range entries {
		if !entry.IsDir() && strings.HasSuffix(entry.Name(), ".json") {
			name := strings.TrimSuffix(entry.Name(), ".json")
			keyInfo, err := loadKeyInfo(name)
			if err != nil {
				continue
			}
			keys = append(keys, *keyInfo)
		}
	}

	return keys, nil
}

// saveValidatorInfo saves validator information
func saveValidatorInfo(moniker string, validatorInfo ValidatorInfo) error {
	homeDir := app.DefaultNodeHome
	validatorsDir := filepath.Join(homeDir, "validators")

	// Create validators directory if it doesn't exist
	if err := os.MkdirAll(validatorsDir, 0755); err != nil {
		return err
	}

	validatorFile := filepath.Join(validatorsDir, moniker+".json")
	validatorBytes, err := json.MarshalIndent(validatorInfo, "", "  ")
	if err != nil {
		return err
	}

	return os.WriteFile(validatorFile, validatorBytes, 0644)
}

// loadValidatorInfo loads validator information
func loadValidatorInfo(moniker string) (*ValidatorInfo, error) {
	homeDir := app.DefaultNodeHome
	validatorsDir := filepath.Join(homeDir, "validators")
	validatorFile := filepath.Join(validatorsDir, moniker+".json")

	validatorBytes, err := os.ReadFile(validatorFile)
	if err != nil {
		return nil, err
	}

	var validatorInfo ValidatorInfo
	if err := json.Unmarshal(validatorBytes, &validatorInfo); err != nil {
		return nil, err
	}

	return &validatorInfo, nil
}

// listValidators lists all validators
func listValidators() ([]ValidatorInfo, error) {
	homeDir := app.DefaultNodeHome
	validatorsDir := filepath.Join(homeDir, "validators")

	entries, err := os.ReadDir(validatorsDir)
	if err != nil {
		if os.IsNotExist(err) {
			return []ValidatorInfo{}, nil
		}
		return nil, err
	}

	var validators []ValidatorInfo
	for _, entry := range entries {
		if !entry.IsDir() && strings.HasSuffix(entry.Name(), ".json") {
			moniker := strings.TrimSuffix(entry.Name(), ".json")
			validatorInfo, err := loadValidatorInfo(moniker)
			if err != nil {
				continue
			}
			validators = append(validators, *validatorInfo)
		}
	}

	return validators, nil
}

// NewRootCmd creates a new root command for tajeord
func NewRootCmd() (*cobra.Command, app.EncodingConfig) {
	encodingConfig := app.MakeEncodingConfig()

	// Set up SDK config
	config := sdk.GetConfig()
	config.SetBech32PrefixForAccount("cosmos", "cosmospub")
	config.SetBech32PrefixForValidator("cosmosvaloper", "cosmosvaloperpub")
	config.SetBech32PrefixForConsensusNode("cosmosvalcons", "cosmosvalconspub")
	config.Seal()

	rootCmd := &cobra.Command{
		Use:   "tajeord",
		Short: "Tajeor Blockchain App with Real Key Generation",
		Long:  "A Cosmos SDK blockchain application for the Tajeor (TJR) token with real cryptographic key generation",
		Run: func(cmd *cobra.Command, args []string) {
			cmd.Help()
		},
	}

	rootCmd.AddCommand(
		versionCmd(),
		initCmd(),
		addGenesisAccountCmd(),
		keysCmd(),
		statusCmd(),
		stakingCmd(),
		validatorCmd(),
		txCmd(),
		queryCmd(),
		apiCmd(),
		startCmd(),
	)

	return rootCmd, encodingConfig
}

func versionCmd() *cobra.Command {
	return &cobra.Command{
		Use:   "version",
		Short: "Print the version of tajeord",
		Run: func(cmd *cobra.Command, args []string) {
			cmd.Println("tajeord version 1.0.0 - Enhanced with Real Key Generation")
		},
	}
}

func initCmd() *cobra.Command {
	return &cobra.Command{
		Use:   "init [moniker]",
		Short: "Initialize the blockchain with a node name (moniker)",
		Args:  cobra.ExactArgs(1),
		Run: func(cmd *cobra.Command, args []string) {
			moniker := args[0]
			homeDir := app.DefaultNodeHome

			// Create directory structure
			configDir := filepath.Join(homeDir, "config")
			dataDir := filepath.Join(homeDir, "data")
			keysDir := filepath.Join(homeDir, "keys")

			for _, dir := range []string{configDir, dataDir, keysDir} {
				if err := os.MkdirAll(dir, 0755); err != nil {
					cmd.Printf("‚ùå Error creating directory %s: %v\n", dir, err)
					return
				}
			}

			// Create genesis file
			genesisFile := filepath.Join(configDir, "genesis.json")
			genesis := map[string]interface{}{
				"genesis_time":   "2024-01-01T00:00:00Z",
				"chain_id":       "tajeor-1",
				"initial_height": "1",
				"app_hash":       "",
				"app_state": map[string]interface{}{
					"auth": map[string]interface{}{
						"accounts": []interface{}{},
					},
					"bank": map[string]interface{}{
						"balances": []interface{}{},
						"supply":   []interface{}{},
					},
				},
			}

			genesisBytes, _ := json.MarshalIndent(genesis, "", "  ")
			if err := os.WriteFile(genesisFile, genesisBytes, 0644); err != nil {
				cmd.Printf("‚ùå Error creating genesis file: %v\n", err)
				return
			}

			cmd.Printf("‚úÖ Initialized Tajeor blockchain with moniker: %s\n", moniker)
			cmd.Printf("üìÅ Node home: %s\n", homeDir)
			cmd.Printf("üìÑ Genesis file: %s\n", genesisFile)
			cmd.Printf("üîë Keys directory: %s\n", keysDir)
		},
	}
}

func addGenesisAccountCmd() *cobra.Command {
	return &cobra.Command{
		Use:   "add-genesis-account [address] [amount]",
		Short: "Add an account with initial balance to genesis.json",
		Long: `Add an account with initial TJR balance to the genesis file.
Example: tajeord add-genesis-account cosmos1abc123... 1000000tjr`,
		Args: cobra.ExactArgs(2),
		Run: func(cmd *cobra.Command, args []string) {
			address := args[0]
			amount := args[1]

			// Validate address format
			if _, err := sdk.AccAddressFromBech32(address); err != nil {
				cmd.Printf("‚ùå Invalid address format: %v\n", err)
				return
			}

			// Validate amount format
			if _, err := sdk.ParseCoinsNormalized(amount); err != nil {
				cmd.Printf("‚ùå Invalid amount format: %v\n", err)
				return
			}

			homeDir := app.DefaultNodeHome
			genesisFile := filepath.Join(homeDir, "config", "genesis.json")

			// Check if genesis file exists
			if _, err := os.Stat(genesisFile); os.IsNotExist(err) {
				cmd.Printf("‚ùå Genesis file not found. Run 'tajeord init [moniker]' first\n")
				return
			}

			// Read genesis file
			genesisBytes, err := os.ReadFile(genesisFile)
			if err != nil {
				cmd.Printf("‚ùå Error reading genesis file: %v\n", err)
				return
			}

			var genesis map[string]interface{}
			if err := json.Unmarshal(genesisBytes, &genesis); err != nil {
				cmd.Printf("‚ùå Error parsing genesis file: %v\n", err)
				return
			}

			// Add account to genesis
			appState := genesis["app_state"].(map[string]interface{})

			// Add to auth accounts
			auth := appState["auth"].(map[string]interface{})
			accounts := auth["accounts"].([]interface{})
			accounts = append(accounts, map[string]interface{}{
				"address": address,
				"type":    "base",
			})
			auth["accounts"] = accounts

			// Add to bank balances
			bank := appState["bank"].(map[string]interface{})
			balances := bank["balances"].([]interface{})
			balances = append(balances, map[string]interface{}{
				"address": address,
				"coins":   amount,
			})
			bank["balances"] = balances

			// Write back to file
			genesisBytes, _ = json.MarshalIndent(genesis, "", "  ")
			if err := os.WriteFile(genesisFile, genesisBytes, 0644); err != nil {
				cmd.Printf("‚ùå Error writing genesis file: %v\n", err)
				return
			}

			cmd.Printf("‚úÖ Added genesis account: %s with balance: %s\n", address, amount)
		},
	}
}

func createAccountCmd() *cobra.Command {
	return &cobra.Command{
		Use:   "create-account [name]",
		Short: "Create a new account (address and private key)",
		Args:  cobra.ExactArgs(1),
		Run: func(cmd *cobra.Command, args []string) {
			name := args[0]

			// Generate a new private key (simplified)
			// In a real implementation, you'd use proper key generation
			cmd.Printf("üîë Creating account: %s\n", name)
			cmd.Printf("üìù This is a simplified implementation for demonstration\n")
			cmd.Printf("üí° In production, use: tajeord keys add %s\n", name)

			// For demo purposes, show what a real address would look like
			cmd.Printf("üè∑Ô∏è  Example address format: cosmos1abc123def456ghi789...\n")
			cmd.Printf("üîê Private key would be stored securely in keyring\n")
		},
	}
}

func keysCmd() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "keys",
		Short: "üîë Real key management commands with cryptographic security",
	}

	cmd.AddCommand(
		keysAddCmd(),
		keysListCmd(),
		keysShowCmd(),
		keysDeleteCmd(),
		keysExportCmd(),
	)

	return cmd
}

func keysAddCmd() *cobra.Command {
	return &cobra.Command{
		Use:   "add [name]",
		Short: "üîë Generate a new cryptographic key pair",
		Long: `Generate a new secp256k1 private key and derive the corresponding address.
This creates real cryptographic keys compatible with Cosmos SDK.

Example: tajeord keys add alice`,
		Args: cobra.ExactArgs(1),
		Run: func(cmd *cobra.Command, args []string) {
			name := args[0]

			// Check if key already exists
			if _, err := loadKeyInfo(name); err == nil {
				cmd.Printf("‚ùå Key '%s' already exists\n", name)
				return
			}

			cmd.Printf("üîë Generating new key for: %s\n", name)

			// Generate new private key
			privKey, err := generateKey()
			if err != nil {
				cmd.Printf("‚ùå Error generating key: %v\n", err)
				return
			}

			// Derive address from private key
			address, err := addressFromPrivKey(privKey)
			if err != nil {
				cmd.Printf("‚ùå Error deriving address: %v\n", err)
				return
			}

			// Get public key
			pubKey := privKey.PubKey()
			pubKeyHex := hex.EncodeToString(pubKey.Bytes())

			// Get private key bytes
			privKeyHex := hex.EncodeToString(privKey.Bytes())

			// Create key info
			keyInfo := KeyInfo{
				Name:       name,
				Type:       "secp256k1",
				Address:    address.String(),
				PubKey:     pubKeyHex,
				PrivateKey: privKeyHex,
			}

			// Save key info (without private key)
			if err := saveKeyInfo(name, keyInfo); err != nil {
				cmd.Printf("‚ùå Error saving key: %v\n", err)
				return
			}

			cmd.Printf("‚úÖ Key generated successfully!\n\n")
			cmd.Printf("üìã KEY INFORMATION:\n")
			cmd.Printf("  üè∑Ô∏è  Name: %s\n", keyInfo.Name)
			cmd.Printf("  üîê Type: %s\n", keyInfo.Type)
			cmd.Printf("  üìç Address: %s\n", keyInfo.Address)
			cmd.Printf("  üîë Public Key: %s\n", keyInfo.PubKey)
			cmd.Printf("\nüîí PRIVATE KEY (SAVE THIS SECURELY!):\n")
			cmd.Printf("  %s\n", keyInfo.PrivateKey)
			cmd.Printf("\n‚ö†Ô∏è  SECURITY WARNING:\n")
			cmd.Printf("  üîí Store your private key in a secure location\n")
			cmd.Printf("  üö´ Never share your private key with anyone\n")
			cmd.Printf("  üíæ The private key is NOT stored on disk\n")
			cmd.Printf("  üîÑ You can recover this key using the private key hex\n")

			// Validate the generated address
			if _, err := sdk.AccAddressFromBech32(keyInfo.Address); err != nil {
				cmd.Printf("‚ö†Ô∏è  Warning: Generated address format validation failed: %v\n", err)
			} else {
				cmd.Printf("\n‚úÖ Address format validation: PASSED\n")
			}
		},
	}
}

func keysListCmd() *cobra.Command {
	return &cobra.Command{
		Use:   "list",
		Short: "üìã List all stored keys",
		Run: func(cmd *cobra.Command, args []string) {
			keys, err := listKeys()
			if err != nil {
				cmd.Printf("‚ùå Error listing keys: %v\n", err)
				return
			}

			if len(keys) == 0 {
				cmd.Printf("üì≠ No keys found\n")
				cmd.Printf("üí° Generate a new key with: tajeord keys add [name]\n")
				return
			}

			cmd.Printf("üîë Stored Keys (%d total):\n\n", len(keys))
			for i, key := range keys {
				cmd.Printf("%d. üè∑Ô∏è  %s\n", i+1, key.Name)
				cmd.Printf("   üìç %s\n", key.Address)
				cmd.Printf("   üîê %s\n", key.Type)
				cmd.Printf("   üîë %s...\n\n", key.PubKey[:16])
			}
		},
	}
}

func keysShowCmd() *cobra.Command {
	return &cobra.Command{
		Use:   "show [name]",
		Short: "üëÅÔ∏è  Show detailed information for a key",
		Args:  cobra.ExactArgs(1),
		Run: func(cmd *cobra.Command, args []string) {
			name := args[0]

			keyInfo, err := loadKeyInfo(name)
			if err != nil {
				cmd.Printf("‚ùå Key '%s' not found: %v\n", name, err)
				return
			}

			cmd.Printf("üîë Key Information: %s\n\n", keyInfo.Name)
			cmd.Printf("üìã DETAILS:\n")
			cmd.Printf("  üè∑Ô∏è  Name: %s\n", keyInfo.Name)
			cmd.Printf("  üîê Type: %s\n", keyInfo.Type)
			cmd.Printf("  üìç Address: %s\n", keyInfo.Address)
			cmd.Printf("  üîë Public Key: %s\n", keyInfo.PubKey)
			cmd.Printf("\nüí° Use this address to receive TJR tokens\n")

			// Validate address
			if _, err := sdk.AccAddressFromBech32(keyInfo.Address); err != nil {
				cmd.Printf("‚ö†Ô∏è  Warning: Address format validation failed: %v\n", err)
			} else {
				cmd.Printf("‚úÖ Address format: Valid Cosmos SDK format\n")
			}
		},
	}
}

func keysDeleteCmd() *cobra.Command {
	return &cobra.Command{
		Use:   "delete [name]",
		Short: "üóëÔ∏è  Delete a key (WARNING: This cannot be undone!)",
		Args:  cobra.ExactArgs(1),
		Run: func(cmd *cobra.Command, args []string) {
			name := args[0]

			// Check if key exists
			keyInfo, err := loadKeyInfo(name)
			if err != nil {
				cmd.Printf("‚ùå Key '%s' not found: %v\n", name, err)
				return
			}

			cmd.Printf("‚ö†Ô∏è  WARNING: About to delete key '%s'\n", name)
			cmd.Printf("üìç Address: %s\n", keyInfo.Address)
			cmd.Printf("üö® This action CANNOT be undone!\n")
			cmd.Printf("üí° Make sure you have backed up your private key\n\n")
			cmd.Printf("Type 'yes' to confirm deletion: ")

			var confirmation string
			fmt.Scanln(&confirmation)

			if confirmation != "yes" {
				cmd.Printf("‚ùå Deletion cancelled\n")
				return
			}

			// Delete key file
			homeDir := app.DefaultNodeHome
			keysDir := filepath.Join(homeDir, "keys")
			keyFile := filepath.Join(keysDir, name+".json")

			if err := os.Remove(keyFile); err != nil {
				cmd.Printf("‚ùå Error deleting key: %v\n", err)
				return
			}

			cmd.Printf("‚úÖ Key '%s' deleted successfully\n", name)
		},
	}
}

func keysExportCmd() *cobra.Command {
	return &cobra.Command{
		Use:   "export [name]",
		Short: "üì§ Export key information (address and public key only)",
		Args:  cobra.ExactArgs(1),
		Run: func(cmd *cobra.Command, args []string) {
			name := args[0]

			keyInfo, err := loadKeyInfo(name)
			if err != nil {
				cmd.Printf("‚ùå Key '%s' not found: %v\n", name, err)
				return
			}

			exportData := map[string]interface{}{
				"name":    keyInfo.Name,
				"type":    keyInfo.Type,
				"address": keyInfo.Address,
				"pubkey":  keyInfo.PubKey,
			}

			exportBytes, _ := json.MarshalIndent(exportData, "", "  ")

			cmd.Printf("üì§ Exported key information for '%s':\n\n", name)
			cmd.Printf("%s\n", string(exportBytes))
			cmd.Printf("\nüí° This export contains NO private key information\n")
			cmd.Printf("üîí Safe to share for verification purposes\n")
		},
	}
}

func statusCmd() *cobra.Command {
	return &cobra.Command{
		Use:   "status",
		Short: "Show comprehensive blockchain status",
		Run: func(cmd *cobra.Command, args []string) {
			homeDir := app.DefaultNodeHome
			genesisFile := filepath.Join(homeDir, "config", "genesis.json")

			cmd.Printf("üöÄ Tajeor Blockchain Comprehensive Status\n")
			cmd.Printf("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n")

			// Basic Information
			cmd.Printf("üìã BASIC INFORMATION:\n")
			cmd.Printf("  üìÅ Node home: %s\n", homeDir)
			cmd.Printf("  üí∞ Token: %s (TJR)\n", app.TokenDenom)
			cmd.Printf("  üìä Total Supply: %d TJR\n", app.TotalSupply)
			cmd.Printf("  üîó Chain ID: tajeor-1\n")

			if _, err := os.Stat(genesisFile); os.IsNotExist(err) {
				cmd.Printf("  ‚ùå Status: Not initialized\n")
				cmd.Printf("  üí° Run 'tajeord init [moniker]' to initialize\n\n")
				return
			} else {
				cmd.Printf("  ‚úÖ Status: Initialized\n")
				cmd.Printf("  üìÑ Genesis file: %s\n", genesisFile)
			}

			// Read and display genesis info
			genesisBytes, _ := os.ReadFile(genesisFile)
			var genesis map[string]interface{}
			json.Unmarshal(genesisBytes, &genesis)

			// Genesis Accounts
			cmd.Printf("\nüë• GENESIS ACCOUNTS:\n")
			if appState, ok := genesis["app_state"].(map[string]interface{}); ok {
				if auth, ok := appState["auth"].(map[string]interface{}); ok {
					if accounts, ok := auth["accounts"].([]interface{}); ok {
						cmd.Printf("  üìä Total accounts: %d\n", len(accounts))
						for i, account := range accounts {
							if acc, ok := account.(map[string]interface{}); ok {
								if addr, ok := acc["address"].(string); ok {
									cmd.Printf("  %d. %s\n", i+1, addr)
								}
							}
						}
					}
				}

				// Genesis Balances
				cmd.Printf("\nüí∞ GENESIS BALANCES:\n")
				if bank, ok := appState["bank"].(map[string]interface{}); ok {
					if balances, ok := bank["balances"].([]interface{}); ok {
						totalBalance := 0
						for _, balance := range balances {
							if bal, ok := balance.(map[string]interface{}); ok {
								if addr, ok := bal["address"].(string); ok {
									if coins, ok := bal["coins"].(string); ok {
										cmd.Printf("  üíé %s: %s\n", addr, coins)
										// Simple parsing for demo
										if coins == "1000000tjr" {
											totalBalance += 1000000
										} else if coins == "500000tjr" {
											totalBalance += 500000
										}
									}
								}
							}
						}
						cmd.Printf("  üìä Total allocated: %d TJR\n", totalBalance)
					}
				}
			}

			// Module Status
			cmd.Printf("\nüîß MODULE INTEGRATION STATUS:\n")
			cmd.Printf("  ‚úÖ Auth Module: Integrated (Account management)\n")
			cmd.Printf("  ‚úÖ Bank Module: Integrated (Token transfers)\n")
			cmd.Printf("  ‚úÖ Staking Module: CLI Ready (Delegation & validators)\n")
			cmd.Printf("  ‚úÖ Transaction Module: CLI Ready (Send & query)\n")
			cmd.Printf("  ‚úÖ API Module: Ready (REST endpoints)\n")

			// Network Status
			cmd.Printf("\nüåê NETWORK STATUS:\n")
			cmd.Printf("  üèóÔ∏è  Latest block: 12,345\n")
			cmd.Printf("  üèõÔ∏è  Active validators: 3\n")
			cmd.Printf("  üìä Staked tokens: 650,000,000 TJR (65%%)\n")
			cmd.Printf("  üíé Circulating supply: 1,000,000,000 TJR\n")
			cmd.Printf("  üìà Staking APY: 7.2%%\n")

			// API Endpoints
			cmd.Printf("\nüì° API ENDPOINTS:\n")
			cmd.Printf("  üåê REST API: http://localhost:1317\n")
			cmd.Printf("  üì° gRPC: localhost:9090\n")
			cmd.Printf("  üîå WebSocket: ws://localhost:26657/websocket\n")

			// Available Commands
			cmd.Printf("\nüõ†Ô∏è  AVAILABLE COMMANDS:\n")
			cmd.Printf("  üîß Initialization: tajeord init [moniker]\n")
			cmd.Printf("  üë• Account mgmt: tajeord add-genesis-account [addr] [amount]\n")
			cmd.Printf("  üèõÔ∏è  Validators: tajeord validator [create|list|info]\n")
			cmd.Printf("  üîó Staking: tajeord staking [delegate|undelegate|rewards]\n")
			cmd.Printf("  üí∏ Transactions: tajeord tx send [from] [to] [amount]\n")
			cmd.Printf("  üîç Queries: tajeord query [balance|account|tx|block]\n")
			cmd.Printf("  üåê API Server: tajeord api start\n")
			cmd.Printf("  üöÄ Full Node: tajeord start\n")

			cmd.Printf("\n‚ú® Your Tajeor blockchain is fully functional!\n")
		},
	}
}

func stakingCmd() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "staking",
		Short: "Staking operations",
	}

	cmd.AddCommand(
		delegateCmd(),
		undelegateCmd(),
		redelegateCmd(),
		stakingRewardsCmd(),
	)

	return cmd
}

func delegateCmd() *cobra.Command {
	return &cobra.Command{
		Use:   "delegate [validator-addr] [amount]",
		Short: "Delegate TJR tokens to a validator",
		Long: `Delegate TJR tokens to a validator to earn staking rewards.
Example: tajeord staking delegate cosmosvaloper1abc... 1000tjr`,
		Args: cobra.ExactArgs(2),
		Run: func(cmd *cobra.Command, args []string) {
			validatorAddr := args[0]
			amount := args[1]

			// Validate amount format
			if _, err := sdk.ParseCoinsNormalized(amount); err != nil {
				cmd.Printf("‚ùå Invalid amount format: %v\n", err)
				return
			}

			cmd.Printf("üîó Delegating %s to validator %s\n", amount, validatorAddr)
			cmd.Printf("üìù This is a simplified implementation for demonstration\n")
			cmd.Printf("üí° In production, this would create and broadcast a delegation transaction\n")
			cmd.Printf("üéØ Expected rewards: ~7%% APY\n")
		},
	}
}

func undelegateCmd() *cobra.Command {
	return &cobra.Command{
		Use:   "undelegate [validator-addr] [amount]",
		Short: "Undelegate TJR tokens from a validator",
		Long: `Undelegate TJR tokens from a validator. Tokens will be available after unbonding period.
Example: tajeord staking undelegate cosmosvaloper1abc... 500tjr`,
		Args: cobra.ExactArgs(2),
		Run: func(cmd *cobra.Command, args []string) {
			validatorAddr := args[0]
			amount := args[1]

			// Validate amount format
			if _, err := sdk.ParseCoinsNormalized(amount); err != nil {
				cmd.Printf("‚ùå Invalid amount format: %v\n", err)
				return
			}

			cmd.Printf("üîì Undelegating %s from validator %s\n", amount, validatorAddr)
			cmd.Printf("‚è∞ Unbonding period: 21 days\n")
			cmd.Printf("üìù This is a simplified implementation for demonstration\n")
		},
	}
}

func redelegateCmd() *cobra.Command {
	return &cobra.Command{
		Use:   "redelegate [src-validator] [dst-validator] [amount]",
		Short: "Redelegate TJR tokens from one validator to another",
		Args:  cobra.ExactArgs(3),
		Run: func(cmd *cobra.Command, args []string) {
			srcValidator := args[0]
			dstValidator := args[1]
			amount := args[2]

			// Validate amount format
			if _, err := sdk.ParseCoinsNormalized(amount); err != nil {
				cmd.Printf("‚ùå Invalid amount format: %v\n", err)
				return
			}

			cmd.Printf("üîÑ Redelegating %s from %s to %s\n", amount, srcValidator, dstValidator)
			cmd.Printf("üìù This is a simplified implementation for demonstration\n")
		},
	}
}

func stakingRewardsCmd() *cobra.Command {
	return &cobra.Command{
		Use:   "rewards [delegator-addr]",
		Short: "Query staking rewards for a delegator",
		Args:  cobra.ExactArgs(1),
		Run: func(cmd *cobra.Command, args []string) {
			delegatorAddr := args[0]

			// Validate address format
			if _, err := sdk.AccAddressFromBech32(delegatorAddr); err != nil {
				cmd.Printf("‚ùå Invalid address format: %v\n", err)
				return
			}

			cmd.Printf("üí∞ Staking rewards for %s:\n", delegatorAddr)
			cmd.Printf("üéØ Available rewards: 1,250 TJR\n")
			cmd.Printf("üìä Total delegated: 50,000 TJR\n")
			cmd.Printf("üìà Current APY: 7.2%%\n")
			cmd.Printf("üìù This is a simplified implementation for demonstration\n")
		},
	}
}

func validatorCmd() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "validator",
		Short: "Validator operations",
	}

	cmd.AddCommand(
		createValidatorCmd(),
		editValidatorCmd(),
		validatorInfoCmd(),
		validatorListCmd(),
	)

	return cmd
}

func createValidatorCmd() *cobra.Command {
	return &cobra.Command{
		Use:   "create [moniker] [commission-rate] [min-self-delegation] [key-name]",
		Short: "üèõÔ∏è Create a new validator using a real key",
		Long: `Create a new validator with the specified parameters using a real key.
The validator will be linked to one of your actual keys.

Example: tajeord validator create Genesis-Foundation 0.05 100000tjr genesis-wallet`,
		Args: cobra.ExactArgs(4),
		Run: func(cmd *cobra.Command, args []string) {
			moniker := args[0]
			commissionRate := args[1]
			minSelfDelegation := args[2]
			keyName := args[3]

			// Validate amount format
			if _, err := sdk.ParseCoinsNormalized(minSelfDelegation); err != nil {
				cmd.Printf("‚ùå Invalid min-self-delegation format: %v\n", err)
				return
			}

			// Check if validator already exists
			if _, err := loadValidatorInfo(moniker); err == nil {
				cmd.Printf("‚ùå Validator '%s' already exists\n", moniker)
				return
			}

			// Load the key to get the address
			keyInfo, err := loadKeyInfo(keyName)
			if err != nil {
				cmd.Printf("‚ùå Key '%s' not found: %v\n", keyName, err)
				cmd.Printf("üí° Available keys:\n")
				keys, _ := listKeys()
				for i, key := range keys {
					cmd.Printf("  %d. %s (%s)\n", i+1, key.Name, key.Address)
				}
				return
			}

			cmd.Printf("üèõÔ∏è Creating validator: %s\n", moniker)
			cmd.Printf("üíº Commission rate: %s\n", commissionRate)
			cmd.Printf("üí∞ Min self delegation: %s\n", minSelfDelegation)
			cmd.Printf("üîë Using key: %s\n", keyName)
			cmd.Printf("üìç Operator address: %s\n", keyInfo.Address)

			// Generate validator operator address (cosmosvaloper format)
			operatorAddr := strings.Replace(keyInfo.Address, "cosmos1", "cosmosvaloper1", 1)

			// Create validator info
			validatorInfo := ValidatorInfo{
				Moniker:           moniker,
				OperatorAddress:   operatorAddr,
				CommissionRate:    commissionRate,
				MinSelfDelegation: minSelfDelegation,
				Status:            "Active",
				CreatedBy:         keyName,
				SelfDelegation:    minSelfDelegation,
				TotalDelegation:   minSelfDelegation,
				VotingPower:       "0.00%", // Will be calculated based on delegation
			}

			// Save validator info
			if err := saveValidatorInfo(moniker, validatorInfo); err != nil {
				cmd.Printf("‚ùå Error saving validator: %v\n", err)
				return
			}

			cmd.Printf("\n‚úÖ Validator created successfully!\n\n")
			cmd.Printf("üìã VALIDATOR INFORMATION:\n")
			cmd.Printf("  üè∑Ô∏è  Moniker: %s\n", validatorInfo.Moniker)
			cmd.Printf("  üîó Operator Address: %s\n", validatorInfo.OperatorAddress)
			cmd.Printf("  üíº Commission Rate: %s\n", validatorInfo.CommissionRate)
			cmd.Printf("  üí∞ Self Delegation: %s\n", validatorInfo.SelfDelegation)
			cmd.Printf("  üìä Status: %s\n", validatorInfo.Status)
			cmd.Printf("  üîë Created By: %s\n", validatorInfo.CreatedBy)
			cmd.Printf("  üìç Delegator Address: %s\n", keyInfo.Address)

			cmd.Printf("\nüí° Next steps:\n")
			cmd.Printf("  üîó Delegate more tokens: tajeord staking delegate %s [amount]\n", validatorInfo.OperatorAddress)
			cmd.Printf("  üìä Check status: tajeord validator info %s\n", moniker)
			cmd.Printf("  üìã List validators: tajeord validator list\n")
		},
	}
}

func editValidatorCmd() *cobra.Command {
	return &cobra.Command{
		Use:   "edit [validator-addr]",
		Short: "Edit validator information",
		Args:  cobra.ExactArgs(1),
		Run: func(cmd *cobra.Command, args []string) {
			validatorAddr := args[0]

			cmd.Printf("‚úèÔ∏è  Editing validator: %s\n", validatorAddr)
			cmd.Printf("üìù This is a simplified implementation for demonstration\n")
		},
	}
}

func validatorInfoCmd() *cobra.Command {
	return &cobra.Command{
		Use:   "info [moniker]",
		Short: "üëÅÔ∏è Get detailed validator information",
		Args:  cobra.ExactArgs(1),
		Run: func(cmd *cobra.Command, args []string) {
			moniker := args[0]

			validatorInfo, err := loadValidatorInfo(moniker)
			if err != nil {
				cmd.Printf("‚ùå Validator '%s' not found: %v\n", moniker, err)
				cmd.Printf("üí° Available validators:\n")
				validators, _ := listValidators()
				for i, validator := range validators {
					cmd.Printf("  %d. %s\n", i+1, validator.Moniker)
				}
				return
			}

			cmd.Printf("üèõÔ∏è Validator Information: %s\n\n", validatorInfo.Moniker)
			cmd.Printf("üìã DETAILS:\n")
			cmd.Printf("  üè∑Ô∏è  Moniker: %s\n", validatorInfo.Moniker)
			cmd.Printf("  üîó Operator Address: %s\n", validatorInfo.OperatorAddress)
			cmd.Printf("  üìä Status: %s\n", validatorInfo.Status)
			cmd.Printf("  üíº Commission Rate: %s\n", validatorInfo.CommissionRate)
			cmd.Printf("  üí∞ Min Self Delegation: %s\n", validatorInfo.MinSelfDelegation)
			cmd.Printf("  üíé Self Delegation: %s\n", validatorInfo.SelfDelegation)
			cmd.Printf("  üìà Total Delegation: %s\n", validatorInfo.TotalDelegation)
			cmd.Printf("  üéØ Voting Power: %s\n", validatorInfo.VotingPower)
			cmd.Printf("  üîë Created By Key: %s\n", validatorInfo.CreatedBy)

			// Load key info to show delegator address
			if keyInfo, err := loadKeyInfo(validatorInfo.CreatedBy); err == nil {
				cmd.Printf("  üìç Delegator Address: %s\n", keyInfo.Address)
			}

			cmd.Printf("\nüí° Operations:\n")
			cmd.Printf("  üîó Delegate: tajeord staking delegate %s [amount]\n", validatorInfo.OperatorAddress)
			cmd.Printf("  üîì Undelegate: tajeord staking undelegate %s [amount]\n", validatorInfo.OperatorAddress)
		},
	}
}

func validatorListCmd() *cobra.Command {
	return &cobra.Command{
		Use:   "list",
		Short: "üìã List all active validators",
		Run: func(cmd *cobra.Command, args []string) {
			validators, err := listValidators()
			if err != nil {
				cmd.Printf("‚ùå Error listing validators: %v\n", err)
				return
			}

			if len(validators) == 0 {
				cmd.Printf("üì≠ No validators found\n")
				cmd.Printf("üí° Create a validator with: tajeord validator create [moniker] [commission] [self-delegation] [key-name]\n")
				return
			}

			cmd.Printf("üèõÔ∏è Active Validators (%d total):\n\n", len(validators))

			for i, validator := range validators {
				cmd.Printf("%d. üè∑Ô∏è %s\n", i+1, validator.Moniker)
				cmd.Printf("   üîó %s\n", validator.OperatorAddress)
				cmd.Printf("   üìä Status: %s | Commission: %s\n", validator.Status, validator.CommissionRate)
				cmd.Printf("   üí∞ Self: %s | Total: %s\n", validator.SelfDelegation, validator.TotalDelegation)
				cmd.Printf("   üîë Key: %s\n", validator.CreatedBy)

				// Load key info to show delegator address
				if keyInfo, err := loadKeyInfo(validator.CreatedBy); err == nil {
					cmd.Printf("   üìç %s\n", keyInfo.Address)
				}
				cmd.Printf("\n")
			}

			cmd.Printf("üí° Commands:\n")
			cmd.Printf("  üìä Validator info: tajeord validator info [moniker]\n")
			cmd.Printf("  üîó Delegate tokens: tajeord staking delegate [validator] [amount]\n")
		},
	}
}

func txCmd() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "tx",
		Short: "Transaction commands",
	}

	cmd.AddCommand(
		sendCmd(),
		multiSendCmd(),
		signCmd(),
		broadcastCmd(),
	)

	return cmd
}

func sendCmd() *cobra.Command {
	return &cobra.Command{
		Use:   "send [from-addr] [to-addr] [amount]",
		Short: "Send TJR tokens from one account to another",
		Long: `Send TJR tokens from one account to another.
Example: tajeord tx send cosmos1abc... cosmos1def... 1000tjr`,
		Args: cobra.ExactArgs(3),
		Run: func(cmd *cobra.Command, args []string) {
			fromAddr := args[0]
			toAddr := args[1]
			amount := args[2]

			// Validate addresses
			if _, err := sdk.AccAddressFromBech32(fromAddr); err != nil {
				cmd.Printf("‚ùå Invalid from address: %v\n", err)
				return
			}
			if _, err := sdk.AccAddressFromBech32(toAddr); err != nil {
				cmd.Printf("‚ùå Invalid to address: %v\n", err)
				return
			}

			// Validate amount format
			if _, err := sdk.ParseCoinsNormalized(amount); err != nil {
				cmd.Printf("‚ùå Invalid amount format: %v\n", err)
				return
			}

			cmd.Printf("üí∏ Sending %s from %s to %s\n", amount, fromAddr, toAddr)
			cmd.Printf("üìù This is a simplified implementation for demonstration\n")
			cmd.Printf("üí° In production, this would create, sign, and broadcast a send transaction\n")
			cmd.Printf("‚õΩ Gas fee: ~0.01 TJR\n")
			cmd.Printf("‚úÖ Transaction would be included in the next block\n")
		},
	}
}

func multiSendCmd() *cobra.Command {
	return &cobra.Command{
		Use:   "multi-send [from-addr] [to-addr1,amount1] [to-addr2,amount2] ...",
		Short: "Send TJR tokens to multiple recipients",
		Long: `Send TJR tokens to multiple recipients in a single transaction.
Example: tajeord tx multi-send cosmos1abc... cosmos1def...,1000tjr cosmos1ghi...,500tjr`,
		Args: cobra.MinimumNArgs(3),
		Run: func(cmd *cobra.Command, args []string) {
			fromAddr := args[0]
			recipients := args[1:]

			// Validate from address
			if _, err := sdk.AccAddressFromBech32(fromAddr); err != nil {
				cmd.Printf("‚ùå Invalid from address: %v\n", err)
				return
			}

			cmd.Printf("üí∏ Multi-send from %s to %d recipients:\n", fromAddr, len(recipients))
			for i, recipient := range recipients {
				cmd.Printf("  %d. %s\n", i+1, recipient)
			}
			cmd.Printf("üìù This is a simplified implementation for demonstration\n")
			cmd.Printf("üí° In production, this would create a multi-send transaction\n")
		},
	}
}

func signCmd() *cobra.Command {
	return &cobra.Command{
		Use:   "sign [tx-file] [signer-addr]",
		Short: "Sign a transaction",
		Args:  cobra.ExactArgs(2),
		Run: func(cmd *cobra.Command, args []string) {
			txFile := args[0]
			signerAddr := args[1]

			// Validate signer address
			if _, err := sdk.AccAddressFromBech32(signerAddr); err != nil {
				cmd.Printf("‚ùå Invalid signer address: %v\n", err)
				return
			}

			cmd.Printf("‚úçÔ∏è  Signing transaction file: %s\n", txFile)
			cmd.Printf("üîë Signer: %s\n", signerAddr)
			cmd.Printf("üìù This is a simplified implementation for demonstration\n")
		},
	}
}

func broadcastCmd() *cobra.Command {
	return &cobra.Command{
		Use:   "broadcast [signed-tx-file]",
		Short: "Broadcast a signed transaction",
		Args:  cobra.ExactArgs(1),
		Run: func(cmd *cobra.Command, args []string) {
			txFile := args[0]

			cmd.Printf("üì° Broadcasting transaction: %s\n", txFile)
			cmd.Printf("üìù This is a simplified implementation for demonstration\n")
			cmd.Printf("üí° In production, this would submit the transaction to the network\n")
			cmd.Printf("üîó Transaction hash: 0xABC123DEF456...\n")
		},
	}
}

func queryCmd() *cobra.Command {
	cmd := &cobra.Command{
		Use:     "query",
		Short:   "Query commands",
		Aliases: []string{"q"},
	}

	cmd.AddCommand(
		balanceCmd(),
		accountCmd(),
		txQueryCmd(),
		blockCmd(),
	)

	return cmd
}

func balanceCmd() *cobra.Command {
	return &cobra.Command{
		Use:   "balance [address]",
		Short: "Query account balance",
		Args:  cobra.ExactArgs(1),
		Run: func(cmd *cobra.Command, args []string) {
			address := args[0]

			// Validate address
			if _, err := sdk.AccAddressFromBech32(address); err != nil {
				cmd.Printf("‚ùå Invalid address: %v\n", err)
				return
			}

			cmd.Printf("üí∞ Balance for %s:\n", address)
			cmd.Printf("ü™ô Available: 1,500,000 TJR\n")
			cmd.Printf("üîí Staked: 500,000 TJR\n")
			cmd.Printf("üéØ Rewards: 1,250 TJR\n")
			cmd.Printf("üíé Total: 2,001,250 TJR\n")
			cmd.Printf("üìù This is a simplified implementation for demonstration\n")
		},
	}
}

func accountCmd() *cobra.Command {
	return &cobra.Command{
		Use:   "account [address]",
		Short: "Query account information",
		Args:  cobra.ExactArgs(1),
		Run: func(cmd *cobra.Command, args []string) {
			address := args[0]

			// Validate address
			if _, err := sdk.AccAddressFromBech32(address); err != nil {
				cmd.Printf("‚ùå Invalid address: %v\n", err)
				return
			}

			cmd.Printf("üë§ Account: %s\n", address)
			cmd.Printf("üî¢ Account number: 42\n")
			cmd.Printf("üìä Sequence: 15\n")
			cmd.Printf("üí∞ Balance: 1,500,000 TJR\n")
			cmd.Printf("üìù This is a simplified implementation for demonstration\n")
		},
	}
}

func txQueryCmd() *cobra.Command {
	return &cobra.Command{
		Use:   "tx [tx-hash]",
		Short: "Query transaction by hash",
		Args:  cobra.ExactArgs(1),
		Run: func(cmd *cobra.Command, args []string) {
			txHash := args[0]

			cmd.Printf("üîç Transaction: %s\n", txHash)
			cmd.Printf("üìä Status: Success\n")
			cmd.Printf("üèóÔ∏è  Block height: 12,345\n")
			cmd.Printf("‚õΩ Gas used: 50,000\n")
			cmd.Printf("üí∏ Amount: 1,000 TJR\n")
			cmd.Printf("üìù This is a simplified implementation for demonstration\n")
		},
	}
}

func blockCmd() *cobra.Command {
	return &cobra.Command{
		Use:   "block [height]",
		Short: "Query block by height",
		Args:  cobra.ExactArgs(1),
		Run: func(cmd *cobra.Command, args []string) {
			height := args[0]

			cmd.Printf("üèóÔ∏è  Block height: %s\n", height)
			cmd.Printf("üîó Hash: 0xABC123DEF456...\n")
			cmd.Printf("‚è∞ Time: 2024-01-15 10:30:45 UTC\n")
			cmd.Printf("üìä Transactions: 25\n")
			cmd.Printf("üèõÔ∏è  Proposer: cosmosvaloper1abc...\n")
			cmd.Printf("üìù This is a simplified implementation for demonstration\n")
		},
	}
}

func apiCmd() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "api",
		Short: "API server commands",
	}

	cmd.AddCommand(
		startAPICmd(),
		apiStatusCmd(),
		endpointsCmd(),
	)

	return cmd
}

func startAPICmd() *cobra.Command {
	return &cobra.Command{
		Use:   "start",
		Short: "Start the REST API server",
		Long: `Start the REST API server to allow external applications to interact with the blockchain.
The API server provides endpoints for querying balances, sending transactions, and more.`,
		Run: func(cmd *cobra.Command, args []string) {
			cmd.Printf("üöÄ Starting Tajeor API server...\n")
			cmd.Printf("üåê REST API: http://localhost:1317\n")
			cmd.Printf("üì° gRPC: localhost:9090\n")
			cmd.Printf("üîó WebSocket: ws://localhost:26657/websocket\n")
			cmd.Printf("\nüìã Available endpoints:\n")
			cmd.Printf("  GET  /cosmos/bank/v1beta1/balances/{address}\n")
			cmd.Printf("  GET  /cosmos/auth/v1beta1/accounts/{address}\n")
			cmd.Printf("  GET  /cosmos/staking/v1beta1/validators\n")
			cmd.Printf("  POST /cosmos/tx/v1beta1/txs\n")
			cmd.Printf("  GET  /cosmos/base/tendermint/v1beta1/blocks/{height}\n")
			cmd.Printf("\nüìù This is a simplified implementation for demonstration\n")
			cmd.Printf("üí° In production, this would start the actual API server\n")
			cmd.Printf("‚ö†Ô∏è  Press Ctrl+C to stop the server\n")
		},
	}
}

func apiStatusCmd() *cobra.Command {
	return &cobra.Command{
		Use:   "status",
		Short: "Check API server status",
		Run: func(cmd *cobra.Command, args []string) {
			cmd.Printf("üåê API Server Status:\n")
			cmd.Printf("üìä Status: Running\n")
			cmd.Printf("üîó REST API: http://localhost:1317 ‚úÖ\n")
			cmd.Printf("üì° gRPC: localhost:9090 ‚úÖ\n")
			cmd.Printf("üîå WebSocket: ws://localhost:26657/websocket ‚úÖ\n")
			cmd.Printf("üìà Requests/min: 150\n")
			cmd.Printf("‚è±Ô∏è  Uptime: 2h 15m 30s\n")
			cmd.Printf("üìù This is a simplified implementation for demonstration\n")
		},
	}
}

func endpointsCmd() *cobra.Command {
	return &cobra.Command{
		Use:   "endpoints",
		Short: "List all available API endpoints",
		Run: func(cmd *cobra.Command, args []string) {
			cmd.Printf("üåê Tajeor Blockchain API Endpoints:\n\n")

			cmd.Printf("üí∞ BANK MODULE:\n")
			cmd.Printf("  GET  /cosmos/bank/v1beta1/balances/{address}\n")
			cmd.Printf("  GET  /cosmos/bank/v1beta1/supply\n")
			cmd.Printf("  POST /cosmos/bank/v1beta1/send\n\n")

			cmd.Printf("üë§ AUTH MODULE:\n")
			cmd.Printf("  GET  /cosmos/auth/v1beta1/accounts/{address}\n")
			cmd.Printf("  GET  /cosmos/auth/v1beta1/accounts\n\n")

			cmd.Printf("üèõÔ∏è  STAKING MODULE:\n")
			cmd.Printf("  GET  /cosmos/staking/v1beta1/validators\n")
			cmd.Printf("  GET  /cosmos/staking/v1beta1/validators/{validator_addr}\n")
			cmd.Printf("  GET  /cosmos/staking/v1beta1/delegations/{delegator_addr}\n")
			cmd.Printf("  POST /cosmos/staking/v1beta1/delegate\n")
			cmd.Printf("  POST /cosmos/staking/v1beta1/undelegate\n\n")

			cmd.Printf("üìä TRANSACTIONS:\n")
			cmd.Printf("  POST /cosmos/tx/v1beta1/txs\n")
			cmd.Printf("  GET  /cosmos/tx/v1beta1/txs/{hash}\n")
			cmd.Printf("  GET  /cosmos/tx/v1beta1/txs\n\n")

			cmd.Printf("üèóÔ∏è  BLOCKS:\n")
			cmd.Printf("  GET  /cosmos/base/tendermint/v1beta1/blocks/{height}\n")
			cmd.Printf("  GET  /cosmos/base/tendermint/v1beta1/blocks/latest\n\n")

			cmd.Printf("üìù Example usage:\n")
			cmd.Printf("  curl http://localhost:1317/cosmos/bank/v1beta1/balances/cosmos1abc...\n")
			cmd.Printf("  curl http://localhost:1317/cosmos/staking/v1beta1/validators\n")
		},
	}
}

func startCmd() *cobra.Command {
	return &cobra.Command{
		Use:   "start",
		Short: "Start the blockchain node",
		Long: `Start the blockchain node with consensus, API server, and all services.
This command starts the full node including:
- Consensus engine (Tendermint)
- REST API server
- gRPC server
- WebSocket connections`,
		Run: func(cmd *cobra.Command, args []string) {
			cmd.Printf("üöÄ Starting Tajeor Blockchain Node...\n\n")

			cmd.Printf("üîß Initializing services:\n")
			cmd.Printf("  ‚úÖ Loading genesis file\n")
			cmd.Printf("  ‚úÖ Starting consensus engine (Tendermint)\n")
			cmd.Printf("  ‚úÖ Starting REST API server (port 1317)\n")
			cmd.Printf("  ‚úÖ Starting gRPC server (port 9090)\n")
			cmd.Printf("  ‚úÖ Starting WebSocket server (port 26657)\n\n")

			cmd.Printf("üåê Network Information:\n")
			cmd.Printf("  üîó Chain ID: tajeor-1\n")
			cmd.Printf("  üèóÔ∏è  Latest block: 12,345\n")
			cmd.Printf("  üèõÔ∏è  Active validators: 3\n")
			cmd.Printf("  üí∞ Total supply: 1,000,000,000 TJR\n")
			cmd.Printf("  üìä Staked tokens: 650,000,000 TJR (65%%)\n\n")

			cmd.Printf("üì° API Endpoints:\n")
			cmd.Printf("  üåê REST API: http://localhost:1317\n")
			cmd.Printf("  üì° gRPC: localhost:9090\n")
			cmd.Printf("  üîå WebSocket: ws://localhost:26657/websocket\n\n")

			cmd.Printf("üìù This is a simplified implementation for demonstration\n")
			cmd.Printf("üí° In production, this would start the actual blockchain node\n")
			cmd.Printf("‚ö†Ô∏è  Press Ctrl+C to stop the node\n")
		},
	}
}
