// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cosmos/gogoproto/grpc (interfaces: Server)
//
// Generated by this command:
//
//	mockgen -package mock -destination testutil/mock/grpc_server.go github.com/cosmos/gogoproto/grpc Server
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockServer is a mock of Server interface.
type MockServer struct {
	ctrl     *gomock.Controller
	recorder *MockServerMockRecorder
	isgomock struct{}
}

// MockServerMockRecorder is the mock recorder for MockServer.
type MockServerMockRecorder struct {
	mock *MockServer
}

// NewMockServer creates a new mock instance.
func NewMockServer(ctrl *gomock.Controller) *MockServer {
	mock := &MockServer{ctrl: ctrl}
	mock.recorder = &MockServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServer) EXPECT() *MockServerMockRecorder {
	return m.recorder
}

// RegisterService mocks base method.
func (m *MockServer) RegisterService(sd *grpc.ServiceDesc, ss any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterService", sd, ss)
}

// RegisterService indicates an expected call of RegisterService.
func (mr *MockServerMockRecorder) RegisterService(sd, ss any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterService", reflect.TypeOf((*MockServer)(nil).RegisterService), sd, ss)
}
