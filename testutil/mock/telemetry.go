// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

package mock

import (
	go_metrics "github.com/armon/go-metrics"
	"github.com/cosmos/cosmos-sdk/telemetry"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockMetrics is a mock of Metrics interface
type MockMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsMockRecorder
}

// MockMetricsMockRecorder is the mock recorder for MockMetrics
type MockMetricsMockRecorder struct {
	mock *MockMetrics
}

// NewMockMetrics creates a new mock instance
func NewMockMetrics(ctrl *gomock.Controller) *MockMetrics {
	mock := &MockMetrics{ctrl: ctrl}
	mock.recorder = &MockMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockMetrics) EXPECT() *MockMetricsMockRecorder {
	return _m.recorder
}

// Gather mocks base method
func (_m *MockMetrics) Gather(format string) (telemetry.GatherResponse, error) {
	ret := _m.ctrl.Call(_m, "Gather", format)
	ret0, _ := ret[0].(telemetry.GatherResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Gather indicates an expected call of Gather
func (_mr *MockMetricsMockRecorder) Gather(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Gather", reflect.TypeOf((*MockMetrics)(nil).Gather), arg0)
}

// ModuleMeasureSince mocks base method
func (_m *MockMetrics) ModuleMeasureSince(module string, start time.Time, keys ...string) {
	_s := []interface{}{module, start}
	for _, _x := range keys {
		_s = append(_s, _x)
	}
	_m.ctrl.Call(_m, "ModuleMeasureSince", _s...)
}

// ModuleMeasureSince indicates an expected call of ModuleMeasureSince
func (_mr *MockMetricsMockRecorder) ModuleMeasureSince(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ModuleMeasureSince", reflect.TypeOf((*MockMetrics)(nil).ModuleMeasureSince), _s...)
}

// ModuleSetGauge mocks base method
func (_m *MockMetrics) ModuleSetGauge(module string, val float32, keys ...string) {
	_s := []interface{}{module, val}
	for _, _x := range keys {
		_s = append(_s, _x)
	}
	_m.ctrl.Call(_m, "ModuleSetGauge", _s...)
}

// ModuleSetGauge indicates an expected call of ModuleSetGauge
func (_mr *MockMetricsMockRecorder) ModuleSetGauge(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ModuleSetGauge", reflect.TypeOf((*MockMetrics)(nil).ModuleSetGauge), _s...)
}

// IncrCounter mocks base method
func (_m *MockMetrics) IncrCounter(val float32, keys ...string) {
	_s := []interface{}{val}
	for _, _x := range keys {
		_s = append(_s, _x)
	}
	_m.ctrl.Call(_m, "IncrCounter", _s...)
}

// IncrCounter indicates an expected call of IncrCounter
func (_mr *MockMetricsMockRecorder) IncrCounter(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "IncrCounter", reflect.TypeOf((*MockMetrics)(nil).IncrCounter), _s...)
}

// IncrCounterWithLabels mocks base method
func (_m *MockMetrics) IncrCounterWithLabels(keys []string, val float32, labels []go_metrics.Label) {
	_m.ctrl.Call(_m, "IncrCounterWithLabels", keys, val, labels)
}

// IncrCounterWithLabels indicates an expected call of IncrCounterWithLabels
func (_mr *MockMetricsMockRecorder) IncrCounterWithLabels(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "IncrCounterWithLabels", reflect.TypeOf((*MockMetrics)(nil).IncrCounterWithLabels), arg0, arg1, arg2)
}

// SetGauge mocks base method
func (_m *MockMetrics) SetGauge(val float32, keys ...string) {
	_s := []interface{}{val}
	for _, _x := range keys {
		_s = append(_s, _x)
	}
	_m.ctrl.Call(_m, "SetGauge", _s...)
}

// SetGauge indicates an expected call of SetGauge
func (_mr *MockMetricsMockRecorder) SetGauge(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetGauge", reflect.TypeOf((*MockMetrics)(nil).SetGauge), _s...)
}

// SetGaugeWithLabels mocks base method
func (_m *MockMetrics) SetGaugeWithLabels(keys []string, val float32, labels []go_metrics.Label) {
	_m.ctrl.Call(_m, "SetGaugeWithLabels", keys, val, labels)
}

// SetGaugeWithLabels indicates an expected call of SetGaugeWithLabels
func (_mr *MockMetricsMockRecorder) SetGaugeWithLabels(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetGaugeWithLabels", reflect.TypeOf((*MockMetrics)(nil).SetGaugeWithLabels), arg0, arg1, arg2)
}

// MeasureSince mocks base method
func (_m *MockMetrics) MeasureSince(start time.Time, keys ...string) {
	_s := []interface{}{start}
	for _, _x := range keys {
		_s = append(_s, _x)
	}
	_m.ctrl.Call(_m, "MeasureSince", _s...)
}

// MeasureSince indicates an expected call of MeasureSince
func (_mr *MockMetricsMockRecorder) MeasureSince(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "MeasureSince", reflect.TypeOf((*MockMetrics)(nil).MeasureSince), _s...)
}
