// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: orijtech/cosmosloadtester/v1/loadtest_service.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RunLoadtestRequest_BroadcastTxMethod int32

const (
	// Default value. This value is unused.
	RunLoadtestRequest_BROADCAST_TX_METHOD_UNSPECIFIED RunLoadtestRequest_BroadcastTxMethod = 0
	RunLoadtestRequest_BROADCAST_TX_METHOD_SYNC        RunLoadtestRequest_BroadcastTxMethod = 1
	RunLoadtestRequest_BROADCAST_TX_METHOD_ASYNC       RunLoadtestRequest_BroadcastTxMethod = 2
	RunLoadtestRequest_BROADCAST_TX_METHOD_COMMIT      RunLoadtestRequest_BroadcastTxMethod = 3
)

// Enum value maps for RunLoadtestRequest_BroadcastTxMethod.
var (
	RunLoadtestRequest_BroadcastTxMethod_name = map[int32]string{
		0: "BROADCAST_TX_METHOD_UNSPECIFIED",
		1: "BROADCAST_TX_METHOD_SYNC",
		2: "BROADCAST_TX_METHOD_ASYNC",
		3: "BROADCAST_TX_METHOD_COMMIT",
	}
	RunLoadtestRequest_BroadcastTxMethod_value = map[string]int32{
		"BROADCAST_TX_METHOD_UNSPECIFIED": 0,
		"BROADCAST_TX_METHOD_SYNC":        1,
		"BROADCAST_TX_METHOD_ASYNC":       2,
		"BROADCAST_TX_METHOD_COMMIT":      3,
	}
)

func (x RunLoadtestRequest_BroadcastTxMethod) Enum() *RunLoadtestRequest_BroadcastTxMethod {
	p := new(RunLoadtestRequest_BroadcastTxMethod)
	*p = x
	return p
}

func (x RunLoadtestRequest_BroadcastTxMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RunLoadtestRequest_BroadcastTxMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_orijtech_cosmosloadtester_v1_loadtest_service_proto_enumTypes[0].Descriptor()
}

func (RunLoadtestRequest_BroadcastTxMethod) Type() protoreflect.EnumType {
	return &file_orijtech_cosmosloadtester_v1_loadtest_service_proto_enumTypes[0]
}

func (x RunLoadtestRequest_BroadcastTxMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RunLoadtestRequest_BroadcastTxMethod.Descriptor instead.
func (RunLoadtestRequest_BroadcastTxMethod) EnumDescriptor() ([]byte, []int) {
	return file_orijtech_cosmosloadtester_v1_loadtest_service_proto_rawDescGZIP(), []int{0, 0}
}

type RunLoadtestRequest_EndpointSelectMethod int32

const (
	// Default value. This value is unused.
	RunLoadtestRequest_ENDPOINT_SELECT_METHOD_UNSPECIFIED RunLoadtestRequest_EndpointSelectMethod = 0
	// Select only the supplied endpoint(s) for load testing (the default).
	RunLoadtestRequest_ENDPOINT_SELECT_METHOD_SUPPLIED RunLoadtestRequest_EndpointSelectMethod = 1
	// Select newly discovered endpoints only (excluding supplied endpoints).
	RunLoadtestRequest_ENDPOINT_SELECT_METHOD_DISCOVERED RunLoadtestRequest_EndpointSelectMethod = 2
	// Select from any of supplied and/or discovered endpoints.
	RunLoadtestRequest_ENDPOINT_SELECT_METHOD_ANY RunLoadtestRequest_EndpointSelectMethod = 3
)

// Enum value maps for RunLoadtestRequest_EndpointSelectMethod.
var (
	RunLoadtestRequest_EndpointSelectMethod_name = map[int32]string{
		0: "ENDPOINT_SELECT_METHOD_UNSPECIFIED",
		1: "ENDPOINT_SELECT_METHOD_SUPPLIED",
		2: "ENDPOINT_SELECT_METHOD_DISCOVERED",
		3: "ENDPOINT_SELECT_METHOD_ANY",
	}
	RunLoadtestRequest_EndpointSelectMethod_value = map[string]int32{
		"ENDPOINT_SELECT_METHOD_UNSPECIFIED": 0,
		"ENDPOINT_SELECT_METHOD_SUPPLIED":    1,
		"ENDPOINT_SELECT_METHOD_DISCOVERED":  2,
		"ENDPOINT_SELECT_METHOD_ANY":         3,
	}
)

func (x RunLoadtestRequest_EndpointSelectMethod) Enum() *RunLoadtestRequest_EndpointSelectMethod {
	p := new(RunLoadtestRequest_EndpointSelectMethod)
	*p = x
	return p
}

func (x RunLoadtestRequest_EndpointSelectMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RunLoadtestRequest_EndpointSelectMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_orijtech_cosmosloadtester_v1_loadtest_service_proto_enumTypes[1].Descriptor()
}

func (RunLoadtestRequest_EndpointSelectMethod) Type() protoreflect.EnumType {
	return &file_orijtech_cosmosloadtester_v1_loadtest_service_proto_enumTypes[1]
}

func (x RunLoadtestRequest_EndpointSelectMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RunLoadtestRequest_EndpointSelectMethod.Descriptor instead.
func (RunLoadtestRequest_EndpointSelectMethod) EnumDescriptor() ([]byte, []int) {
	return file_orijtech_cosmosloadtester_v1_loadtest_service_proto_rawDescGZIP(), []int{0, 1}
}

type RunLoadtestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifier of the client factory to use for generating load testing transactions.
	// Maps to --client-factory in tm-load-test.
	ClientFactory string `protobuf:"bytes,1,opt,name=client_factory,json=clientFactory,proto3" json:"client_factory,omitempty"`
	// The number of connections to open to each endpoint simultaneously.
	// Maps to --connections in tm-load-test.
	ConnectionCount int32 `protobuf:"varint,2,opt,name=connection_count,json=connectionCount,proto3" json:"connection_count,omitempty"`
	// The duration (in seconds) for which to handle the load test.
	// Maps to --time in tm-load-test.
	Duration *durationpb.Duration `protobuf:"bytes,3,opt,name=duration,proto3" json:"duration,omitempty"`
	// The period (in seconds) at which to send batches of transactions.
	// Maps to --send-period in tm-load-test.
	SendPeriod *durationpb.Duration `protobuf:"bytes,4,opt,name=send_period,json=sendPeriod,proto3" json:"send_period,omitempty"`
	// The number of transactions to generate each second on each connection, to each endpoint.
	// Maps to --rate in tm-load-test.
	TransactionsPerSecond int32 `protobuf:"varint,5,opt,name=transactions_per_second,json=transactionsPerSecond,proto3" json:"transactions_per_second,omitempty"`
	// The size of each transaction, in bytes - must be greater than 40.
	// Maps to --size in tm-load-test.
	TransactionSizeBytes int32 `protobuf:"varint,6,opt,name=transaction_size_bytes,json=transactionSizeBytes,proto3" json:"transaction_size_bytes,omitempty"`
	// The maximum number of transactions to send - set to -1 to turn off this limit.
	// Maps to --count in tm-load-test.
	TransactionCount int32 `protobuf:"varint,7,opt,name=transaction_count,json=transactionCount,proto3" json:"transaction_count,omitempty"`
	// The broadcast_tx method to use when submitting transactions - can be async, sync or commit.
	// Maps to --broadcast-tx-method in tm-load-test.
	BroadcastTxMethod RunLoadtestRequest_BroadcastTxMethod `protobuf:"varint,8,opt,name=broadcast_tx_method,json=broadcastTxMethod,proto3,enum=orijtech.cosmosloadtester.v1.RunLoadtestRequest_BroadcastTxMethod" json:"broadcast_tx_method,omitempty"`
	// A list of URLs indicating Tendermint WebSockets RPC endpoints to which to connect.
	// Maps to --endpoints in tm-load-test.
	Endpoints []string `protobuf:"bytes,9,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
	// The method by which to select endpoints.
	// Maps to --endpoint-select-method in tm-load-test.
	EndpointSelectMethod RunLoadtestRequest_EndpointSelectMethod `protobuf:"varint,10,opt,name=endpoint_select_method,json=endpointSelectMethod,proto3,enum=orijtech.cosmosloadtester.v1.RunLoadtestRequest_EndpointSelectMethod" json:"endpoint_select_method,omitempty"`
	// The minimum number of peers to expect when crawling the P2P network from the specified endpoint(s) prior to waiting for workers to connect.
	// Maps to --expect-peers in tm-load-test.
	ExpectPeersCount int32 `protobuf:"varint,11,opt,name=expect_peers_count,json=expectPeersCount,proto3" json:"expect_peers_count,omitempty"`
	// The maximum number of endpoints to use for testing, where 0 means unlimited.
	// Maps to --max-endpoints in tm-load-test.
	MaxEndpointCount int32 `protobuf:"varint,12,opt,name=max_endpoint_count,json=maxEndpointCount,proto3" json:"max_endpoint_count,omitempty"`
	// The number of seconds to wait for all required peers to connect if expect-peers > 0.
	// Maps to --peer-connect-timeout in tm-load-test.
	PeerConnectTimeout *durationpb.Duration `protobuf:"bytes,13,opt,name=peer_connect_timeout,json=peerConnectTimeout,proto3" json:"peer_connect_timeout,omitempty"`
	// The minimum number of peers to which each peer must be connected before starting the load test.
	// Maps to --min-peer-connectvity in tm-load-test.
	MinPeerConnectivityCount int32 `protobuf:"varint,14,opt,name=min_peer_connectivity_count,json=minPeerConnectivityCount,proto3" json:"min_peer_connectivity_count,omitempty"`
	// Where to store aggregate statistics (in CSV format) for the load test.
	// Maps to --stats-output in tm-load-test.
	StatsOutputFilePath string `protobuf:"bytes,15,opt,name=stats_output_file_path,json=statsOutputFilePath,proto3" json:"stats_output_file_path,omitempty"`
}

func (x *RunLoadtestRequest) Reset() {
	*x = RunLoadtestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orijtech_cosmosloadtester_v1_loadtest_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunLoadtestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunLoadtestRequest) ProtoMessage() {}

func (x *RunLoadtestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orijtech_cosmosloadtester_v1_loadtest_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunLoadtestRequest.ProtoReflect.Descriptor instead.
func (*RunLoadtestRequest) Descriptor() ([]byte, []int) {
	return file_orijtech_cosmosloadtester_v1_loadtest_service_proto_rawDescGZIP(), []int{0}
}

func (x *RunLoadtestRequest) GetClientFactory() string {
	if x != nil {
		return x.ClientFactory
	}
	return ""
}

func (x *RunLoadtestRequest) GetConnectionCount() int32 {
	if x != nil {
		return x.ConnectionCount
	}
	return 0
}

func (x *RunLoadtestRequest) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *RunLoadtestRequest) GetSendPeriod() *durationpb.Duration {
	if x != nil {
		return x.SendPeriod
	}
	return nil
}

func (x *RunLoadtestRequest) GetTransactionsPerSecond() int32 {
	if x != nil {
		return x.TransactionsPerSecond
	}
	return 0
}

func (x *RunLoadtestRequest) GetTransactionSizeBytes() int32 {
	if x != nil {
		return x.TransactionSizeBytes
	}
	return 0
}

func (x *RunLoadtestRequest) GetTransactionCount() int32 {
	if x != nil {
		return x.TransactionCount
	}
	return 0
}

func (x *RunLoadtestRequest) GetBroadcastTxMethod() RunLoadtestRequest_BroadcastTxMethod {
	if x != nil {
		return x.BroadcastTxMethod
	}
	return RunLoadtestRequest_BROADCAST_TX_METHOD_UNSPECIFIED
}

func (x *RunLoadtestRequest) GetEndpoints() []string {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

func (x *RunLoadtestRequest) GetEndpointSelectMethod() RunLoadtestRequest_EndpointSelectMethod {
	if x != nil {
		return x.EndpointSelectMethod
	}
	return RunLoadtestRequest_ENDPOINT_SELECT_METHOD_UNSPECIFIED
}

func (x *RunLoadtestRequest) GetExpectPeersCount() int32 {
	if x != nil {
		return x.ExpectPeersCount
	}
	return 0
}

func (x *RunLoadtestRequest) GetMaxEndpointCount() int32 {
	if x != nil {
		return x.MaxEndpointCount
	}
	return 0
}

func (x *RunLoadtestRequest) GetPeerConnectTimeout() *durationpb.Duration {
	if x != nil {
		return x.PeerConnectTimeout
	}
	return nil
}

func (x *RunLoadtestRequest) GetMinPeerConnectivityCount() int32 {
	if x != nil {
		return x.MinPeerConnectivityCount
	}
	return 0
}

func (x *RunLoadtestRequest) GetStatsOutputFilePath() string {
	if x != nil {
		return x.StatsOutputFilePath
	}
	return ""
}

type RunLoadtestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The total number of transactions sent.
	// Corresponds to total_time in tm-load-test.
	TotalTxs int64 `protobuf:"varint,1,opt,name=total_txs,json=totalTxs,proto3" json:"total_txs,omitempty"`
	// The total time taken to send `total_txs` transactions.
	// Corresponds to total_txs in tm-load-test.
	TotalTime *durationpb.Duration `protobuf:"bytes,2,opt,name=total_time,json=totalTime,proto3" json:"total_time,omitempty"`
	// The cumulative number of bytes sent as transactions.
	// Corresponds to total_bytes in tm-load-test.
	TotalBytes int64 `protobuf:"varint,3,opt,name=total_bytes,json=totalBytes,proto3" json:"total_bytes,omitempty"`
	// The rate at which transactions were submitted (tx/sec).
	// Corresponds to avg_tx_rate in tm-load-test.
	AvgTxsPerSecond float64 `protobuf:"fixed64,4,opt,name=avg_txs_per_second,json=avgTxsPerSecond,proto3" json:"avg_txs_per_second,omitempty"`
	// The rate at which data was transmitted in transactions (bytes/sec).
	// Corresponds to avg_data_rate in tm-load-test.
	AvgBytesPerSecond float64 `protobuf:"fixed64,5,opt,name=avg_bytes_per_second,json=avgBytesPerSecond,proto3" json:"avg_bytes_per_second,omitempty"`
	// The respective points per second from 0 until the request's max_time.
	PerSec []*PerSecond `protobuf:"bytes,6,rep,name=per_sec,json=perSec,proto3" json:"per_sec,omitempty"`
}

func (x *RunLoadtestResponse) Reset() {
	*x = RunLoadtestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orijtech_cosmosloadtester_v1_loadtest_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunLoadtestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunLoadtestResponse) ProtoMessage() {}

func (x *RunLoadtestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_orijtech_cosmosloadtester_v1_loadtest_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunLoadtestResponse.ProtoReflect.Descriptor instead.
func (*RunLoadtestResponse) Descriptor() ([]byte, []int) {
	return file_orijtech_cosmosloadtester_v1_loadtest_service_proto_rawDescGZIP(), []int{1}
}

func (x *RunLoadtestResponse) GetTotalTxs() int64 {
	if x != nil {
		return x.TotalTxs
	}
	return 0
}

func (x *RunLoadtestResponse) GetTotalTime() *durationpb.Duration {
	if x != nil {
		return x.TotalTime
	}
	return nil
}

func (x *RunLoadtestResponse) GetTotalBytes() int64 {
	if x != nil {
		return x.TotalBytes
	}
	return 0
}

func (x *RunLoadtestResponse) GetAvgTxsPerSecond() float64 {
	if x != nil {
		return x.AvgTxsPerSecond
	}
	return 0
}

func (x *RunLoadtestResponse) GetAvgBytesPerSecond() float64 {
	if x != nil {
		return x.AvgBytesPerSecond
	}
	return 0
}

func (x *RunLoadtestResponse) GetPerSec() []*PerSecond {
	if x != nil {
		return x.PerSec
	}
	return nil
}

type PerSecond struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicates the ordinal number of the current second e.g. for the 8th second, sec=7, 1st second, sec=0.
	// Second is creating by using the lower bounds/floor of the second e.g. values at:
	//    0.74 sec fall within sec=0
	//    9.94 sec fall within sec=9
	Sec int64 `protobuf:"varint,1,opt,name=sec,proto3" json:"sec,omitempty"`
	// Indicates the queries per second captured by stuffing points within a second booundary.
	Qps float64 `protobuf:"fixed64,2,opt,name=qps,proto3" json:"qps,omitempty"`
	// Bytes indicates the bytes sent within the time period.
	BytesSent float64 `protobuf:"fixed64,3,opt,name=bytes_sent,json=bytesSent,proto3" json:"bytes_sent,omitempty"`
	// Indicates the aggregated percentile values by bytes.
	BytesRankings *Ranking `protobuf:"bytes,4,opt,name=bytes_rankings,json=bytesRankings,proto3" json:"bytes_rankings,omitempty"`
	// Indicates the aggregated percentile values by latency.
	LatencyRankings *Ranking `protobuf:"bytes,5,opt,name=latency_rankings,json=latencyRankings,proto3" json:"latency_rankings,omitempty"`
}

func (x *PerSecond) Reset() {
	*x = PerSecond{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orijtech_cosmosloadtester_v1_loadtest_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerSecond) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerSecond) ProtoMessage() {}

func (x *PerSecond) ProtoReflect() protoreflect.Message {
	mi := &file_orijtech_cosmosloadtester_v1_loadtest_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerSecond.ProtoReflect.Descriptor instead.
func (*PerSecond) Descriptor() ([]byte, []int) {
	return file_orijtech_cosmosloadtester_v1_loadtest_service_proto_rawDescGZIP(), []int{2}
}

func (x *PerSecond) GetSec() int64 {
	if x != nil {
		return x.Sec
	}
	return 0
}

func (x *PerSecond) GetQps() float64 {
	if x != nil {
		return x.Qps
	}
	return 0
}

func (x *PerSecond) GetBytesSent() float64 {
	if x != nil {
		return x.BytesSent
	}
	return 0
}

func (x *PerSecond) GetBytesRankings() *Ranking {
	if x != nil {
		return x.BytesRankings
	}
	return nil
}

func (x *PerSecond) GetLatencyRankings() *Ranking {
	if x != nil {
		return x.LatencyRankings
	}
	return nil
}

type Percentile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The time relative to the request's start time.
	StartOffset *durationpb.Duration `protobuf:"bytes,1,opt,name=start_offset,json=startOffset,proto3" json:"start_offset,omitempty"`
	// The time between request send and receipt of a response.
	Latency *durationpb.Duration `protobuf:"bytes,2,opt,name=latency,proto3" json:"latency,omitempty"`
	// The number of bytes sent.
	BytesSent int64 `protobuf:"varint,3,opt,name=bytes_sent,json=bytesSent,proto3" json:"bytes_sent,omitempty"`
	// The human friendly value of the percentile's occurence. It is useful for easy debugging.
	AtStr string `protobuf:"bytes,4,opt,name=at_str,json=atStr,proto3" json:"at_str,omitempty"`
}

func (x *Percentile) Reset() {
	*x = Percentile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orijtech_cosmosloadtester_v1_loadtest_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Percentile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Percentile) ProtoMessage() {}

func (x *Percentile) ProtoReflect() protoreflect.Message {
	mi := &file_orijtech_cosmosloadtester_v1_loadtest_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Percentile.ProtoReflect.Descriptor instead.
func (*Percentile) Descriptor() ([]byte, []int) {
	return file_orijtech_cosmosloadtester_v1_loadtest_service_proto_rawDescGZIP(), []int{3}
}

func (x *Percentile) GetStartOffset() *durationpb.Duration {
	if x != nil {
		return x.StartOffset
	}
	return nil
}

func (x *Percentile) GetLatency() *durationpb.Duration {
	if x != nil {
		return x.Latency
	}
	return nil
}

func (x *Percentile) GetBytesSent() int64 {
	if x != nil {
		return x.BytesSent
	}
	return 0
}

func (x *Percentile) GetAtStr() string {
	if x != nil {
		return x.AtStr
	}
	return ""
}

type Ranking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The 50th percentile value aka the median.
	P50 *Percentile `protobuf:"bytes,1,opt,name=p50,proto3" json:"p50,omitempty"`
	// The 75th percentile value.
	P75 *Percentile `protobuf:"bytes,2,opt,name=p75,proto3" json:"p75,omitempty"`
	// The 90th percentile value.
	P90 *Percentile `protobuf:"bytes,3,opt,name=p90,proto3" json:"p90,omitempty"`
	// The 95th percentile value.
	P95 *Percentile `protobuf:"bytes,4,opt,name=p95,proto3" json:"p95,omitempty"`
	// The 99th percentile value, useful to identify outliers.
	P99 *Percentile `protobuf:"bytes,5,opt,name=p99,proto3" json:"p99,omitempty"`
}

func (x *Ranking) Reset() {
	*x = Ranking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orijtech_cosmosloadtester_v1_loadtest_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ranking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ranking) ProtoMessage() {}

func (x *Ranking) ProtoReflect() protoreflect.Message {
	mi := &file_orijtech_cosmosloadtester_v1_loadtest_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ranking.ProtoReflect.Descriptor instead.
func (*Ranking) Descriptor() ([]byte, []int) {
	return file_orijtech_cosmosloadtester_v1_loadtest_service_proto_rawDescGZIP(), []int{4}
}

func (x *Ranking) GetP50() *Percentile {
	if x != nil {
		return x.P50
	}
	return nil
}

func (x *Ranking) GetP75() *Percentile {
	if x != nil {
		return x.P75
	}
	return nil
}

func (x *Ranking) GetP90() *Percentile {
	if x != nil {
		return x.P90
	}
	return nil
}

func (x *Ranking) GetP95() *Percentile {
	if x != nil {
		return x.P95
	}
	return nil
}

func (x *Ranking) GetP99() *Percentile {
	if x != nil {
		return x.P99
	}
	return nil
}

var File_orijtech_cosmosloadtester_v1_loadtest_service_proto protoreflect.FileDescriptor

var file_orijtech_cosmosloadtester_v1_loadtest_service_proto_rawDesc = []byte{
	0x0a, 0x33, 0x6f, 0x72, 0x69, 0x6a, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x6c, 0x6f, 0x61, 0x64, 0x74, 0x65, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6c,
	0x6f, 0x61, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x6f, 0x72, 0x69, 0x6a, 0x74, 0x65, 0x63, 0x68, 0x2e,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x6c, 0x6f, 0x61, 0x64, 0x74, 0x65, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xe5, 0x09, 0x0a, 0x12, 0x52, 0x75, 0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x74, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3a, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x36, 0x0a,
	0x17, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x65, 0x72, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x72, 0x0a, 0x13, 0x62, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x78, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x6f, 0x72, 0x69, 0x6a, 0x74, 0x65, 0x63, 0x68,
	0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x6c, 0x6f, 0x61, 0x64, 0x74, 0x65, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x74, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x54, 0x78, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x11, 0x62, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x54, 0x78, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x7b, 0x0a, 0x16, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x6f, 0x72, 0x69,
	0x6a, 0x74, 0x65, 0x63, 0x68, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x6c, 0x6f, 0x61, 0x64,
	0x74, 0x65, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x4c, 0x6f, 0x61,
	0x64, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x52, 0x14, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x10, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x50, 0x65, 0x65, 0x72, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x14, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x70, 0x65,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x12, 0x3d, 0x0a, 0x1b, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x6d, 0x69, 0x6e, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x33, 0x0a, 0x16, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x73, 0x74, 0x61, 0x74, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x22, 0x95, 0x01, 0x0a, 0x11, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x54, 0x78, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x23, 0x0a, 0x1f, 0x42, 0x52,
	0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x54, 0x58, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f,
	0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x1c, 0x0a, 0x18, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x54, 0x58, 0x5f,
	0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x01, 0x12, 0x1d, 0x0a,
	0x19, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x54, 0x58, 0x5f, 0x4d, 0x45,
	0x54, 0x48, 0x4f, 0x44, 0x5f, 0x41, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a,
	0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x54, 0x58, 0x5f, 0x4d, 0x45, 0x54,
	0x48, 0x4f, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x10, 0x03, 0x22, 0xaa, 0x01, 0x0a,
	0x14, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x26, 0x0a, 0x22, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e,
	0x54, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x23, 0x0a,
	0x1f, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54,
	0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4c, 0x49, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x53,
	0x45, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x44, 0x49, 0x53,
	0x43, 0x4f, 0x56, 0x45, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x4e, 0x44,
	0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x4d, 0x45, 0x54,
	0x48, 0x4f, 0x44, 0x5f, 0x41, 0x4e, 0x59, 0x10, 0x03, 0x22, 0xad, 0x02, 0x0a, 0x13, 0x52, 0x75,
	0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x78, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x78, 0x73, 0x12, 0x38,
	0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x12, 0x61, 0x76, 0x67,
	0x5f, 0x74, 0x78, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x61, 0x76, 0x67, 0x54, 0x78, 0x73, 0x50, 0x65, 0x72,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x61, 0x76, 0x67, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x61, 0x76, 0x67, 0x42, 0x79, 0x74, 0x65, 0x73, 0x50, 0x65,
	0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x40, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x63, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x72, 0x69, 0x6a, 0x74,
	0x65, 0x63, 0x68, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x6c, 0x6f, 0x61, 0x64, 0x74, 0x65,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x53, 0x65, 0x63, 0x22, 0xee, 0x01, 0x0a, 0x09, 0x50, 0x65,
	0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x63, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x73, 0x65, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x71, 0x70, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x71, 0x70, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x0e, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x72, 0x69, 0x6a, 0x74, 0x65, 0x63, 0x68, 0x2e, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x6c, 0x6f, 0x61, 0x64, 0x74, 0x65, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x50, 0x0a, 0x10, 0x6c, 0x61, 0x74, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x72, 0x69, 0x6a, 0x74, 0x65, 0x63, 0x68, 0x2e, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x6c, 0x6f, 0x61, 0x64, 0x74, 0x65, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x6c, 0x61, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xb5, 0x01, 0x0a, 0x0a, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1d, 0x0a, 0x0a,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61,
	0x74, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x74, 0x53,
	0x74, 0x72, 0x22, 0xb5, 0x02, 0x0a, 0x07, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x3a,
	0x0a, 0x03, 0x70, 0x35, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x72,
	0x69, 0x6a, 0x74, 0x65, 0x63, 0x68, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x6c, 0x6f, 0x61,
	0x64, 0x74, 0x65, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x69, 0x6c, 0x65, 0x52, 0x03, 0x70, 0x35, 0x30, 0x12, 0x3a, 0x0a, 0x03, 0x70, 0x37,
	0x35, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x72, 0x69, 0x6a, 0x74, 0x65,
	0x63, 0x68, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x6c, 0x6f, 0x61, 0x64, 0x74, 0x65, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c,
	0x65, 0x52, 0x03, 0x70, 0x37, 0x35, 0x12, 0x3a, 0x0a, 0x03, 0x70, 0x39, 0x30, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x72, 0x69, 0x6a, 0x74, 0x65, 0x63, 0x68, 0x2e, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x6c, 0x6f, 0x61, 0x64, 0x74, 0x65, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x52, 0x03, 0x70,
	0x39, 0x30, 0x12, 0x3a, 0x0a, 0x03, 0x70, 0x39, 0x35, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x6f, 0x72, 0x69, 0x6a, 0x74, 0x65, 0x63, 0x68, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x6c, 0x6f, 0x61, 0x64, 0x74, 0x65, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x52, 0x03, 0x70, 0x39, 0x35, 0x12, 0x3a,
	0x0a, 0x03, 0x70, 0x39, 0x39, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x72,
	0x69, 0x6a, 0x74, 0x65, 0x63, 0x68, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x6c, 0x6f, 0x61,
	0x64, 0x74, 0x65, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x69, 0x6c, 0x65, 0x52, 0x03, 0x70, 0x39, 0x39, 0x32, 0xa3, 0x01, 0x0a, 0x0f, 0x4c,
	0x6f, 0x61, 0x64, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x8f,
	0x01, 0x0a, 0x0b, 0x52, 0x75, 0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x74, 0x65, 0x73, 0x74, 0x12, 0x30,
	0x2e, 0x6f, 0x72, 0x69, 0x6a, 0x74, 0x65, 0x63, 0x68, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x6c, 0x6f, 0x61, 0x64, 0x74, 0x65, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75,
	0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x31, 0x2e, 0x6f, 0x72, 0x69, 0x6a, 0x74, 0x65, 0x63, 0x68, 0x2e, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x6c, 0x6f, 0x61, 0x64, 0x74, 0x65, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x75, 0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x10, 0x2f, 0x76, 0x31,
	0x2f, 0x6c, 0x6f, 0x61, 0x64, 0x74, 0x65, 0x73, 0x74, 0x3a, 0x72, 0x75, 0x6e, 0x3a, 0x01, 0x2a,
	0x42, 0x49, 0x5a, 0x47, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f,
	0x72, 0x69, 0x6a, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x6c, 0x6f,
	0x61, 0x64, 0x74, 0x65, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6f,
	0x72, 0x69, 0x6a, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x6c, 0x6f,
	0x61, 0x64, 0x74, 0x65, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_orijtech_cosmosloadtester_v1_loadtest_service_proto_rawDescOnce sync.Once
	file_orijtech_cosmosloadtester_v1_loadtest_service_proto_rawDescData = file_orijtech_cosmosloadtester_v1_loadtest_service_proto_rawDesc
)

func file_orijtech_cosmosloadtester_v1_loadtest_service_proto_rawDescGZIP() []byte {
	file_orijtech_cosmosloadtester_v1_loadtest_service_proto_rawDescOnce.Do(func() {
		file_orijtech_cosmosloadtester_v1_loadtest_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_orijtech_cosmosloadtester_v1_loadtest_service_proto_rawDescData)
	})
	return file_orijtech_cosmosloadtester_v1_loadtest_service_proto_rawDescData
}

var file_orijtech_cosmosloadtester_v1_loadtest_service_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_orijtech_cosmosloadtester_v1_loadtest_service_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_orijtech_cosmosloadtester_v1_loadtest_service_proto_goTypes = []interface{}{
	(RunLoadtestRequest_BroadcastTxMethod)(0),    // 0: orijtech.cosmosloadtester.v1.RunLoadtestRequest.BroadcastTxMethod
	(RunLoadtestRequest_EndpointSelectMethod)(0), // 1: orijtech.cosmosloadtester.v1.RunLoadtestRequest.EndpointSelectMethod
	(*RunLoadtestRequest)(nil),                   // 2: orijtech.cosmosloadtester.v1.RunLoadtestRequest
	(*RunLoadtestResponse)(nil),                  // 3: orijtech.cosmosloadtester.v1.RunLoadtestResponse
	(*PerSecond)(nil),                            // 4: orijtech.cosmosloadtester.v1.PerSecond
	(*Percentile)(nil),                           // 5: orijtech.cosmosloadtester.v1.Percentile
	(*Ranking)(nil),                              // 6: orijtech.cosmosloadtester.v1.Ranking
	(*durationpb.Duration)(nil),                  // 7: google.protobuf.Duration
}
var file_orijtech_cosmosloadtester_v1_loadtest_service_proto_depIdxs = []int32{
	7,  // 0: orijtech.cosmosloadtester.v1.RunLoadtestRequest.duration:type_name -> google.protobuf.Duration
	7,  // 1: orijtech.cosmosloadtester.v1.RunLoadtestRequest.send_period:type_name -> google.protobuf.Duration
	0,  // 2: orijtech.cosmosloadtester.v1.RunLoadtestRequest.broadcast_tx_method:type_name -> orijtech.cosmosloadtester.v1.RunLoadtestRequest.BroadcastTxMethod
	1,  // 3: orijtech.cosmosloadtester.v1.RunLoadtestRequest.endpoint_select_method:type_name -> orijtech.cosmosloadtester.v1.RunLoadtestRequest.EndpointSelectMethod
	7,  // 4: orijtech.cosmosloadtester.v1.RunLoadtestRequest.peer_connect_timeout:type_name -> google.protobuf.Duration
	7,  // 5: orijtech.cosmosloadtester.v1.RunLoadtestResponse.total_time:type_name -> google.protobuf.Duration
	4,  // 6: orijtech.cosmosloadtester.v1.RunLoadtestResponse.per_sec:type_name -> orijtech.cosmosloadtester.v1.PerSecond
	6,  // 7: orijtech.cosmosloadtester.v1.PerSecond.bytes_rankings:type_name -> orijtech.cosmosloadtester.v1.Ranking
	6,  // 8: orijtech.cosmosloadtester.v1.PerSecond.latency_rankings:type_name -> orijtech.cosmosloadtester.v1.Ranking
	7,  // 9: orijtech.cosmosloadtester.v1.Percentile.start_offset:type_name -> google.protobuf.Duration
	7,  // 10: orijtech.cosmosloadtester.v1.Percentile.latency:type_name -> google.protobuf.Duration
	5,  // 11: orijtech.cosmosloadtester.v1.Ranking.p50:type_name -> orijtech.cosmosloadtester.v1.Percentile
	5,  // 12: orijtech.cosmosloadtester.v1.Ranking.p75:type_name -> orijtech.cosmosloadtester.v1.Percentile
	5,  // 13: orijtech.cosmosloadtester.v1.Ranking.p90:type_name -> orijtech.cosmosloadtester.v1.Percentile
	5,  // 14: orijtech.cosmosloadtester.v1.Ranking.p95:type_name -> orijtech.cosmosloadtester.v1.Percentile
	5,  // 15: orijtech.cosmosloadtester.v1.Ranking.p99:type_name -> orijtech.cosmosloadtester.v1.Percentile
	2,  // 16: orijtech.cosmosloadtester.v1.LoadtestService.RunLoadtest:input_type -> orijtech.cosmosloadtester.v1.RunLoadtestRequest
	3,  // 17: orijtech.cosmosloadtester.v1.LoadtestService.RunLoadtest:output_type -> orijtech.cosmosloadtester.v1.RunLoadtestResponse
	17, // [17:18] is the sub-list for method output_type
	16, // [16:17] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_orijtech_cosmosloadtester_v1_loadtest_service_proto_init() }
func file_orijtech_cosmosloadtester_v1_loadtest_service_proto_init() {
	if File_orijtech_cosmosloadtester_v1_loadtest_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_orijtech_cosmosloadtester_v1_loadtest_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunLoadtestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orijtech_cosmosloadtester_v1_loadtest_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunLoadtestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orijtech_cosmosloadtester_v1_loadtest_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerSecond); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orijtech_cosmosloadtester_v1_loadtest_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Percentile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orijtech_cosmosloadtester_v1_loadtest_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ranking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_orijtech_cosmosloadtester_v1_loadtest_service_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_orijtech_cosmosloadtester_v1_loadtest_service_proto_goTypes,
		DependencyIndexes: file_orijtech_cosmosloadtester_v1_loadtest_service_proto_depIdxs,
		EnumInfos:         file_orijtech_cosmosloadtester_v1_loadtest_service_proto_enumTypes,
		MessageInfos:      file_orijtech_cosmosloadtester_v1_loadtest_service_proto_msgTypes,
	}.Build()
	File_orijtech_cosmosloadtester_v1_loadtest_service_proto = out.File
	file_orijtech_cosmosloadtester_v1_loadtest_service_proto_rawDesc = nil
	file_orijtech_cosmosloadtester_v1_loadtest_service_proto_goTypes = nil
	file_orijtech_cosmosloadtester_v1_loadtest_service_proto_depIdxs = nil
}
