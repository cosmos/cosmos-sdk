// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: orijtech/cosmosloadtester/v1/loadtest_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LoadtestServiceClient is the client API for LoadtestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoadtestServiceClient interface {
	RunLoadtest(ctx context.Context, in *RunLoadtestRequest, opts ...grpc.CallOption) (*RunLoadtestResponse, error)
}

type loadtestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLoadtestServiceClient(cc grpc.ClientConnInterface) LoadtestServiceClient {
	return &loadtestServiceClient{cc}
}

func (c *loadtestServiceClient) RunLoadtest(ctx context.Context, in *RunLoadtestRequest, opts ...grpc.CallOption) (*RunLoadtestResponse, error) {
	out := new(RunLoadtestResponse)
	err := c.cc.Invoke(ctx, "/orijtech.cosmosloadtester.v1.LoadtestService/RunLoadtest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoadtestServiceServer is the server API for LoadtestService service.
// All implementations must embed UnimplementedLoadtestServiceServer
// for forward compatibility
type LoadtestServiceServer interface {
	RunLoadtest(context.Context, *RunLoadtestRequest) (*RunLoadtestResponse, error)
	mustEmbedUnimplementedLoadtestServiceServer()
}

// UnimplementedLoadtestServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLoadtestServiceServer struct {
}

func (UnimplementedLoadtestServiceServer) RunLoadtest(context.Context, *RunLoadtestRequest) (*RunLoadtestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunLoadtest not implemented")
}
func (UnimplementedLoadtestServiceServer) mustEmbedUnimplementedLoadtestServiceServer() {}

// UnsafeLoadtestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoadtestServiceServer will
// result in compilation errors.
type UnsafeLoadtestServiceServer interface {
	mustEmbedUnimplementedLoadtestServiceServer()
}

func RegisterLoadtestServiceServer(s grpc.ServiceRegistrar, srv LoadtestServiceServer) {
	s.RegisterService(&LoadtestService_ServiceDesc, srv)
}

func _LoadtestService_RunLoadtest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunLoadtestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadtestServiceServer).RunLoadtest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orijtech.cosmosloadtester.v1.LoadtestService/RunLoadtest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadtestServiceServer).RunLoadtest(ctx, req.(*RunLoadtestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LoadtestService_ServiceDesc is the grpc.ServiceDesc for LoadtestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoadtestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "orijtech.cosmosloadtester.v1.LoadtestService",
	HandlerType: (*LoadtestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunLoadtest",
			Handler:    _LoadtestService_RunLoadtest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "orijtech/cosmosloadtester/v1/loadtest_service.proto",
}
