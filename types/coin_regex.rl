// `coin_regex.go` is generated by regel using `ragel -Z coin_regex.rl`.
// do not directly edit `coin_regex.go`.
// source: types/coin_regex.rl
// nolint:gocritic,unused,ineffassign


// Regex parsing of denoms were as the following
// reDnmString = `[a-zA-Z][a-zA-Z0-9/:._-]{2,127}`
// reDecAmt    = `[[:digit:]]+(?:\.[[:digit:]]+)?|\.[[:digit:]]+`
// reSpc       = `[[:space:]]*`

// reDnm = regexp.MustCompile(fmt.Sprintf(`^%s$`, coinDenomRegex()))
// reDecCoin = regexp.MustCompile(fmt.Sprintf(`^(%s)%s(%s)$`, reDecAmt, reSpc, coinDenomRegex()))

package types

func MatchDenom(data []byte) bool {
%% machine scanner;
%% write data;

    if len(data) < 3 || len(data) > 128 {
        return false
    }
    cs, p, pe, eof := 0, 0, len(data), len(data)
    _ = eof
    %%{
        # Define character classes
        special = '/' | ':' | '.' | '_' | '-';
        alphabetNumber = [a-zA-Z0-9];

        denom_pattern = [a-zA-Z] (alphabetNumber | special){2,127};


        # Combined pattern for matching either a denomination or a decimal amount
        main := denom_pattern  @{ return true };

        write init;
        write exec;
    }%%
    return false
}