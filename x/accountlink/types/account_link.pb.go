// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmos/accountlink/v1/account_link.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AccountsMetadata contains data value for indexes map
// corresponding to a pair of owner address and account type
type AccountsMetadata struct {
	// addresses is a list of smart account addresses
	Addresses map[string]bool `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *AccountsMetadata) Reset()         { *m = AccountsMetadata{} }
func (m *AccountsMetadata) String() string { return proto.CompactTextString(m) }
func (*AccountsMetadata) ProtoMessage()    {}
func (*AccountsMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_53fd64b680f8aaca, []int{0}
}
func (m *AccountsMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountsMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountsMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountsMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountsMetadata.Merge(m, src)
}
func (m *AccountsMetadata) XXX_Size() int {
	return m.Size()
}
func (m *AccountsMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountsMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_AccountsMetadata proto.InternalMessageInfo

func (m *AccountsMetadata) GetAddresses() map[string]bool {
	if m != nil {
		return m.Addresses
	}
	return nil
}

// Condition or a set of rule that are check before any
// relationship can be formed
type Condition struct {
	// owner is the owner of the account
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	// account is the address of the smart account
	Account string `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	// messages are a set of processes that will be executed as part
	// of the condition checking operation
	Messages []*types.Any `protobuf:"bytes,3,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (m *Condition) Reset()         { *m = Condition{} }
func (m *Condition) String() string { return proto.CompactTextString(m) }
func (*Condition) ProtoMessage()    {}
func (*Condition) Descriptor() ([]byte, []int) {
	return fileDescriptor_53fd64b680f8aaca, []int{1}
}
func (m *Condition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Condition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Condition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Condition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Condition.Merge(m, src)
}
func (m *Condition) XXX_Size() int {
	return m.Size()
}
func (m *Condition) XXX_DiscardUnknown() {
	xxx_messageInfo_Condition.DiscardUnknown(m)
}

var xxx_messageInfo_Condition proto.InternalMessageInfo

func (m *Condition) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Condition) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *Condition) GetMessages() []*types.Any {
	if m != nil {
		return m.Messages
	}
	return nil
}

func init() {
	proto.RegisterType((*AccountsMetadata)(nil), "cosmos.accountlink.v1.AccountsMetadata")
	proto.RegisterMapType((map[string]bool)(nil), "cosmos.accountlink.v1.AccountsMetadata.AddressesEntry")
	proto.RegisterType((*Condition)(nil), "cosmos.accountlink.v1.Condition")
}

func init() {
	proto.RegisterFile("cosmos/accountlink/v1/account_link.proto", fileDescriptor_53fd64b680f8aaca)
}

var fileDescriptor_53fd64b680f8aaca = []byte{
	// 336 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0x41, 0x4e, 0x32, 0x31,
	0x1c, 0xc5, 0x29, 0x84, 0xef, 0x63, 0x6a, 0x62, 0x48, 0x83, 0xc9, 0xc0, 0xa2, 0x99, 0xb0, 0x9a,
	0x8d, 0xad, 0x68, 0x62, 0x0c, 0x71, 0x03, 0xc6, 0xa5, 0x9b, 0xea, 0xca, 0x0d, 0x29, 0x4c, 0x9d,
	0x4c, 0x80, 0x96, 0x4c, 0x0b, 0x3a, 0x27, 0x70, 0xeb, 0x29, 0x3c, 0x81, 0x87, 0x70, 0x49, 0x5c,
	0xb9, 0x34, 0xcc, 0x45, 0x0c, 0xed, 0x8c, 0x8a, 0x71, 0xd7, 0x97, 0xbe, 0xdf, 0xfb, 0xbf, 0xfe,
	0x0b, 0xc3, 0x89, 0xd2, 0x73, 0xa5, 0x29, 0x9f, 0x4c, 0xd4, 0x52, 0x9a, 0x59, 0x22, 0xa7, 0x74,
	0xd5, 0x2b, 0xe5, 0x68, 0xab, 0xc9, 0x22, 0x55, 0x46, 0xa1, 0x03, 0xe7, 0x24, 0x3f, 0x9c, 0x64,
	0xd5, 0xeb, 0xb4, 0x63, 0xa5, 0xe2, 0x99, 0xa0, 0xd6, 0x34, 0x5e, 0xde, 0x51, 0x2e, 0x33, 0x47,
	0x74, 0xda, 0x8e, 0x18, 0x59, 0x45, 0x0b, 0xdc, 0x8a, 0xee, 0x33, 0x80, 0xcd, 0x81, 0x0b, 0xd2,
	0x57, 0xc2, 0xf0, 0x88, 0x1b, 0x8e, 0x6e, 0xa0, 0xc7, 0xa3, 0x28, 0x15, 0x5a, 0x0b, 0xed, 0x83,
	0xa0, 0x16, 0xee, 0x1d, 0x9f, 0x92, 0x3f, 0xa7, 0x92, 0xdf, 0x2c, 0x19, 0x94, 0xe0, 0xa5, 0x34,
	0x69, 0xc6, 0xbe, 0x83, 0x3a, 0xe7, 0x70, 0x7f, 0xf7, 0x12, 0x35, 0x61, 0x6d, 0x2a, 0x32, 0x1f,
	0x04, 0x20, 0xf4, 0xd8, 0xf6, 0x88, 0x5a, 0xb0, 0xbe, 0xe2, 0xb3, 0xa5, 0xf0, 0xab, 0x01, 0x08,
	0x1b, 0xcc, 0x89, 0x7e, 0xf5, 0x0c, 0x74, 0x1f, 0x01, 0xf4, 0x2e, 0x94, 0x8c, 0x12, 0x93, 0x28,
	0x89, 0x08, 0xac, 0xab, 0x7b, 0x29, 0x52, 0xc7, 0x0e, 0xfd, 0xb7, 0x97, 0xc3, 0x56, 0x51, 0xb0,
	0x98, 0x71, 0x6d, 0xd2, 0x44, 0xc6, 0xcc, 0xd9, 0x90, 0x0f, 0xff, 0x17, 0xc5, 0x6d, 0xb2, 0xc7,
	0x4a, 0x89, 0x8e, 0x60, 0x63, 0x2e, 0xb4, 0xe6, 0xb1, 0xd0, 0x7e, 0xcd, 0x3e, 0xb5, 0x45, 0xdc,
	0x26, 0x49, 0xb9, 0x49, 0x32, 0x90, 0x19, 0xfb, 0x72, 0x0d, 0xfb, 0xaf, 0x1b, 0x0c, 0xd6, 0x1b,
	0x0c, 0x3e, 0x36, 0x18, 0x3c, 0xe5, 0xb8, 0xb2, 0xce, 0x71, 0xe5, 0x3d, 0xc7, 0x95, 0xdb, 0xc0,
	0x55, 0xd0, 0xd1, 0x94, 0x24, 0x8a, 0x3e, 0xec, 0xfc, 0xa5, 0xc9, 0x16, 0x42, 0x8f, 0xff, 0xd9,
	0xcc, 0x93, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x06, 0x59, 0xa4, 0xd0, 0xee, 0x01, 0x00, 0x00,
}

func (m *AccountsMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountsMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountsMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for k := range m.Addresses {
			v := m.Addresses[k]
			baseI := i
			i--
			if v {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintAccountLink(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintAccountLink(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Condition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Condition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Condition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for iNdEx := len(m.Messages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Messages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAccountLink(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintAccountLink(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintAccountLink(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAccountLink(dAtA []byte, offset int, v uint64) int {
	offset -= sovAccountLink(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AccountsMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for k, v := range m.Addresses {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovAccountLink(uint64(len(k))) + 1 + 1
			n += mapEntrySize + 1 + sovAccountLink(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Condition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovAccountLink(uint64(l))
	}
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovAccountLink(uint64(l))
	}
	if len(m.Messages) > 0 {
		for _, e := range m.Messages {
			l = e.Size()
			n += 1 + l + sovAccountLink(uint64(l))
		}
	}
	return n
}

func sovAccountLink(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAccountLink(x uint64) (n int) {
	return sovAccountLink(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AccountsMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccountLink
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountsMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountsMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountLink
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccountLink
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAccountLink
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Addresses == nil {
				m.Addresses = make(map[string]bool)
			}
			var mapkey string
			var mapvalue bool
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAccountLink
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAccountLink
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAccountLink
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthAccountLink
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapvaluetemp int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAccountLink
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvaluetemp |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					mapvalue = bool(mapvaluetemp != 0)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAccountLink(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthAccountLink
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Addresses[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccountLink(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAccountLink
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Condition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccountLink
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Condition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Condition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountLink
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccountLink
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccountLink
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountLink
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccountLink
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccountLink
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountLink
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccountLink
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAccountLink
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, &types.Any{})
			if err := m.Messages[len(m.Messages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccountLink(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAccountLink
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAccountLink(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAccountLink
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAccountLink
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAccountLink
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAccountLink
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAccountLink
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAccountLink
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAccountLink        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAccountLink          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAccountLink = fmt.Errorf("proto: unexpected end of group")
)
