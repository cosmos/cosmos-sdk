syntax = "proto3";

package cosmos.accounts.defaults.multisig.v1;

import "google/protobuf/any.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";

option go_package = "cosmossdk.io/x/accounts/defaults/multisig/v1";

// MsgInit is used to initialize a multisig account.
message MsgInit {
  repeated Member members = 1;
  Config          Config  = 2;
}

// MsgInitResponse is the response returned after account initialization.
message MsgInitResponse {}

message MsgCreateProposal {
  Proposal proposal = 1;
}

message MsgCreateProposalResponse {
  uint64 proposal_id = 1;
}

message MsgVote {
  uint64     proposal_id = 1;
  VoteOption vote        = 2;
}

message MsgVoteResponse {}

message MsgExecuteProposal {
  uint64 proposal_id = 1;
}

message MsgExecuteProposalResponse {
  repeated google.protobuf.Any responses = 1;
}

// MsgUpdateConfig is used to change the config or members.
message MsgUpdateConfig {
  // only the members that are changing are required, if their weight is 0, they are removed.
  repeated Member update_members = 1;

  // not all fields from Config can be changed
  Config Config = 2;
}

message MsgUpdateConfigResponse {}

message Member {
  string address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  uint64 weight  = 2;
}

// when aggregating on-chain I can only use the address
// off-chain would send a tx directly, won't create a proposal.

message Config {
  int64 threshold = 1;

  int64 quorum = 2;

  // voting_period is the duration in seconds for the voting period.
  int64 voting_period = 3;

  // revote defines if members can change their vote.
  bool revote = 4;

  // early_execution defines if the multisig can be executed before the voting period ends.
  bool early_execution = 5;
}

message Proposal {
  string   title                        = 1;
  string   summary                      = 2;
  repeated google.protobuf.Any messages = 3;

  // voting_period_end will be set by the account when the proposal is created.
  int64 voting_period_end = 4;

  ProposalStatus status = 5;
}

// QuerySequence is the request for the account sequence.
message QuerySequence {}

// QuerySequenceResponse returns the sequence of the account.
message QuerySequenceResponse {
  // sequence is the current sequence of the account.
  uint64 sequence = 1;
}

message QueryConfig {}

// QueryConfigResponse returns the config of the account.
message QueryConfigResponse {
  repeated Member members = 1;

  Config Config = 2;
}

message QueryProposal {
  uint64 proposal_id = 1;
}

message QueryProposalResponse {
  Proposal proposal = 1;
}

// ProposalStatus enumerates the valid proposal statuses.
enum ProposalStatus {
  // PROPOSAL_STATUS_UNSPECIFIED defines a no-op proposal status.
  PROPOSAL_STATUS_UNSPECIFIED = 0;
  // PROPOSAL_STATUS_VOTING_PERIOD defines the proposal status during the voting period.
  PROPOSAL_STATUS_VOTING_PERIOD = 1;
  // PROPOSAL_STATUS_PASSED defines the proposal status when the proposal passed.
  PROPOSAL_STATUS_PASSED = 2;
  // PROPOSAL_STATUS_REJECTED defines the proposal status when the proposal was rejected.
  PROPOSAL_STATUS_REJECTED = 3;
}

// VoteOption enumerates the valid vote options for a given proposal.
enum VoteOption {
  // VOTE_OPTION_UNSPECIFIED defines a no-op vote option.
  VOTE_OPTION_UNSPECIFIED = 0;
  // VOTE_OPTION_YES defines the yes proposal vote option.
  VOTE_OPTION_YES = 1;
  // VOTE_OPTION_ABSTAIN defines the abstain proposal vote option.
  VOTE_OPTION_ABSTAIN = 2;
  // VOTE_OPTION_NO defines the no proposal vote option.
  VOTE_OPTION_NO = 3;
}
