// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmos/changepubkey/v1beta1/pubkey_history.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PubKeyHistory struct {
	PubKey    []byte    `protobuf:"bytes,1,opt,name=pub_key,json=pubKey,proto3" json:"public_key,omitempty" yaml:"public_key"`
	StartTime time.Time `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time" yaml:"start_time"`
	EndTime   time.Time `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3,stdtime" json:"end_time" yaml:"end_time"`
}

func (m *PubKeyHistory) Reset()         { *m = PubKeyHistory{} }
func (m *PubKeyHistory) String() string { return proto.CompactTextString(m) }
func (*PubKeyHistory) ProtoMessage()    {}
func (*PubKeyHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_60a6d0a8f3ff57e6, []int{0}
}
func (m *PubKeyHistory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PubKeyHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PubKeyHistory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PubKeyHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubKeyHistory.Merge(m, src)
}
func (m *PubKeyHistory) XXX_Size() int {
	return m.Size()
}
func (m *PubKeyHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_PubKeyHistory.DiscardUnknown(m)
}

var xxx_messageInfo_PubKeyHistory proto.InternalMessageInfo

func (m *PubKeyHistory) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *PubKeyHistory) GetStartTime() time.Time {
	if m != nil {
		return m.StartTime
	}
	return time.Time{}
}

func (m *PubKeyHistory) GetEndTime() time.Time {
	if m != nil {
		return m.EndTime
	}
	return time.Time{}
}

// QueryPubKeyHistoryRequest is the request type for the Query/Proposal RPC method.
type QueryPubKeyHistoryRequest struct {
	// proposal_id defines the unique id of the proposal.
	ProposalId uint64 `protobuf:"varint,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
}

func (m *QueryPubKeyHistoryRequest) Reset()         { *m = QueryPubKeyHistoryRequest{} }
func (m *QueryPubKeyHistoryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPubKeyHistoryRequest) ProtoMessage()    {}
func (*QueryPubKeyHistoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_60a6d0a8f3ff57e6, []int{1}
}
func (m *QueryPubKeyHistoryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPubKeyHistoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPubKeyHistoryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPubKeyHistoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPubKeyHistoryRequest.Merge(m, src)
}
func (m *QueryPubKeyHistoryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPubKeyHistoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPubKeyHistoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPubKeyHistoryRequest proto.InternalMessageInfo

func (m *QueryPubKeyHistoryRequest) GetProposalId() uint64 {
	if m != nil {
		return m.ProposalId
	}
	return 0
}

// QueryPubKeyHistoryResponse is the response type for the Query/Proposal RPC method.
type QueryPubKeyHistoryResponse struct {
	Proposal PubKeyHistory `protobuf:"bytes,1,opt,name=proposal,proto3" json:"proposal"`
}

func (m *QueryPubKeyHistoryResponse) Reset()         { *m = QueryPubKeyHistoryResponse{} }
func (m *QueryPubKeyHistoryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPubKeyHistoryResponse) ProtoMessage()    {}
func (*QueryPubKeyHistoryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_60a6d0a8f3ff57e6, []int{2}
}
func (m *QueryPubKeyHistoryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPubKeyHistoryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPubKeyHistoryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPubKeyHistoryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPubKeyHistoryResponse.Merge(m, src)
}
func (m *QueryPubKeyHistoryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPubKeyHistoryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPubKeyHistoryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPubKeyHistoryResponse proto.InternalMessageInfo

func (m *QueryPubKeyHistoryResponse) GetProposal() PubKeyHistory {
	if m != nil {
		return m.Proposal
	}
	return PubKeyHistory{}
}

func init() {
	proto.RegisterType((*PubKeyHistory)(nil), "cosmos.changepubkey.v1beta1.PubKeyHistory")
	proto.RegisterType((*QueryPubKeyHistoryRequest)(nil), "cosmos.changepubkey.v1beta1.QueryPubKeyHistoryRequest")
	proto.RegisterType((*QueryPubKeyHistoryResponse)(nil), "cosmos.changepubkey.v1beta1.QueryPubKeyHistoryResponse")
}

func init() {
	proto.RegisterFile("cosmos/changepubkey/v1beta1/pubkey_history.proto", fileDescriptor_60a6d0a8f3ff57e6)
}

var fileDescriptor_60a6d0a8f3ff57e6 = []byte{
	// 486 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0x31, 0x6f, 0xd3, 0x40,
	0x14, 0xc7, 0x73, 0xa1, 0xb4, 0xe1, 0x02, 0x42, 0x9c, 0x3a, 0x94, 0x14, 0xec, 0xca, 0x53, 0x05,
	0xe4, 0x8e, 0xa6, 0x52, 0x91, 0x10, 0x53, 0x06, 0x04, 0x82, 0x21, 0x58, 0x0c, 0x88, 0x25, 0x3a,
	0xc7, 0x87, 0x63, 0x12, 0xfb, 0x1d, 0xbe, 0xbb, 0x0a, 0x0b, 0xb1, 0x20, 0xb1, 0x57, 0xe2, 0x8b,
	0x30, 0xf3, 0x09, 0x3a, 0x56, 0x62, 0x61, 0x0a, 0x28, 0x61, 0x62, 0xe4, 0x13, 0x20, 0xfb, 0x6c,
	0xd2, 0x48, 0x50, 0xc4, 0x64, 0xdf, 0xbb, 0xff, 0xff, 0xe7, 0xff, 0xbd, 0x7b, 0xc6, 0xb7, 0x47,
	0xa0, 0x12, 0x50, 0x6c, 0x34, 0xe6, 0x69, 0x24, 0xa4, 0x09, 0x26, 0x22, 0x67, 0x87, 0x7b, 0x81,
	0xd0, 0x7c, 0x8f, 0xd9, 0xe5, 0x70, 0x1c, 0x2b, 0x0d, 0x59, 0x4e, 0x65, 0x06, 0x1a, 0xc8, 0xb6,
	0x75, 0xd0, 0xd3, 0x0e, 0x5a, 0x39, 0x3a, 0x9b, 0x11, 0x44, 0x50, 0xea, 0x58, 0xf1, 0x66, 0x2d,
	0x1d, 0x37, 0x02, 0x88, 0xa6, 0x82, 0x95, 0xab, 0xc0, 0xbc, 0x60, 0x3a, 0x4e, 0x84, 0xd2, 0x3c,
	0x91, 0x95, 0xe0, 0x5a, 0x25, 0xe0, 0x32, 0x66, 0x3c, 0x4d, 0x41, 0x73, 0x1d, 0x43, 0xaa, 0xec,
	0xae, 0xf7, 0xbe, 0x89, 0x2f, 0x0d, 0x4c, 0xf0, 0x48, 0xe4, 0x0f, 0x6c, 0x12, 0x72, 0x1f, 0x6f,
	0x48, 0x13, 0x0c, 0x27, 0x22, 0xdf, 0x42, 0x3b, 0x68, 0xf7, 0x62, 0xbf, 0xfb, 0x63, 0xe6, 0x6e,
	0x4a, 0x13, 0x4c, 0xe3, 0x51, 0x51, 0xbd, 0x05, 0x49, 0xac, 0x45, 0x22, 0x75, 0xfe, 0x73, 0xe6,
	0x5e, 0xc9, 0x79, 0x32, 0xbd, 0xeb, 0x2d, 0x77, 0x3d, 0x7f, 0x5d, 0x96, 0x38, 0xf2, 0x0c, 0x63,
	0xa5, 0x79, 0xa6, 0x87, 0x45, 0xa0, 0xad, 0xe6, 0x0e, 0xda, 0x6d, 0xf7, 0x3a, 0xd4, 0x86, 0xa1,
	0x75, 0x5a, 0xfa, 0xb4, 0x4e, 0xdb, 0xbf, 0x7e, 0x3c, 0x73, 0x1b, 0x4b, 0xe4, 0xd2, 0xeb, 0x1d,
	0x7d, 0x75, 0x91, 0x7f, 0xa1, 0x2c, 0x14, 0x72, 0xe2, 0xe3, 0x96, 0x48, 0x43, 0xcb, 0x3d, 0xf7,
	0x4f, 0xee, 0x76, 0xc5, 0xbd, 0x6c, 0xb9, 0xb5, 0xd3, 0x52, 0x37, 0x44, 0x1a, 0x16, 0x52, 0xef,
	0x1e, 0xbe, 0xfa, 0xc4, 0x88, 0x2c, 0x5f, 0xe9, 0x85, 0x2f, 0x5e, 0x19, 0xa1, 0x34, 0x71, 0x71,
	0x5b, 0x66, 0x20, 0x41, 0xf1, 0xe9, 0x30, 0x0e, 0xcb, 0xb6, 0xac, 0xf9, 0xb8, 0x2e, 0x3d, 0x0c,
	0xbd, 0x97, 0xb8, 0xf3, 0x27, 0xb7, 0x92, 0x90, 0x2a, 0x41, 0x1e, 0xe3, 0x56, 0xad, 0x2d, 0xbd,
	0xed, 0xde, 0x0d, 0x7a, 0xc6, 0x45, 0xd3, 0x15, 0x4a, 0x7f, 0xad, 0xc8, 0xef, 0xff, 0x26, 0xf4,
	0x3e, 0x21, 0x7c, 0xbe, 0xfc, 0x18, 0xf9, 0x88, 0x70, 0x6b, 0x50, 0x95, 0xc9, 0xc1, 0x99, 0xc8,
	0xbf, 0x9e, 0xad, 0x73, 0xe7, 0xbf, 0x7d, 0xf6, 0x54, 0xde, 0xfe, 0xbb, 0xcf, 0xdf, 0x3f, 0x34,
	0xbb, 0xe4, 0x26, 0xab, 0xc6, 0x3c, 0x82, 0xc3, 0xe5, 0x74, 0x57, 0xb1, 0x14, 0x7b, 0x73, 0xaa,
	0x73, 0x6f, 0xfb, 0x83, 0xe3, 0xb9, 0x83, 0x4e, 0xe6, 0x0e, 0xfa, 0x36, 0x77, 0xd0, 0xd1, 0xc2,
	0x69, 0x9c, 0x2c, 0x9c, 0xc6, 0x97, 0x85, 0xd3, 0x78, 0x7e, 0x10, 0xc5, 0x7a, 0x6c, 0x02, 0x3a,
	0x82, 0xa4, 0x06, 0xda, 0x47, 0x57, 0x85, 0x13, 0xf6, 0x9a, 0x71, 0xa3, 0xc7, 0xab, 0x7f, 0x92,
	0xce, 0xa5, 0x50, 0xc1, 0x7a, 0x79, 0xe5, 0xfb, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x0e, 0xd1,
	0x47, 0xfc, 0x6d, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Proposal queries proposal details based on ProposalID.
	Proposal(ctx context.Context, in *QueryPubKeyHistoryRequest, opts ...grpc.CallOption) (*QueryPubKeyHistoryResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Proposal(ctx context.Context, in *QueryPubKeyHistoryRequest, opts ...grpc.CallOption) (*QueryPubKeyHistoryResponse, error) {
	out := new(QueryPubKeyHistoryResponse)
	err := c.cc.Invoke(ctx, "/cosmos.changepubkey.v1beta1.Query/Proposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Proposal queries proposal details based on ProposalID.
	Proposal(context.Context, *QueryPubKeyHistoryRequest) (*QueryPubKeyHistoryResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Proposal(ctx context.Context, req *QueryPubKeyHistoryRequest) (*QueryPubKeyHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Proposal not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Proposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPubKeyHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Proposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.changepubkey.v1beta1.Query/Proposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Proposal(ctx, req.(*QueryPubKeyHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cosmos.changepubkey.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Proposal",
			Handler:    _Query_Proposal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cosmos/changepubkey/v1beta1/pubkey_history.proto",
}

func (m *PubKeyHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PubKeyHistory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PubKeyHistory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.EndTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintPubkeyHistory(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x1a
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintPubkeyHistory(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x12
	if len(m.PubKey) > 0 {
		i -= len(m.PubKey)
		copy(dAtA[i:], m.PubKey)
		i = encodeVarintPubkeyHistory(dAtA, i, uint64(len(m.PubKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPubKeyHistoryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPubKeyHistoryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPubKeyHistoryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProposalId != 0 {
		i = encodeVarintPubkeyHistory(dAtA, i, uint64(m.ProposalId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryPubKeyHistoryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPubKeyHistoryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPubKeyHistoryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Proposal.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPubkeyHistory(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintPubkeyHistory(dAtA []byte, offset int, v uint64) int {
	offset -= sovPubkeyHistory(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PubKeyHistory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovPubkeyHistory(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovPubkeyHistory(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime)
	n += 1 + l + sovPubkeyHistory(uint64(l))
	return n
}

func (m *QueryPubKeyHistoryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProposalId != 0 {
		n += 1 + sovPubkeyHistory(uint64(m.ProposalId))
	}
	return n
}

func (m *QueryPubKeyHistoryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Proposal.Size()
	n += 1 + l + sovPubkeyHistory(uint64(l))
	return n
}

func sovPubkeyHistory(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPubkeyHistory(x uint64) (n int) {
	return sovPubkeyHistory(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PubKeyHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubkeyHistory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PubKeyHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PubKeyHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubkeyHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPubkeyHistory
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPubkeyHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = append(m.PubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PubKey == nil {
				m.PubKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubkeyHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPubkeyHistory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPubkeyHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubkeyHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPubkeyHistory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPubkeyHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.EndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPubkeyHistory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubkeyHistory
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPubkeyHistory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPubKeyHistoryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubkeyHistory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPubKeyHistoryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPubKeyHistoryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
			}
			m.ProposalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubkeyHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposalId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPubkeyHistory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubkeyHistory
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPubkeyHistory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPubKeyHistoryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubkeyHistory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPubKeyHistoryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPubKeyHistoryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubkeyHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPubkeyHistory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPubkeyHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Proposal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPubkeyHistory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubkeyHistory
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPubkeyHistory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPubkeyHistory(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPubkeyHistory
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPubkeyHistory
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPubkeyHistory
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPubkeyHistory
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPubkeyHistory
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPubkeyHistory
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPubkeyHistory        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPubkeyHistory          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPubkeyHistory = fmt.Errorf("proto: unexpected end of group")
)
