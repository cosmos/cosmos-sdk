// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmos/changepubkey/v1beta1/pubkey_history.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PubKeyHistory struct {
	PubKey    []byte    `protobuf:"bytes,1,opt,name=pub_key,json=pubKey,proto3" json:"public_key,omitempty" yaml:"public_key"`
	StartTime time.Time `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time" yaml:"start_time"`
	EndTime   time.Time `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3,stdtime" json:"end_time" yaml:"end_time"`
}

func (m *PubKeyHistory) Reset()         { *m = PubKeyHistory{} }
func (m *PubKeyHistory) String() string { return proto.CompactTextString(m) }
func (*PubKeyHistory) ProtoMessage()    {}
func (*PubKeyHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_60a6d0a8f3ff57e6, []int{0}
}
func (m *PubKeyHistory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PubKeyHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PubKeyHistory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PubKeyHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubKeyHistory.Merge(m, src)
}
func (m *PubKeyHistory) XXX_Size() int {
	return m.Size()
}
func (m *PubKeyHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_PubKeyHistory.DiscardUnknown(m)
}

var xxx_messageInfo_PubKeyHistory proto.InternalMessageInfo

func (m *PubKeyHistory) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *PubKeyHistory) GetStartTime() time.Time {
	if m != nil {
		return m.StartTime
	}
	return time.Time{}
}

func (m *PubKeyHistory) GetEndTime() time.Time {
	if m != nil {
		return m.EndTime
	}
	return time.Time{}
}

// QueryPubKeyHistoryRequest is the request type for the Query/PubKeyHistory RPC method.
type QueryPubKeyHistoryRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryPubKeyHistoryRequest) Reset()         { *m = QueryPubKeyHistoryRequest{} }
func (m *QueryPubKeyHistoryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPubKeyHistoryRequest) ProtoMessage()    {}
func (*QueryPubKeyHistoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_60a6d0a8f3ff57e6, []int{1}
}
func (m *QueryPubKeyHistoryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPubKeyHistoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPubKeyHistoryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPubKeyHistoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPubKeyHistoryRequest.Merge(m, src)
}
func (m *QueryPubKeyHistoryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPubKeyHistoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPubKeyHistoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPubKeyHistoryRequest proto.InternalMessageInfo

func (m *QueryPubKeyHistoryRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// QueryPubKeyHistoryResponse is the response type for the Query/PubKeyHistory RPC method.
type QueryPubKeyHistoryResponse struct {
	History []PubKeyHistory `protobuf:"bytes,1,rep,name=history,proto3" json:"history"`
}

func (m *QueryPubKeyHistoryResponse) Reset()         { *m = QueryPubKeyHistoryResponse{} }
func (m *QueryPubKeyHistoryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPubKeyHistoryResponse) ProtoMessage()    {}
func (*QueryPubKeyHistoryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_60a6d0a8f3ff57e6, []int{2}
}
func (m *QueryPubKeyHistoryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPubKeyHistoryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPubKeyHistoryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPubKeyHistoryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPubKeyHistoryResponse.Merge(m, src)
}
func (m *QueryPubKeyHistoryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPubKeyHistoryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPubKeyHistoryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPubKeyHistoryResponse proto.InternalMessageInfo

func (m *QueryPubKeyHistoryResponse) GetHistory() []PubKeyHistory {
	if m != nil {
		return m.History
	}
	return nil
}

// QueryPubKeyHistoricalEntryRequest is the request type for the Query/PubKeyHistoricalEntry RPC method.
type QueryPubKeyHistoricalEntryRequest struct {
	Address string    `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Time    time.Time `protobuf:"bytes,2,opt,name=time,proto3,stdtime" json:"time" yaml:"time"`
}

func (m *QueryPubKeyHistoricalEntryRequest) Reset()         { *m = QueryPubKeyHistoricalEntryRequest{} }
func (m *QueryPubKeyHistoricalEntryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPubKeyHistoricalEntryRequest) ProtoMessage()    {}
func (*QueryPubKeyHistoricalEntryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_60a6d0a8f3ff57e6, []int{3}
}
func (m *QueryPubKeyHistoricalEntryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPubKeyHistoricalEntryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPubKeyHistoricalEntryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPubKeyHistoricalEntryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPubKeyHistoricalEntryRequest.Merge(m, src)
}
func (m *QueryPubKeyHistoricalEntryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPubKeyHistoricalEntryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPubKeyHistoricalEntryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPubKeyHistoricalEntryRequest proto.InternalMessageInfo

func (m *QueryPubKeyHistoricalEntryRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryPubKeyHistoricalEntryRequest) GetTime() time.Time {
	if m != nil {
		return m.Time
	}
	return time.Time{}
}

// QueryPubKeyHistoricalEntryResponse is the response type for the Query/PubKeyHistoricalEntry RPC method.
type QueryPubKeyHistoricalEntryResponse struct {
	Entry PubKeyHistory `protobuf:"bytes,1,opt,name=entry,proto3" json:"entry"`
}

func (m *QueryPubKeyHistoricalEntryResponse) Reset()         { *m = QueryPubKeyHistoricalEntryResponse{} }
func (m *QueryPubKeyHistoricalEntryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPubKeyHistoricalEntryResponse) ProtoMessage()    {}
func (*QueryPubKeyHistoricalEntryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_60a6d0a8f3ff57e6, []int{4}
}
func (m *QueryPubKeyHistoricalEntryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPubKeyHistoricalEntryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPubKeyHistoricalEntryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPubKeyHistoricalEntryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPubKeyHistoricalEntryResponse.Merge(m, src)
}
func (m *QueryPubKeyHistoricalEntryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPubKeyHistoricalEntryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPubKeyHistoricalEntryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPubKeyHistoricalEntryResponse proto.InternalMessageInfo

func (m *QueryPubKeyHistoricalEntryResponse) GetEntry() PubKeyHistory {
	if m != nil {
		return m.Entry
	}
	return PubKeyHistory{}
}

// QueryLastPubKeyHistoricalEntryRequest is the request type for the Query/LastPubKeyHistoricalEntry RPC method.
type QueryLastPubKeyHistoricalEntryRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryLastPubKeyHistoricalEntryRequest) Reset()         { *m = QueryLastPubKeyHistoricalEntryRequest{} }
func (m *QueryLastPubKeyHistoricalEntryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLastPubKeyHistoricalEntryRequest) ProtoMessage()    {}
func (*QueryLastPubKeyHistoricalEntryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_60a6d0a8f3ff57e6, []int{5}
}
func (m *QueryLastPubKeyHistoricalEntryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastPubKeyHistoricalEntryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastPubKeyHistoricalEntryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastPubKeyHistoricalEntryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastPubKeyHistoricalEntryRequest.Merge(m, src)
}
func (m *QueryLastPubKeyHistoricalEntryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastPubKeyHistoricalEntryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastPubKeyHistoricalEntryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastPubKeyHistoricalEntryRequest proto.InternalMessageInfo

func (m *QueryLastPubKeyHistoricalEntryRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// QueryLastPubKeyHistoricalEntryResponse is the response type for the Query/LastPubKeyHistoricalEntry RPC method.
type QueryLastPubKeyHistoricalEntryResponse struct {
	Entry PubKeyHistory `protobuf:"bytes,1,opt,name=entry,proto3" json:"entry"`
}

func (m *QueryLastPubKeyHistoricalEntryResponse) Reset() {
	*m = QueryLastPubKeyHistoricalEntryResponse{}
}
func (m *QueryLastPubKeyHistoricalEntryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLastPubKeyHistoricalEntryResponse) ProtoMessage()    {}
func (*QueryLastPubKeyHistoricalEntryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_60a6d0a8f3ff57e6, []int{6}
}
func (m *QueryLastPubKeyHistoricalEntryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastPubKeyHistoricalEntryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastPubKeyHistoricalEntryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastPubKeyHistoricalEntryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastPubKeyHistoricalEntryResponse.Merge(m, src)
}
func (m *QueryLastPubKeyHistoricalEntryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastPubKeyHistoricalEntryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastPubKeyHistoricalEntryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastPubKeyHistoricalEntryResponse proto.InternalMessageInfo

func (m *QueryLastPubKeyHistoricalEntryResponse) GetEntry() PubKeyHistory {
	if m != nil {
		return m.Entry
	}
	return PubKeyHistory{}
}

// QueryCurrentPubKeyEntryRequest is the request type for the Query/CurrentPubKeyEntry RPC method.
type QueryCurrentPubKeyEntryRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryCurrentPubKeyEntryRequest) Reset()         { *m = QueryCurrentPubKeyEntryRequest{} }
func (m *QueryCurrentPubKeyEntryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCurrentPubKeyEntryRequest) ProtoMessage()    {}
func (*QueryCurrentPubKeyEntryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_60a6d0a8f3ff57e6, []int{7}
}
func (m *QueryCurrentPubKeyEntryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCurrentPubKeyEntryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCurrentPubKeyEntryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCurrentPubKeyEntryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCurrentPubKeyEntryRequest.Merge(m, src)
}
func (m *QueryCurrentPubKeyEntryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCurrentPubKeyEntryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCurrentPubKeyEntryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCurrentPubKeyEntryRequest proto.InternalMessageInfo

func (m *QueryCurrentPubKeyEntryRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// QueryCurrentPubKeyEntryResponse is the response type for the Query/LastPubKeyHistoricalEntry RPC method.
type QueryCurrentPubKeyEntryResponse struct {
	Entry PubKeyHistory `protobuf:"bytes,1,opt,name=entry,proto3" json:"entry"`
}

func (m *QueryCurrentPubKeyEntryResponse) Reset()         { *m = QueryCurrentPubKeyEntryResponse{} }
func (m *QueryCurrentPubKeyEntryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCurrentPubKeyEntryResponse) ProtoMessage()    {}
func (*QueryCurrentPubKeyEntryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_60a6d0a8f3ff57e6, []int{8}
}
func (m *QueryCurrentPubKeyEntryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCurrentPubKeyEntryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCurrentPubKeyEntryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCurrentPubKeyEntryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCurrentPubKeyEntryResponse.Merge(m, src)
}
func (m *QueryCurrentPubKeyEntryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCurrentPubKeyEntryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCurrentPubKeyEntryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCurrentPubKeyEntryResponse proto.InternalMessageInfo

func (m *QueryCurrentPubKeyEntryResponse) GetEntry() PubKeyHistory {
	if m != nil {
		return m.Entry
	}
	return PubKeyHistory{}
}

func init() {
	proto.RegisterType((*PubKeyHistory)(nil), "cosmos.changepubkey.v1beta1.PubKeyHistory")
	proto.RegisterType((*QueryPubKeyHistoryRequest)(nil), "cosmos.changepubkey.v1beta1.QueryPubKeyHistoryRequest")
	proto.RegisterType((*QueryPubKeyHistoryResponse)(nil), "cosmos.changepubkey.v1beta1.QueryPubKeyHistoryResponse")
	proto.RegisterType((*QueryPubKeyHistoricalEntryRequest)(nil), "cosmos.changepubkey.v1beta1.QueryPubKeyHistoricalEntryRequest")
	proto.RegisterType((*QueryPubKeyHistoricalEntryResponse)(nil), "cosmos.changepubkey.v1beta1.QueryPubKeyHistoricalEntryResponse")
	proto.RegisterType((*QueryLastPubKeyHistoricalEntryRequest)(nil), "cosmos.changepubkey.v1beta1.QueryLastPubKeyHistoricalEntryRequest")
	proto.RegisterType((*QueryLastPubKeyHistoricalEntryResponse)(nil), "cosmos.changepubkey.v1beta1.QueryLastPubKeyHistoricalEntryResponse")
	proto.RegisterType((*QueryCurrentPubKeyEntryRequest)(nil), "cosmos.changepubkey.v1beta1.QueryCurrentPubKeyEntryRequest")
	proto.RegisterType((*QueryCurrentPubKeyEntryResponse)(nil), "cosmos.changepubkey.v1beta1.QueryCurrentPubKeyEntryResponse")
}

func init() {
	proto.RegisterFile("cosmos/changepubkey/v1beta1/pubkey_history.proto", fileDescriptor_60a6d0a8f3ff57e6)
}

var fileDescriptor_60a6d0a8f3ff57e6 = []byte{
	// 669 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x4f, 0x4f, 0x13, 0x4f,
	0x18, 0xee, 0xf0, 0xaf, 0x3f, 0x86, 0x9f, 0x31, 0x4e, 0x30, 0x96, 0x45, 0xb7, 0x38, 0x89, 0x86,
	0x18, 0xd9, 0x15, 0x0c, 0x90, 0x80, 0x68, 0x6c, 0x03, 0x1a, 0xf1, 0x80, 0x8d, 0x07, 0xe3, 0xa5,
	0x99, 0x6d, 0xc7, 0x76, 0x43, 0x77, 0x67, 0xdd, 0x99, 0x35, 0x6e, 0x8c, 0x17, 0x13, 0x3d, 0x93,
	0x78, 0xf3, 0x5b, 0xf8, 0x09, 0xbc, 0x72, 0x24, 0xd1, 0x83, 0x27, 0x34, 0xe0, 0xc9, 0x9b, 0x7e,
	0x02, 0xb3, 0x33, 0xb3, 0x96, 0x02, 0xfd, 0x43, 0xe5, 0xb4, 0x3b, 0x33, 0xef, 0xf3, 0xbc, 0xcf,
	0xf3, 0xbe, 0xef, 0x0c, 0xbc, 0x51, 0x61, 0xdc, 0x63, 0xdc, 0xae, 0xd4, 0x89, 0x5f, 0xa3, 0x41,
	0xe4, 0x6c, 0xd2, 0xd8, 0x7e, 0x31, 0xeb, 0x50, 0x41, 0x66, 0x6d, 0xb5, 0x2c, 0xd7, 0x5d, 0x2e,
	0x58, 0x18, 0x5b, 0x41, 0xc8, 0x04, 0x43, 0x93, 0x0a, 0x61, 0x1d, 0x44, 0x58, 0x1a, 0x61, 0x8c,
	0xd7, 0x58, 0x8d, 0xc9, 0x38, 0x3b, 0xf9, 0x53, 0x10, 0x23, 0x5f, 0x63, 0xac, 0xd6, 0xa0, 0xb6,
	0x5c, 0x39, 0xd1, 0x33, 0x5b, 0xb8, 0x1e, 0xe5, 0x82, 0x78, 0x81, 0x0e, 0xb8, 0xa8, 0x03, 0x48,
	0xe0, 0xda, 0xc4, 0xf7, 0x99, 0x20, 0xc2, 0x65, 0x3e, 0x57, 0xa7, 0xf8, 0xed, 0x00, 0x3c, 0xb3,
	0x11, 0x39, 0xeb, 0x34, 0xbe, 0xaf, 0x94, 0xa0, 0x35, 0x98, 0x0d, 0x22, 0xa7, 0xbc, 0x49, 0xe3,
	0x1c, 0x98, 0x02, 0xd3, 0xff, 0x17, 0x66, 0x7e, 0xee, 0xe6, 0xc7, 0x83, 0xc8, 0x69, 0xb8, 0x95,
	0x64, 0xf7, 0x3a, 0xf3, 0x5c, 0x41, 0xbd, 0x40, 0xc4, 0xbf, 0x77, 0xf3, 0xe7, 0x62, 0xe2, 0x35,
	0x96, 0x70, 0xf3, 0x14, 0x97, 0x46, 0x02, 0x49, 0x87, 0x9e, 0x40, 0xc8, 0x05, 0x09, 0x45, 0x39,
	0x11, 0x94, 0x1b, 0x98, 0x02, 0xd3, 0x63, 0x73, 0x86, 0xa5, 0xc4, 0x58, 0xa9, 0x5a, 0xeb, 0x71,
	0xaa, 0xb6, 0x70, 0x69, 0x7b, 0x37, 0x9f, 0x69, 0x52, 0x36, 0xb1, 0x78, 0xeb, 0x5b, 0x1e, 0x94,
	0x46, 0xe5, 0x46, 0x12, 0x8e, 0x4a, 0xf0, 0x3f, 0xea, 0x57, 0x15, 0xef, 0x60, 0x57, 0xde, 0x49,
	0xcd, 0x7b, 0x56, 0xf1, 0xa6, 0x48, 0xc5, 0x9a, 0xa5, 0x7e, 0x35, 0x09, 0xc5, 0xf3, 0x70, 0xe2,
	0x51, 0x44, 0xc3, 0xb8, 0xa5, 0x16, 0x25, 0xfa, 0x3c, 0xa2, 0x5c, 0xa0, 0x1c, 0xcc, 0x92, 0x6a,
	0x35, 0xa4, 0x9c, 0xcb, 0x92, 0x8c, 0x96, 0xd2, 0x25, 0xae, 0x43, 0xe3, 0x38, 0x18, 0x0f, 0x98,
	0xcf, 0x29, 0x7a, 0x00, 0xb3, 0xba, 0xbf, 0x39, 0x30, 0x35, 0x38, 0x3d, 0x36, 0x77, 0xcd, 0xea,
	0xd0, 0x60, 0xab, 0x85, 0xa4, 0x30, 0x94, 0xe8, 0x2e, 0xa5, 0x04, 0xf8, 0x1d, 0x80, 0x97, 0x8f,
	0xa4, 0x72, 0x2b, 0xa4, 0xb1, 0xea, 0x8b, 0x1e, 0x94, 0xa2, 0x7b, 0x70, 0xa8, 0xc7, 0x46, 0x5c,
	0xd0, 0x05, 0x1b, 0x53, 0x05, 0x6b, 0x16, 0x4b, 0x12, 0xe0, 0x06, 0xc4, 0x9d, 0x74, 0x68, 0xeb,
	0x6b, 0x70, 0x98, 0x26, 0x1b, 0x52, 0x46, 0x3f, 0xc6, 0x15, 0x1c, 0xdf, 0x85, 0x57, 0x64, 0xb6,
	0x87, 0x84, 0x8b, 0xfe, 0x9c, 0xe3, 0x00, 0x5e, 0xed, 0x46, 0x71, 0xca, 0xa2, 0x97, 0xa0, 0x29,
	0x33, 0x16, 0xa3, 0x30, 0xa4, 0xbe, 0x4e, 0xda, 0xa3, 0x5a, 0x17, 0xe6, 0xdb, 0x62, 0x4f, 0x57,
	0xe6, 0xdc, 0xc7, 0x11, 0x38, 0x2c, 0x73, 0xa1, 0x4f, 0xe0, 0xf0, 0x2b, 0xb0, 0xd0, 0x91, 0xb4,
	0xed, 0x55, 0x31, 0x16, 0x4f, 0x8c, 0x53, 0xa6, 0xf0, 0xca, 0x9b, 0xcf, 0x3f, 0xde, 0x0f, 0x2c,
	0xa2, 0x79, 0xbb, 0xf7, 0x57, 0xd3, 0x7e, 0xa5, 0xab, 0xf6, 0x1a, 0x7d, 0x00, 0xf0, 0xfc, 0xb1,
	0xcd, 0x45, 0xb7, 0x4f, 0xa6, 0xe8, 0xf0, 0x60, 0x19, 0x77, 0xfa, 0xc6, 0x6b, 0x67, 0x19, 0xf4,
	0x0b, 0xc0, 0x89, 0xb6, 0xd3, 0x87, 0x0a, 0xdd, 0x13, 0x74, 0x9b, 0x7e, 0xa3, 0xf8, 0x4f, 0x1c,
	0x5a, 0xe8, 0xba, 0x6c, 0xc1, 0x2a, 0x2a, 0x76, 0x6c, 0x41, 0x83, 0x70, 0x51, 0x6e, 0xe9, 0x43,
	0xc2, 0x54, 0x96, 0x23, 0x75, 0xa0, 0x21, 0x5f, 0x00, 0x44, 0x47, 0x67, 0x18, 0x2d, 0x77, 0x17,
	0xda, 0xf6, 0xd6, 0x18, 0xb7, 0xfa, 0x03, 0x6b, 0x7b, 0x45, 0x69, 0x6f, 0x05, 0x2d, 0x77, 0xb4,
	0x57, 0x51, 0x04, 0xa9, 0xc3, 0x43, 0xb6, 0x0a, 0x1b, 0xdb, 0x7b, 0x26, 0xd8, 0xd9, 0x33, 0xc1,
	0xf7, 0x3d, 0x13, 0x6c, 0xed, 0x9b, 0x99, 0x9d, 0x7d, 0x33, 0xf3, 0x75, 0xdf, 0xcc, 0x3c, 0x5d,
	0xa8, 0xb9, 0xa2, 0x1e, 0x39, 0x56, 0x85, 0x79, 0x7f, 0x13, 0xc8, 0xcf, 0x0c, 0xaf, 0x6e, 0xda,
	0x2f, 0x6d, 0x12, 0x89, 0x7a, 0x6b, 0x4a, 0x11, 0x07, 0x94, 0x3b, 0x23, 0xf2, 0x09, 0xbe, 0xf9,
	0x27, 0x00, 0x00, 0xff, 0xff, 0x61, 0xa7, 0xa8, 0x78, 0x2e, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// PubKeyHistory queries account pubkey history details based on address.
	PubKeyHistory(ctx context.Context, in *QueryPubKeyHistoryRequest, opts ...grpc.CallOption) (*QueryPubKeyHistoryResponse, error)
	// PubKeyHistoricalEntry queries account pubkey historical entry based on address and time.
	PubKeyHistoricalEntry(ctx context.Context, in *QueryPubKeyHistoricalEntryRequest, opts ...grpc.CallOption) (*QueryPubKeyHistoricalEntryResponse, error)
	// LastPubKeyHistoricalEntry queries account's last pubkey historical entry based on address.
	LastPubKeyHistoricalEntry(ctx context.Context, in *QueryLastPubKeyHistoricalEntryRequest, opts ...grpc.CallOption) (*QueryLastPubKeyHistoricalEntryResponse, error)
	// CurrentPubKeyEntry queries account's current pubkey entry based on address.
	CurrentPubKeyEntry(ctx context.Context, in *QueryCurrentPubKeyEntryRequest, opts ...grpc.CallOption) (*QueryCurrentPubKeyEntryResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) PubKeyHistory(ctx context.Context, in *QueryPubKeyHistoryRequest, opts ...grpc.CallOption) (*QueryPubKeyHistoryResponse, error) {
	out := new(QueryPubKeyHistoryResponse)
	err := c.cc.Invoke(ctx, "/cosmos.changepubkey.v1beta1.Query/PubKeyHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PubKeyHistoricalEntry(ctx context.Context, in *QueryPubKeyHistoricalEntryRequest, opts ...grpc.CallOption) (*QueryPubKeyHistoricalEntryResponse, error) {
	out := new(QueryPubKeyHistoricalEntryResponse)
	err := c.cc.Invoke(ctx, "/cosmos.changepubkey.v1beta1.Query/PubKeyHistoricalEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LastPubKeyHistoricalEntry(ctx context.Context, in *QueryLastPubKeyHistoricalEntryRequest, opts ...grpc.CallOption) (*QueryLastPubKeyHistoricalEntryResponse, error) {
	out := new(QueryLastPubKeyHistoricalEntryResponse)
	err := c.cc.Invoke(ctx, "/cosmos.changepubkey.v1beta1.Query/LastPubKeyHistoricalEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CurrentPubKeyEntry(ctx context.Context, in *QueryCurrentPubKeyEntryRequest, opts ...grpc.CallOption) (*QueryCurrentPubKeyEntryResponse, error) {
	out := new(QueryCurrentPubKeyEntryResponse)
	err := c.cc.Invoke(ctx, "/cosmos.changepubkey.v1beta1.Query/CurrentPubKeyEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// PubKeyHistory queries account pubkey history details based on address.
	PubKeyHistory(context.Context, *QueryPubKeyHistoryRequest) (*QueryPubKeyHistoryResponse, error)
	// PubKeyHistoricalEntry queries account pubkey historical entry based on address and time.
	PubKeyHistoricalEntry(context.Context, *QueryPubKeyHistoricalEntryRequest) (*QueryPubKeyHistoricalEntryResponse, error)
	// LastPubKeyHistoricalEntry queries account's last pubkey historical entry based on address.
	LastPubKeyHistoricalEntry(context.Context, *QueryLastPubKeyHistoricalEntryRequest) (*QueryLastPubKeyHistoricalEntryResponse, error)
	// CurrentPubKeyEntry queries account's current pubkey entry based on address.
	CurrentPubKeyEntry(context.Context, *QueryCurrentPubKeyEntryRequest) (*QueryCurrentPubKeyEntryResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) PubKeyHistory(ctx context.Context, req *QueryPubKeyHistoryRequest) (*QueryPubKeyHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PubKeyHistory not implemented")
}
func (*UnimplementedQueryServer) PubKeyHistoricalEntry(ctx context.Context, req *QueryPubKeyHistoricalEntryRequest) (*QueryPubKeyHistoricalEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PubKeyHistoricalEntry not implemented")
}
func (*UnimplementedQueryServer) LastPubKeyHistoricalEntry(ctx context.Context, req *QueryLastPubKeyHistoricalEntryRequest) (*QueryLastPubKeyHistoricalEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastPubKeyHistoricalEntry not implemented")
}
func (*UnimplementedQueryServer) CurrentPubKeyEntry(ctx context.Context, req *QueryCurrentPubKeyEntryRequest) (*QueryCurrentPubKeyEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentPubKeyEntry not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_PubKeyHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPubKeyHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PubKeyHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.changepubkey.v1beta1.Query/PubKeyHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PubKeyHistory(ctx, req.(*QueryPubKeyHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PubKeyHistoricalEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPubKeyHistoricalEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PubKeyHistoricalEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.changepubkey.v1beta1.Query/PubKeyHistoricalEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PubKeyHistoricalEntry(ctx, req.(*QueryPubKeyHistoricalEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LastPubKeyHistoricalEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLastPubKeyHistoricalEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LastPubKeyHistoricalEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.changepubkey.v1beta1.Query/LastPubKeyHistoricalEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LastPubKeyHistoricalEntry(ctx, req.(*QueryLastPubKeyHistoricalEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CurrentPubKeyEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCurrentPubKeyEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CurrentPubKeyEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.changepubkey.v1beta1.Query/CurrentPubKeyEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CurrentPubKeyEntry(ctx, req.(*QueryCurrentPubKeyEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cosmos.changepubkey.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PubKeyHistory",
			Handler:    _Query_PubKeyHistory_Handler,
		},
		{
			MethodName: "PubKeyHistoricalEntry",
			Handler:    _Query_PubKeyHistoricalEntry_Handler,
		},
		{
			MethodName: "LastPubKeyHistoricalEntry",
			Handler:    _Query_LastPubKeyHistoricalEntry_Handler,
		},
		{
			MethodName: "CurrentPubKeyEntry",
			Handler:    _Query_CurrentPubKeyEntry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cosmos/changepubkey/v1beta1/pubkey_history.proto",
}

func (m *PubKeyHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PubKeyHistory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PubKeyHistory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.EndTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintPubkeyHistory(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x1a
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintPubkeyHistory(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x12
	if len(m.PubKey) > 0 {
		i -= len(m.PubKey)
		copy(dAtA[i:], m.PubKey)
		i = encodeVarintPubkeyHistory(dAtA, i, uint64(len(m.PubKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPubKeyHistoryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPubKeyHistoryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPubKeyHistoryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintPubkeyHistory(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPubKeyHistoryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPubKeyHistoryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPubKeyHistoryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.History) > 0 {
		for iNdEx := len(m.History) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.History[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPubkeyHistory(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPubKeyHistoricalEntryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPubKeyHistoricalEntryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPubKeyHistoricalEntryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Time, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Time):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintPubkeyHistory(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x12
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintPubkeyHistory(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPubKeyHistoricalEntryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPubKeyHistoricalEntryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPubKeyHistoricalEntryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Entry.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPubkeyHistory(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryLastPubKeyHistoricalEntryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastPubKeyHistoricalEntryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastPubKeyHistoricalEntryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintPubkeyHistory(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLastPubKeyHistoricalEntryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastPubKeyHistoricalEntryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastPubKeyHistoricalEntryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Entry.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPubkeyHistory(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryCurrentPubKeyEntryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCurrentPubKeyEntryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCurrentPubKeyEntryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintPubkeyHistory(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCurrentPubKeyEntryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCurrentPubKeyEntryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCurrentPubKeyEntryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Entry.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPubkeyHistory(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintPubkeyHistory(dAtA []byte, offset int, v uint64) int {
	offset -= sovPubkeyHistory(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PubKeyHistory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovPubkeyHistory(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovPubkeyHistory(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime)
	n += 1 + l + sovPubkeyHistory(uint64(l))
	return n
}

func (m *QueryPubKeyHistoryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovPubkeyHistory(uint64(l))
	}
	return n
}

func (m *QueryPubKeyHistoryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.History) > 0 {
		for _, e := range m.History {
			l = e.Size()
			n += 1 + l + sovPubkeyHistory(uint64(l))
		}
	}
	return n
}

func (m *QueryPubKeyHistoricalEntryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovPubkeyHistory(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Time)
	n += 1 + l + sovPubkeyHistory(uint64(l))
	return n
}

func (m *QueryPubKeyHistoricalEntryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Entry.Size()
	n += 1 + l + sovPubkeyHistory(uint64(l))
	return n
}

func (m *QueryLastPubKeyHistoricalEntryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovPubkeyHistory(uint64(l))
	}
	return n
}

func (m *QueryLastPubKeyHistoricalEntryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Entry.Size()
	n += 1 + l + sovPubkeyHistory(uint64(l))
	return n
}

func (m *QueryCurrentPubKeyEntryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovPubkeyHistory(uint64(l))
	}
	return n
}

func (m *QueryCurrentPubKeyEntryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Entry.Size()
	n += 1 + l + sovPubkeyHistory(uint64(l))
	return n
}

func sovPubkeyHistory(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPubkeyHistory(x uint64) (n int) {
	return sovPubkeyHistory(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PubKeyHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubkeyHistory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PubKeyHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PubKeyHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubkeyHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPubkeyHistory
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPubkeyHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = append(m.PubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PubKey == nil {
				m.PubKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubkeyHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPubkeyHistory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPubkeyHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubkeyHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPubkeyHistory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPubkeyHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.EndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPubkeyHistory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubkeyHistory
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPubkeyHistory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPubKeyHistoryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubkeyHistory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPubKeyHistoryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPubKeyHistoryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubkeyHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubkeyHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPubkeyHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPubkeyHistory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubkeyHistory
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPubkeyHistory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPubKeyHistoryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubkeyHistory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPubKeyHistoryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPubKeyHistoryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field History", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubkeyHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPubkeyHistory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPubkeyHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.History = append(m.History, PubKeyHistory{})
			if err := m.History[len(m.History)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPubkeyHistory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubkeyHistory
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPubkeyHistory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPubKeyHistoricalEntryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubkeyHistory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPubKeyHistoricalEntryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPubKeyHistoricalEntryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubkeyHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubkeyHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPubkeyHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubkeyHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPubkeyHistory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPubkeyHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Time, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPubkeyHistory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubkeyHistory
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPubkeyHistory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPubKeyHistoricalEntryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubkeyHistory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPubKeyHistoricalEntryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPubKeyHistoricalEntryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubkeyHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPubkeyHistory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPubkeyHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Entry.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPubkeyHistory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubkeyHistory
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPubkeyHistory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastPubKeyHistoricalEntryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubkeyHistory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastPubKeyHistoricalEntryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastPubKeyHistoricalEntryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubkeyHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubkeyHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPubkeyHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPubkeyHistory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubkeyHistory
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPubkeyHistory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastPubKeyHistoricalEntryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubkeyHistory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastPubKeyHistoricalEntryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastPubKeyHistoricalEntryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubkeyHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPubkeyHistory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPubkeyHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Entry.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPubkeyHistory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubkeyHistory
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPubkeyHistory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCurrentPubKeyEntryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubkeyHistory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCurrentPubKeyEntryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCurrentPubKeyEntryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubkeyHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubkeyHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPubkeyHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPubkeyHistory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubkeyHistory
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPubkeyHistory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCurrentPubKeyEntryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubkeyHistory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCurrentPubKeyEntryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCurrentPubKeyEntryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubkeyHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPubkeyHistory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPubkeyHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Entry.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPubkeyHistory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubkeyHistory
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPubkeyHistory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPubkeyHistory(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPubkeyHistory
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPubkeyHistory
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPubkeyHistory
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPubkeyHistory
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPubkeyHistory
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPubkeyHistory
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPubkeyHistory        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPubkeyHistory          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPubkeyHistory = fmt.Errorf("proto: unexpected end of group")
)
