// Since: cosmos-sdk 0.51
syntax = "proto3";
package cosmos.consensus.v1;

import "tendermint/types/params.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/cosmos/cosmos-sdk/x/consensus/types";

// ConsensusMsgParams is the Msg/Params request type. This is a consensus message that is sent from cometbft.
message ConsensusMsgParams {
  // params defines the x/consensus parameters to be passed from comet.
  //
  // NOTE: All parameters must be supplied.
  tendermint.types.VersionParams   version   = 1;
  tendermint.types.BlockParams     block     = 2;
  tendermint.types.EvidenceParams  evidence  = 3;
  tendermint.types.ValidatorParams validator = 4;
  tendermint.types.ABCIParams      abci      = 5;
}

// ConsensusMsgParamsResponse defines the response structure for executing a
// ConsensusMsgParams message.
message ConsensusMsgParamsResponse {}

// MsgCometInfoRequest is the Msg/CometInfo request type. This is a consensus message that is sent from cometbft.
message ConsensusMsgCometInfoRequest {
  CometInfo info = 1;
}

// MsgCometInfoResponse is the Msg/CometInfo response type. This is a consensus message that is sent from cometbft.
message ConsensusMsgCometInfoResponse {}

// ConsensusMsgCometInfoResponse represents the consensus message containing information about the validators, proposer,
// and last commit.
message MsgCometInfoRequest {}

// MsgCometInfoResponse represents the consensus message containing information about the validators, proposer,
// and last commit.
message MsgCometInfoResponse {
  CometInfo comet_info = 1;
}

// ConsensusMsgCometInfoResponse represents the consensus message containing information about the validators, proposer,
// and last commit.
message CometInfo {
  bytes             validators_hash  = 1; // Hash of the validators
  bytes             proposer_address = 2; // Address of the proposer
  CommitInfo        last_commit      = 3; // Information about the last commit
  repeated Evidence evidence         = 4; // Evidence of the last commit
}

// CommitInfo represents information about a commit.
message CommitInfo {
  int32             round = 1; // Round number
  repeated VoteInfo votes = 2; // List of votes
}

// VoteInfo represents information about a vote.
message VoteInfo {
  Validator   validator     = 1; // Validator who cast the vote
  BlockIDFlag block_id_flag = 2; // Flag indicating the type of block ID
}

// BlockIDFlag represents the flag indicating the type of block ID.
enum BlockIDFlag {
  // BLOCK_ID_FLAG_UNKNOWN represents an unknown block ID flag.
  BLOCK_ID_FLAG_UNSPECIFIED = 0;
  // BLOCK_ID_FLAG_ABSENT is a block ID flag indicating that the block ID is absent.
  BLOCK_ID_FLAG_ABSENT = 1;
  // BLOCK_ID_FLAG_COMMIT is a block ID flag indicating a commit block ID.
  BLOCK_ID_FLAG_COMMIT = 2;
  // BLOCK_ID_FLAG_NIL is a block ID flag indicating a nil block ID.
  BLOCK_ID_FLAG_NIL = 3;
}

// Validator represents a validator.
message Validator {
  bytes address = 1; // Address of the validator
  int64 power   = 2; // Power of the validator
}

// Evidence represents evidence of misbehavior.
message Evidence {
  MisbehaviorType           evidence_type = 1;                              // Type of misbehavior
  Validator                 validator     = 2;                              // Validator involved in the misbehavior
  int64                     height        = 3;                              // Height at which the misbehavior occurred
  google.protobuf.Timestamp time          = 4 [(gogoproto.stdtime) = true]; // Time at which the misbehavior occurred
  int64                     total_voting_power = 5; // Total voting power at the time of the misbehavior
}

// Enum representing different types of misbehavior.
enum MisbehaviorType {
  // Unspecified misbehavior type.
  MISBEHAVIOR_TYPE_UNSPECIFIED = 0;
  // Duplicate vote misbehavior.
  MISBEHAVIOR_TYPE_DUPLICATE_VOTE = 1;
  // Light client attack misbehavior.
  MISBEHAVIOR_TYPE_LIGHT_CLIENT_ATTACK = 2;
}
