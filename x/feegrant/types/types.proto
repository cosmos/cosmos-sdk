syntax = "proto3";
package cosmos_sdk.x.feegrant.v1;

option go_package = "github.com/cosmos/cosmos-sdk/x/feegrant/types";

import "third_party/proto/cosmos-proto/cosmos.proto";
import "third_party/proto/gogoproto/gogo.proto";
import "types/types.proto";
import "google/protobuf/timestamp.proto";

// MsgRevokeFeeAllowance removes any existing FeeAllowance from Granter to Grantee.
message MsgRevokeFeeAllowance{
    bytes Granter = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
    bytes Grantee = 2 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
}


// BasicFeeAllowance implements FeeAllowance with a one-time grant of tokens
// that optionally expires. The delegatee can use up to SpendLimit to cover fees.
message BasicFeeAllowance{
    option (gogoproto.equal) = true;
    option (gogoproto.goproto_getters)  = false;

    repeated cosmos_sdk.v1.Coin SpendLimit = 1 [
                                           (gogoproto.nullable)     = false,
                                           (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
                                           ];
    ExpiresAt Expiration = 2 [(gogoproto.nullable)=true];
}

// PeriodicFeeAllowance extends FeeAllowance to allow for both a maximum cap,
// as well as a limit per time period.
message PeriodicFeeAllowance{
    option (gogoproto.equal) = true;
    option (gogoproto.goproto_getters)  = false;

    BasicFeeAllowance Basic = 1;
    Duration Period = 2;
    repeated cosmos_sdk.v1.Coin PeriodSpendLimit = 3 [
                                           (gogoproto.nullable)     = false,
                                           (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
                                           ];
    repeated cosmos_sdk.v1.Coin PeriodCanSpend = 4 [
                                           (gogoproto.nullable)     = false,
                                           (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
                                           ];

    ExpiresAt PeriodReset = 5 [(gogoproto.nullable)=true];
}

// Duration is a repeating unit of either clock time or number of blocks.
// This is designed to be added to an ExpiresAt struct.
message Duration{
    option (gogoproto.equal) = true;
    google.protobuf.Timestamp Clock = 1[(gogoproto.stdduration)  = true,
                                       (gogoproto.nullable) = false
                                       ];
    int64 Block = 2;
}

// ExpiresAt is a point in time where something expires.
// It may be *either* block time or block height
message ExpiresAt{
    option (gogoproto.equal) = true;
    google.protobuf.Timestamp Time = 1 [(gogoproto.stdtime)  = true,
                                       (gogoproto.nullable) = false
                                       ];
    int64 Height = 2;
}

// FeeAllowance defines the application-level fee allowance to be used in
// feegrant module
message FeeAllowance {
    option (gogoproto.equal)           = true;
    option (cosmos_proto.interface_type) = "*github.com/cosmos/cosmos-sdk/x/feegrant/exported.FeeAllowance";

    oneof sum{
        BasicFeeAllowance BasicFeeAllowance= 1;
        PeriodicFeeAllowance PeriodicFeeAllowance= 2;
    }
}

// MsgGrantFeeAllowance adds permission for Grantee to spend up to Allowance
// of fees from the account of Granter.
message MsgGrantFeeAllowance{
    option (gogoproto.goproto_getters) = false;

    bytes Granter = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
    bytes Grantee = 2 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
    FeeAllowance Allowance = 3;
}

// FeeAllowanceGrant is stored in the KVStore to record a grant with full context
message FeeAllowanceGrant{
    option (gogoproto.goproto_getters) = false;

    bytes Granter = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
    bytes Grantee = 2 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
    FeeAllowance Allowance = 3;
}