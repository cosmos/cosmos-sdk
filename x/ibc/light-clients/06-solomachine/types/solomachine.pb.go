// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ibc/lightclients/solomachine/v1/solomachine.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	types1 "github.com/cosmos/cosmos-sdk/x/ibc/core/03-connection/types"
	types2 "github.com/cosmos/cosmos-sdk/x/ibc/core/04-channel/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// DataType defines the type of solo machine proof being created. This is done to preserve uniqueness of different
// data sign byte encodings.
type DataType int32

const (
	// Default State
	UNSPECIFIED DataType = 0
	// Data type for client state verification
	CLIENT DataType = 1
	// Data type for consensus state verification
	CONSENSUS DataType = 2
	// Data type for connection state verification
	CONNECTION DataType = 3
	// Data type for channel state verification
	CHANNEL DataType = 4
	// Data type for packet commitment verification
	PACKETCOMMITMENT DataType = 5
	// Data type for packet acknowledgement verification
	PACKETACKNOWLEDGEMENT DataType = 6
	// Data type for packet receipt absence verification
	PACKETRECEIPTABSENCE DataType = 7
	// Data type for next sequence recv verification
	NEXTSEQUENCERECV DataType = 8
	// Data type for header verification
	HEADER DataType = 9
)

var DataType_name = map[int32]string{
	0: "DATA_TYPE_UNINITIALIZED_UNSPECIFIED",
	1: "DATA_TYPE_CLIENT_STATE",
	2: "DATA_TYPE_CONSENSUS_STATE",
	3: "DATA_TYPE_CONNECTION_STATE",
	4: "DATA_TYPE_CHANNEL_STATE",
	5: "DATA_TYPE_PACKET_COMMITMENT",
	6: "DATA_TYPE_PACKET_ACKNOWLEDGEMENT",
	7: "DATA_TYPE_PACKET_RECEIPT_ABSENCE",
	8: "DATA_TYPE_NEXT_SEQUENCE_RECV",
	9: "DATA_TYPE_HEADER",
}

var DataType_value = map[string]int32{
	"DATA_TYPE_UNINITIALIZED_UNSPECIFIED": 0,
	"DATA_TYPE_CLIENT_STATE":              1,
	"DATA_TYPE_CONSENSUS_STATE":           2,
	"DATA_TYPE_CONNECTION_STATE":          3,
	"DATA_TYPE_CHANNEL_STATE":             4,
	"DATA_TYPE_PACKET_COMMITMENT":         5,
	"DATA_TYPE_PACKET_ACKNOWLEDGEMENT":    6,
	"DATA_TYPE_PACKET_RECEIPT_ABSENCE":    7,
	"DATA_TYPE_NEXT_SEQUENCE_RECV":        8,
	"DATA_TYPE_HEADER":                    9,
}

func (x DataType) String() string {
	return proto.EnumName(DataType_name, int32(x))
}

func (DataType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6cc2ee18f7f86d4e, []int{0}
}

// ClientState defines a solo machine client that tracks the current consensus
// state and if the client is frozen.
type ClientState struct {
	// latest sequence of the client state
	Sequence uint64 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// frozen sequence of the solo machine
	FrozenSequence uint64          `protobuf:"varint,2,opt,name=frozen_sequence,json=frozenSequence,proto3" json:"frozen_sequence,omitempty" yaml:"frozen_sequence"`
	ConsensusState *ConsensusState `protobuf:"bytes,3,opt,name=consensus_state,json=consensusState,proto3" json:"consensus_state,omitempty" yaml:"consensus_state"`
	// when set to true, will allow governance to update a solo machine client.
	// The client will be unfrozen if it is frozen.
	AllowUpdateAfterProposal bool `protobuf:"varint,4,opt,name=allow_update_after_proposal,json=allowUpdateAfterProposal,proto3" json:"allow_update_after_proposal,omitempty" yaml:"allow_update_after_proposal"`
}

func (m *ClientState) Reset()         { *m = ClientState{} }
func (m *ClientState) String() string { return proto.CompactTextString(m) }
func (*ClientState) ProtoMessage()    {}
func (*ClientState) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cc2ee18f7f86d4e, []int{0}
}
func (m *ClientState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientState.Merge(m, src)
}
func (m *ClientState) XXX_Size() int {
	return m.Size()
}
func (m *ClientState) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientState.DiscardUnknown(m)
}

var xxx_messageInfo_ClientState proto.InternalMessageInfo

// ConsensusState defines a solo machine consensus state. The sequence of a consensus state
// is contained in the "height" key used in storing the consensus state.
type ConsensusState struct {
	// public key of the solo machine
	PublicKey *types.Any `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty" yaml:"public_key"`
	// diversifier allows the same public key to be re-used across different solo machine clients
	// (potentially on different chains) without being considered misbehaviour.
	Diversifier string `protobuf:"bytes,2,opt,name=diversifier,proto3" json:"diversifier,omitempty"`
	Timestamp   uint64 `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *ConsensusState) Reset()         { *m = ConsensusState{} }
func (m *ConsensusState) String() string { return proto.CompactTextString(m) }
func (*ConsensusState) ProtoMessage()    {}
func (*ConsensusState) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cc2ee18f7f86d4e, []int{1}
}
func (m *ConsensusState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsensusState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsensusState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsensusState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsensusState.Merge(m, src)
}
func (m *ConsensusState) XXX_Size() int {
	return m.Size()
}
func (m *ConsensusState) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsensusState.DiscardUnknown(m)
}

var xxx_messageInfo_ConsensusState proto.InternalMessageInfo

// Header defines a solo machine consensus header
type Header struct {
	// sequence to update solo machine public key at
	Sequence       uint64     `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Timestamp      uint64     `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Signature      []byte     `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	NewPublicKey   *types.Any `protobuf:"bytes,4,opt,name=new_public_key,json=newPublicKey,proto3" json:"new_public_key,omitempty" yaml:"new_public_key"`
	NewDiversifier string     `protobuf:"bytes,5,opt,name=new_diversifier,json=newDiversifier,proto3" json:"new_diversifier,omitempty" yaml:"new_diversifier"`
}

func (m *Header) Reset()         { *m = Header{} }
func (m *Header) String() string { return proto.CompactTextString(m) }
func (*Header) ProtoMessage()    {}
func (*Header) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cc2ee18f7f86d4e, []int{2}
}
func (m *Header) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Header) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Header.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Header) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Header.Merge(m, src)
}
func (m *Header) XXX_Size() int {
	return m.Size()
}
func (m *Header) XXX_DiscardUnknown() {
	xxx_messageInfo_Header.DiscardUnknown(m)
}

var xxx_messageInfo_Header proto.InternalMessageInfo

// Misbehaviour defines misbehaviour for a solo machine which consists
// of a sequence and two signatures over different messages at that sequence.
type Misbehaviour struct {
	ClientId     string            `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty" yaml:"client_id"`
	Sequence     uint64            `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
	SignatureOne *SignatureAndData `protobuf:"bytes,3,opt,name=signature_one,json=signatureOne,proto3" json:"signature_one,omitempty" yaml:"signature_one"`
	SignatureTwo *SignatureAndData `protobuf:"bytes,4,opt,name=signature_two,json=signatureTwo,proto3" json:"signature_two,omitempty" yaml:"signature_two"`
}

func (m *Misbehaviour) Reset()         { *m = Misbehaviour{} }
func (m *Misbehaviour) String() string { return proto.CompactTextString(m) }
func (*Misbehaviour) ProtoMessage()    {}
func (*Misbehaviour) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cc2ee18f7f86d4e, []int{3}
}
func (m *Misbehaviour) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Misbehaviour) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Misbehaviour.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Misbehaviour) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Misbehaviour.Merge(m, src)
}
func (m *Misbehaviour) XXX_Size() int {
	return m.Size()
}
func (m *Misbehaviour) XXX_DiscardUnknown() {
	xxx_messageInfo_Misbehaviour.DiscardUnknown(m)
}

var xxx_messageInfo_Misbehaviour proto.InternalMessageInfo

// SignatureAndData contains a signature and the data signed over to create that
// signature.
type SignatureAndData struct {
	Signature []byte   `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	DataType  DataType `protobuf:"varint,2,opt,name=data_type,json=dataType,proto3,enum=ibc.lightclients.solomachine.v1.DataType" json:"data_type,omitempty" yaml:"data_type"`
	Data      []byte   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Timestamp uint64   `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *SignatureAndData) Reset()         { *m = SignatureAndData{} }
func (m *SignatureAndData) String() string { return proto.CompactTextString(m) }
func (*SignatureAndData) ProtoMessage()    {}
func (*SignatureAndData) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cc2ee18f7f86d4e, []int{4}
}
func (m *SignatureAndData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignatureAndData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignatureAndData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignatureAndData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignatureAndData.Merge(m, src)
}
func (m *SignatureAndData) XXX_Size() int {
	return m.Size()
}
func (m *SignatureAndData) XXX_DiscardUnknown() {
	xxx_messageInfo_SignatureAndData.DiscardUnknown(m)
}

var xxx_messageInfo_SignatureAndData proto.InternalMessageInfo

// TimestampedSignatureData contains the signature data and the timestamp of the
// signature.
type TimestampedSignatureData struct {
	SignatureData []byte `protobuf:"bytes,1,opt,name=signature_data,json=signatureData,proto3" json:"signature_data,omitempty" yaml:"signature_data"`
	Timestamp     uint64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *TimestampedSignatureData) Reset()         { *m = TimestampedSignatureData{} }
func (m *TimestampedSignatureData) String() string { return proto.CompactTextString(m) }
func (*TimestampedSignatureData) ProtoMessage()    {}
func (*TimestampedSignatureData) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cc2ee18f7f86d4e, []int{5}
}
func (m *TimestampedSignatureData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TimestampedSignatureData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TimestampedSignatureData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TimestampedSignatureData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimestampedSignatureData.Merge(m, src)
}
func (m *TimestampedSignatureData) XXX_Size() int {
	return m.Size()
}
func (m *TimestampedSignatureData) XXX_DiscardUnknown() {
	xxx_messageInfo_TimestampedSignatureData.DiscardUnknown(m)
}

var xxx_messageInfo_TimestampedSignatureData proto.InternalMessageInfo

// SignBytes defines the signed bytes used for signature verification.
type SignBytes struct {
	Sequence    uint64 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Timestamp   uint64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Diversifier string `protobuf:"bytes,3,opt,name=diversifier,proto3" json:"diversifier,omitempty"`
	// type of the data used
	DataType DataType `protobuf:"varint,4,opt,name=data_type,json=dataType,proto3,enum=ibc.lightclients.solomachine.v1.DataType" json:"data_type,omitempty" yaml:"data_type"`
	// marshaled data
	Data []byte `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *SignBytes) Reset()         { *m = SignBytes{} }
func (m *SignBytes) String() string { return proto.CompactTextString(m) }
func (*SignBytes) ProtoMessage()    {}
func (*SignBytes) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cc2ee18f7f86d4e, []int{6}
}
func (m *SignBytes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignBytes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignBytes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignBytes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignBytes.Merge(m, src)
}
func (m *SignBytes) XXX_Size() int {
	return m.Size()
}
func (m *SignBytes) XXX_DiscardUnknown() {
	xxx_messageInfo_SignBytes.DiscardUnknown(m)
}

var xxx_messageInfo_SignBytes proto.InternalMessageInfo

// HeaderData returns the SignBytes data for update verification.
type HeaderData struct {
	// header public key
	NewPubKey *types.Any `protobuf:"bytes,1,opt,name=new_pub_key,json=newPubKey,proto3" json:"new_pub_key,omitempty" yaml:"new_pub_key"`
	// header diversifier
	NewDiversifier string `protobuf:"bytes,2,opt,name=new_diversifier,json=newDiversifier,proto3" json:"new_diversifier,omitempty" yaml:"new_diversifier"`
}

func (m *HeaderData) Reset()         { *m = HeaderData{} }
func (m *HeaderData) String() string { return proto.CompactTextString(m) }
func (*HeaderData) ProtoMessage()    {}
func (*HeaderData) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cc2ee18f7f86d4e, []int{7}
}
func (m *HeaderData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HeaderData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HeaderData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HeaderData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeaderData.Merge(m, src)
}
func (m *HeaderData) XXX_Size() int {
	return m.Size()
}
func (m *HeaderData) XXX_DiscardUnknown() {
	xxx_messageInfo_HeaderData.DiscardUnknown(m)
}

var xxx_messageInfo_HeaderData proto.InternalMessageInfo

// ClientStateData returns the SignBytes data for client state verification.
type ClientStateData struct {
	Path        []byte     `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	ClientState *types.Any `protobuf:"bytes,2,opt,name=client_state,json=clientState,proto3" json:"client_state,omitempty" yaml:"client_state"`
}

func (m *ClientStateData) Reset()         { *m = ClientStateData{} }
func (m *ClientStateData) String() string { return proto.CompactTextString(m) }
func (*ClientStateData) ProtoMessage()    {}
func (*ClientStateData) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cc2ee18f7f86d4e, []int{8}
}
func (m *ClientStateData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientStateData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientStateData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientStateData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientStateData.Merge(m, src)
}
func (m *ClientStateData) XXX_Size() int {
	return m.Size()
}
func (m *ClientStateData) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientStateData.DiscardUnknown(m)
}

var xxx_messageInfo_ClientStateData proto.InternalMessageInfo

// ConsensusStateData returns the SignBytes data for consensus state
// verification.
type ConsensusStateData struct {
	Path           []byte     `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	ConsensusState *types.Any `protobuf:"bytes,2,opt,name=consensus_state,json=consensusState,proto3" json:"consensus_state,omitempty" yaml:"consensus_state"`
}

func (m *ConsensusStateData) Reset()         { *m = ConsensusStateData{} }
func (m *ConsensusStateData) String() string { return proto.CompactTextString(m) }
func (*ConsensusStateData) ProtoMessage()    {}
func (*ConsensusStateData) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cc2ee18f7f86d4e, []int{9}
}
func (m *ConsensusStateData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsensusStateData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsensusStateData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsensusStateData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsensusStateData.Merge(m, src)
}
func (m *ConsensusStateData) XXX_Size() int {
	return m.Size()
}
func (m *ConsensusStateData) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsensusStateData.DiscardUnknown(m)
}

var xxx_messageInfo_ConsensusStateData proto.InternalMessageInfo

// ConnectionStateData returns the SignBytes data for connection state
// verification.
type ConnectionStateData struct {
	Path       []byte                `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Connection *types1.ConnectionEnd `protobuf:"bytes,2,opt,name=connection,proto3" json:"connection,omitempty"`
}

func (m *ConnectionStateData) Reset()         { *m = ConnectionStateData{} }
func (m *ConnectionStateData) String() string { return proto.CompactTextString(m) }
func (*ConnectionStateData) ProtoMessage()    {}
func (*ConnectionStateData) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cc2ee18f7f86d4e, []int{10}
}
func (m *ConnectionStateData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConnectionStateData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConnectionStateData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConnectionStateData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectionStateData.Merge(m, src)
}
func (m *ConnectionStateData) XXX_Size() int {
	return m.Size()
}
func (m *ConnectionStateData) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectionStateData.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectionStateData proto.InternalMessageInfo

// ChannelStateData returns the SignBytes data for channel state
// verification.
type ChannelStateData struct {
	Path    []byte          `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Channel *types2.Channel `protobuf:"bytes,2,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (m *ChannelStateData) Reset()         { *m = ChannelStateData{} }
func (m *ChannelStateData) String() string { return proto.CompactTextString(m) }
func (*ChannelStateData) ProtoMessage()    {}
func (*ChannelStateData) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cc2ee18f7f86d4e, []int{11}
}
func (m *ChannelStateData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelStateData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelStateData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChannelStateData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelStateData.Merge(m, src)
}
func (m *ChannelStateData) XXX_Size() int {
	return m.Size()
}
func (m *ChannelStateData) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelStateData.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelStateData proto.InternalMessageInfo

// PacketCommitmentData returns the SignBytes data for packet commitment
// verification.
type PacketCommitmentData struct {
	Path       []byte `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Commitment []byte `protobuf:"bytes,2,opt,name=commitment,proto3" json:"commitment,omitempty"`
}

func (m *PacketCommitmentData) Reset()         { *m = PacketCommitmentData{} }
func (m *PacketCommitmentData) String() string { return proto.CompactTextString(m) }
func (*PacketCommitmentData) ProtoMessage()    {}
func (*PacketCommitmentData) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cc2ee18f7f86d4e, []int{12}
}
func (m *PacketCommitmentData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PacketCommitmentData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PacketCommitmentData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PacketCommitmentData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PacketCommitmentData.Merge(m, src)
}
func (m *PacketCommitmentData) XXX_Size() int {
	return m.Size()
}
func (m *PacketCommitmentData) XXX_DiscardUnknown() {
	xxx_messageInfo_PacketCommitmentData.DiscardUnknown(m)
}

var xxx_messageInfo_PacketCommitmentData proto.InternalMessageInfo

func (m *PacketCommitmentData) GetPath() []byte {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *PacketCommitmentData) GetCommitment() []byte {
	if m != nil {
		return m.Commitment
	}
	return nil
}

// PacketAcknowledgementData returns the SignBytes data for acknowledgement
// verification.
type PacketAcknowledgementData struct {
	Path            []byte `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Acknowledgement []byte `protobuf:"bytes,2,opt,name=acknowledgement,proto3" json:"acknowledgement,omitempty"`
}

func (m *PacketAcknowledgementData) Reset()         { *m = PacketAcknowledgementData{} }
func (m *PacketAcknowledgementData) String() string { return proto.CompactTextString(m) }
func (*PacketAcknowledgementData) ProtoMessage()    {}
func (*PacketAcknowledgementData) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cc2ee18f7f86d4e, []int{13}
}
func (m *PacketAcknowledgementData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PacketAcknowledgementData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PacketAcknowledgementData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PacketAcknowledgementData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PacketAcknowledgementData.Merge(m, src)
}
func (m *PacketAcknowledgementData) XXX_Size() int {
	return m.Size()
}
func (m *PacketAcknowledgementData) XXX_DiscardUnknown() {
	xxx_messageInfo_PacketAcknowledgementData.DiscardUnknown(m)
}

var xxx_messageInfo_PacketAcknowledgementData proto.InternalMessageInfo

func (m *PacketAcknowledgementData) GetPath() []byte {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *PacketAcknowledgementData) GetAcknowledgement() []byte {
	if m != nil {
		return m.Acknowledgement
	}
	return nil
}

// PacketReceiptAbsenceData returns the SignBytes data for
// packet receipt absence verification.
type PacketReceiptAbsenceData struct {
	Path []byte `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (m *PacketReceiptAbsenceData) Reset()         { *m = PacketReceiptAbsenceData{} }
func (m *PacketReceiptAbsenceData) String() string { return proto.CompactTextString(m) }
func (*PacketReceiptAbsenceData) ProtoMessage()    {}
func (*PacketReceiptAbsenceData) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cc2ee18f7f86d4e, []int{14}
}
func (m *PacketReceiptAbsenceData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PacketReceiptAbsenceData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PacketReceiptAbsenceData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PacketReceiptAbsenceData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PacketReceiptAbsenceData.Merge(m, src)
}
func (m *PacketReceiptAbsenceData) XXX_Size() int {
	return m.Size()
}
func (m *PacketReceiptAbsenceData) XXX_DiscardUnknown() {
	xxx_messageInfo_PacketReceiptAbsenceData.DiscardUnknown(m)
}

var xxx_messageInfo_PacketReceiptAbsenceData proto.InternalMessageInfo

func (m *PacketReceiptAbsenceData) GetPath() []byte {
	if m != nil {
		return m.Path
	}
	return nil
}

// NextSequenceRecvData returns the SignBytes data for verification of the next
// sequence to be received.
type NextSequenceRecvData struct {
	Path        []byte `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	NextSeqRecv uint64 `protobuf:"varint,2,opt,name=next_seq_recv,json=nextSeqRecv,proto3" json:"next_seq_recv,omitempty" yaml:"next_seq_recv"`
}

func (m *NextSequenceRecvData) Reset()         { *m = NextSequenceRecvData{} }
func (m *NextSequenceRecvData) String() string { return proto.CompactTextString(m) }
func (*NextSequenceRecvData) ProtoMessage()    {}
func (*NextSequenceRecvData) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cc2ee18f7f86d4e, []int{15}
}
func (m *NextSequenceRecvData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NextSequenceRecvData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NextSequenceRecvData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NextSequenceRecvData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NextSequenceRecvData.Merge(m, src)
}
func (m *NextSequenceRecvData) XXX_Size() int {
	return m.Size()
}
func (m *NextSequenceRecvData) XXX_DiscardUnknown() {
	xxx_messageInfo_NextSequenceRecvData.DiscardUnknown(m)
}

var xxx_messageInfo_NextSequenceRecvData proto.InternalMessageInfo

func (m *NextSequenceRecvData) GetPath() []byte {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *NextSequenceRecvData) GetNextSeqRecv() uint64 {
	if m != nil {
		return m.NextSeqRecv
	}
	return 0
}

func init() {
	proto.RegisterEnum("ibc.lightclients.solomachine.v1.DataType", DataType_name, DataType_value)
	proto.RegisterType((*ClientState)(nil), "ibc.lightclients.solomachine.v1.ClientState")
	proto.RegisterType((*ConsensusState)(nil), "ibc.lightclients.solomachine.v1.ConsensusState")
	proto.RegisterType((*Header)(nil), "ibc.lightclients.solomachine.v1.Header")
	proto.RegisterType((*Misbehaviour)(nil), "ibc.lightclients.solomachine.v1.Misbehaviour")
	proto.RegisterType((*SignatureAndData)(nil), "ibc.lightclients.solomachine.v1.SignatureAndData")
	proto.RegisterType((*TimestampedSignatureData)(nil), "ibc.lightclients.solomachine.v1.TimestampedSignatureData")
	proto.RegisterType((*SignBytes)(nil), "ibc.lightclients.solomachine.v1.SignBytes")
	proto.RegisterType((*HeaderData)(nil), "ibc.lightclients.solomachine.v1.HeaderData")
	proto.RegisterType((*ClientStateData)(nil), "ibc.lightclients.solomachine.v1.ClientStateData")
	proto.RegisterType((*ConsensusStateData)(nil), "ibc.lightclients.solomachine.v1.ConsensusStateData")
	proto.RegisterType((*ConnectionStateData)(nil), "ibc.lightclients.solomachine.v1.ConnectionStateData")
	proto.RegisterType((*ChannelStateData)(nil), "ibc.lightclients.solomachine.v1.ChannelStateData")
	proto.RegisterType((*PacketCommitmentData)(nil), "ibc.lightclients.solomachine.v1.PacketCommitmentData")
	proto.RegisterType((*PacketAcknowledgementData)(nil), "ibc.lightclients.solomachine.v1.PacketAcknowledgementData")
	proto.RegisterType((*PacketReceiptAbsenceData)(nil), "ibc.lightclients.solomachine.v1.PacketReceiptAbsenceData")
	proto.RegisterType((*NextSequenceRecvData)(nil), "ibc.lightclients.solomachine.v1.NextSequenceRecvData")
}

func init() {
	proto.RegisterFile("ibc/lightclients/solomachine/v1/solomachine.proto", fileDescriptor_6cc2ee18f7f86d4e)
}

var fileDescriptor_6cc2ee18f7f86d4e = []byte{
	// 1399 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0xdd, 0x8e, 0xdb, 0xc4,
	0x17, 0x5f, 0xa7, 0xe9, 0x76, 0x33, 0xd9, 0x66, 0xf3, 0x77, 0xd3, 0x36, 0xeb, 0xae, 0x12, 0xff,
	0x8d, 0x28, 0x0b, 0x62, 0x1d, 0x52, 0xd4, 0x15, 0x54, 0x08, 0x70, 0x1c, 0x43, 0xc3, 0xee, 0x7a,
	0x83, 0xe3, 0x05, 0x5a, 0x21, 0x59, 0x8e, 0x33, 0x9b, 0x98, 0x4d, 0xec, 0x10, 0x4f, 0x92, 0x06,
	0x09, 0x89, 0xcb, 0x12, 0x71, 0xc1, 0x0b, 0x44, 0x42, 0xf0, 0x0a, 0x3c, 0x01, 0x12, 0x1f, 0xe2,
	0xaa, 0xdc, 0x71, 0x15, 0x50, 0xfb, 0x06, 0x79, 0x02, 0x64, 0xcf, 0x38, 0xb6, 0xb3, 0xdd, 0x2c,
	0x9f, 0x57, 0x99, 0x39, 0xe7, 0x77, 0x7e, 0xe7, 0xcc, 0x39, 0x93, 0x33, 0xc7, 0xa0, 0x68, 0xd6,
	0x8d, 0x42, 0xdb, 0x6c, 0xb6, 0x90, 0xd1, 0x36, 0xa1, 0x85, 0x9c, 0x82, 0x63, 0xb7, 0xed, 0x8e,
	0x6e, 0xb4, 0x4c, 0x0b, 0x16, 0x06, 0xc5, 0xf0, 0x96, 0xef, 0xf6, 0x6c, 0x64, 0xd3, 0x79, 0xb3,
	0x6e, 0xf0, 0x61, 0x13, 0x3e, 0x8c, 0x19, 0x14, 0x99, 0xe7, 0x5c, 0x4e, 0xc3, 0xee, 0xc1, 0x82,
	0x61, 0x5b, 0x16, 0x34, 0x90, 0x69, 0x5b, 0x2e, 0x55, 0xb0, 0xc3, 0x4c, 0xcc, 0xff, 0x03, 0x60,
	0x4b, 0xb7, 0x2c, 0xd8, 0xf6, 0x50, 0x78, 0x49, 0x20, 0x99, 0xa6, 0xdd, 0xb4, 0xbd, 0x65, 0xc1,
	0x5d, 0x11, 0xe9, 0x66, 0xd3, 0xb6, 0x9b, 0x6d, 0x58, 0xf0, 0x76, 0xf5, 0xfe, 0x71, 0x41, 0xb7,
	0x46, 0xbe, 0xca, 0xb0, 0x9d, 0x8e, 0xed, 0x68, 0xd8, 0x06, 0x6f, 0xb0, 0x8a, 0xfb, 0x25, 0x06,
	0x92, 0xa2, 0x17, 0x72, 0x0d, 0xe9, 0x08, 0xd2, 0x0c, 0x58, 0x73, 0xe0, 0xc7, 0x7d, 0x68, 0x19,
	0x30, 0x4b, 0xb1, 0xd4, 0x76, 0x5c, 0x99, 0xef, 0x69, 0x11, 0x6c, 0x1c, 0xf7, 0xec, 0x4f, 0xa0,
	0xa5, 0xcd, 0x21, 0x31, 0x17, 0x52, 0x62, 0x66, 0xd3, 0xfc, 0xb5, 0x91, 0xde, 0x69, 0xdf, 0xe1,
	0x16, 0x00, 0x9c, 0x92, 0xc2, 0x92, 0x9a, 0x4f, 0x82, 0xc0, 0x86, 0x61, 0x5b, 0x0e, 0xb4, 0x9c,
	0xbe, 0xa3, 0x39, 0xae, 0xcf, 0xec, 0x05, 0x96, 0xda, 0x4e, 0xde, 0x2a, 0xf0, 0xe7, 0xe4, 0x90,
	0x17, 0x7d, 0x3b, 0x2f, 0xd4, 0xb0, 0xd7, 0x05, 0x46, 0x4e, 0x49, 0x19, 0x11, 0x2c, 0x0d, 0xc1,
	0x0d, 0xbd, 0xdd, 0xb6, 0x87, 0x5a, 0xbf, 0xdb, 0xd0, 0x11, 0xd4, 0xf4, 0x63, 0x04, 0x7b, 0x6e,
	0x3e, 0xba, 0xb6, 0xa3, 0xb7, 0xb3, 0x71, 0x96, 0xda, 0x5e, 0x2b, 0xdd, 0x9c, 0x4d, 0xf3, 0x1c,
	0x26, 0x5c, 0x02, 0xe6, 0x94, 0xac, 0xa7, 0x3d, 0xf2, 0x94, 0x82, 0xab, 0xab, 0x12, 0xd5, 0x9d,
	0xf8, 0xc3, 0xaf, 0xf2, 0x2b, 0xdc, 0x77, 0x14, 0x48, 0x45, 0x63, 0xa5, 0x3f, 0x02, 0xa0, 0xdb,
	0xaf, 0xb7, 0x4d, 0x43, 0x3b, 0x81, 0x23, 0x2f, 0xb1, 0xc9, 0x5b, 0x19, 0x1e, 0x57, 0x8c, 0xf7,
	0x2b, 0xc6, 0x0b, 0xd6, 0xa8, 0x74, 0x7b, 0x36, 0xcd, 0xff, 0x0f, 0x07, 0x11, 0x58, 0x70, 0x3f,
	0x7f, 0xbb, 0xb3, 0x45, 0xea, 0x66, 0xf4, 0x46, 0x5d, 0x64, 0xf3, 0x83, 0x62, 0x1d, 0x22, 0xbd,
	0xc8, 0x57, 0xfb, 0xf5, 0x3d, 0x38, 0x52, 0x12, 0x18, 0xbc, 0x07, 0x47, 0x34, 0x0b, 0x92, 0x0d,
	0x73, 0x00, 0x7b, 0x8e, 0x79, 0x6c, 0xc2, 0x9e, 0x57, 0xa2, 0x84, 0x12, 0x16, 0xd1, 0x5b, 0x20,
	0x81, 0xcc, 0x0e, 0x74, 0x90, 0xde, 0xe9, 0x7a, 0xd9, 0x8f, 0x2b, 0x81, 0x80, 0x1c, 0xe2, 0xeb,
	0x18, 0x58, 0xbd, 0x0b, 0xf5, 0x06, 0xec, 0x2d, 0xbd, 0x13, 0x11, 0xaa, 0xd8, 0x02, 0x95, 0xab,
	0x75, 0xcc, 0xa6, 0xa5, 0xa3, 0x7e, 0x0f, 0x97, 0x79, 0x5d, 0x09, 0x04, 0x74, 0x1f, 0xa4, 0x2c,
	0x38, 0xd4, 0x42, 0x89, 0x89, 0x2f, 0x49, 0xcc, 0xab, 0xb3, 0x69, 0xfe, 0x2a, 0x4e, 0x4c, 0xd4,
	0xea, 0xfc, 0xe4, 0xac, 0x5b, 0x70, 0x58, 0x9d, 0xe7, 0x47, 0x04, 0x1b, 0x2e, 0x41, 0x38, 0x47,
	0x17, 0xdd, 0x1c, 0x85, 0x2f, 0xd4, 0x02, 0x80, 0x53, 0xdc, 0x48, 0xcb, 0x81, 0x80, 0x24, 0xe9,
	0xc7, 0x18, 0x58, 0x3f, 0x30, 0x9d, 0x3a, 0x6c, 0xe9, 0x03, 0xd3, 0xee, 0xf7, 0xe8, 0x22, 0x48,
	0xe0, 0xcb, 0xab, 0x99, 0x0d, 0x2f, 0x57, 0x89, 0x52, 0x66, 0x36, 0xcd, 0xa7, 0xc9, 0x35, 0xf5,
	0x55, 0x9c, 0xb2, 0x86, 0xd7, 0x95, 0x46, 0x24, 0xbb, 0xb1, 0x85, 0xec, 0x76, 0xc1, 0xe5, 0x79,
	0xba, 0x34, 0xdb, 0xf2, 0xff, 0x2a, 0xc5, 0x73, 0xff, 0x2a, 0x35, 0xdf, 0x4a, 0xb0, 0x1a, 0x65,
	0x1d, 0xe9, 0xa5, 0xec, 0x6c, 0x9a, 0xcf, 0xe0, 0x28, 0x22, 0x8c, 0x9c, 0xb2, 0x3e, 0xdf, 0x1f,
	0x5a, 0x0b, 0x1e, 0xd1, 0xd0, 0x26, 0x25, 0xf9, 0xb7, 0x3c, 0xa2, 0xa1, 0x1d, 0xf6, 0xa8, 0x0e,
	0x6d, 0x92, 0xc9, 0x1f, 0x28, 0x90, 0x5e, 0xa4, 0x88, 0x5e, 0x1f, 0x6a, 0xf1, 0xfa, 0x7c, 0x08,
	0x12, 0x0d, 0x1d, 0xe9, 0x1a, 0x1a, 0x75, 0x71, 0xe6, 0x52, 0xb7, 0x9e, 0x3f, 0x37, 0x4c, 0x97,
	0x57, 0x1d, 0x75, 0x61, 0xb8, 0x2c, 0x73, 0x16, 0x4e, 0x59, 0x6b, 0x10, 0x3d, 0x4d, 0x83, 0xb8,
	0xbb, 0x26, 0xb7, 0xd6, 0x5b, 0x47, 0x2f, 0x7b, 0xfc, 0xe9, 0xff, 0x9b, 0xcf, 0x28, 0x90, 0x55,
	0x7d, 0x19, 0x6c, 0xcc, 0xcf, 0xe4, 0x1d, 0xe8, 0x4d, 0x90, 0x0a, 0x72, 0xe1, 0xd1, 0x7b, 0xa7,
	0x2a, 0x6d, 0x06, 0x77, 0x3b, 0xaa, 0xe7, 0x94, 0xa0, 0x1c, 0xe5, 0x53, 0x21, 0xc4, 0x9e, 0x1e,
	0xc2, 0x6f, 0x14, 0x48, 0xb8, 0x7e, 0x4b, 0x23, 0x04, 0x9d, 0x7f, 0xf0, 0xef, 0x5d, 0x68, 0x24,
	0x17, 0x4e, 0x37, 0x92, 0x48, 0x09, 0xe2, 0xff, 0x55, 0x09, 0x2e, 0x06, 0x25, 0x20, 0x27, 0xfc,
	0x9e, 0x02, 0x00, 0x37, 0x27, 0x2f, 0x29, 0x6d, 0x90, 0x24, 0x2d, 0xe1, 0xdc, 0xf6, 0xba, 0x3b,
	0x9b, 0xe6, 0xe9, 0x48, 0x17, 0xf9, 0x93, 0xfd, 0x15, 0xb7, 0x90, 0x33, 0xfa, 0x47, 0xec, 0x6f,
	0xf6, 0x8f, 0x4f, 0xc1, 0x46, 0xe8, 0xf1, 0xf5, 0xce, 0x42, 0x83, 0x78, 0x57, 0x47, 0x2d, 0x72,
	0xdd, 0xbd, 0x35, 0x5d, 0x05, 0xeb, 0xa4, 0x75, 0xe0, 0x07, 0x33, 0xb6, 0xe4, 0x80, 0xd7, 0x67,
	0xd3, 0xfc, 0x95, 0x48, 0xbb, 0x21, 0x4f, 0x62, 0xd2, 0x08, 0x3c, 0x11, 0xf7, 0x9f, 0x53, 0x80,
	0x8e, 0x3e, 0x54, 0x67, 0x86, 0x70, 0xef, 0xf4, 0xb3, 0xbd, 0x2c, 0x8a, 0xbf, 0xf0, 0x36, 0x93,
	0x58, 0x06, 0xe0, 0x8a, 0x38, 0x9f, 0x85, 0x96, 0xc7, 0x22, 0x01, 0x10, 0x8c, 0x4d, 0x24, 0x8c,
	0x67, 0xbd, 0x6b, 0xe7, 0xce, 0x4d, 0x7c, 0x68, 0xa4, 0xc2, 0x43, 0x03, 0xd9, 0x49, 0x56, 0x43,
	0x09, 0x19, 0x12, 0xbf, 0x0d, 0x90, 0x16, 0xf1, 0x74, 0xb5, 0xdc, 0xe9, 0x2e, 0xb8, 0x44, 0xa6,
	0x30, 0xe2, 0x71, 0x2b, 0xe4, 0x91, 0x8c, 0x67, 0xae, 0x3b, 0xbc, 0x54, 0x7c, 0x30, 0xf1, 0xf2,
	0x0e, 0xc8, 0x54, 0x75, 0xe3, 0x04, 0x22, 0xd1, 0xee, 0x74, 0x4c, 0xd4, 0x81, 0x16, 0x3a, 0xd3,
	0x53, 0xce, 0x3d, 0x9e, 0x8f, 0xf2, 0x9c, 0xad, 0x2b, 0x21, 0x09, 0x77, 0x0f, 0x6c, 0x62, 0x2e,
	0xc1, 0x38, 0xb1, 0xec, 0x61, 0x1b, 0x36, 0x9a, 0x70, 0x29, 0xe1, 0x36, 0xd8, 0xd0, 0xa3, 0x50,
	0xc2, 0xba, 0x28, 0xe6, 0x78, 0x90, 0xc5, 0xd4, 0x0a, 0x34, 0xa0, 0xd9, 0x45, 0x42, 0xdd, 0x71,
	0xfb, 0xc4, 0x59, 0xcc, 0x5c, 0x0b, 0x64, 0x64, 0xf8, 0x00, 0xf9, 0xc3, 0x9d, 0x02, 0x8d, 0xc1,
	0x99, 0x51, 0xbc, 0x06, 0x2e, 0x5b, 0xf0, 0x01, 0x72, 0x47, 0x43, 0xad, 0x07, 0x8d, 0x01, 0x99,
	0x1d, 0x43, 0xcf, 0x44, 0x44, 0xcd, 0x29, 0x49, 0x0b, 0x53, 0xbb, 0xac, 0x2f, 0x7c, 0x11, 0x07,
	0x6b, 0x7e, 0xe3, 0xa0, 0x5f, 0x01, 0xcf, 0x94, 0x05, 0x55, 0xd0, 0xd4, 0x7b, 0x55, 0x49, 0x3b,
	0x92, 0x2b, 0x72, 0x45, 0xad, 0x08, 0xfb, 0x95, 0xfb, 0x52, 0x59, 0x3b, 0x92, 0x6b, 0x55, 0x49,
	0xac, 0xbc, 0x55, 0x91, 0xca, 0xe9, 0x15, 0x66, 0x63, 0x3c, 0x61, 0x93, 0x21, 0x11, 0x7d, 0x13,
	0x5c, 0x0b, 0x2c, 0xc5, 0xfd, 0x8a, 0x24, 0xab, 0x5a, 0x4d, 0x15, 0x54, 0x29, 0x4d, 0x31, 0x60,
	0x3c, 0x61, 0x57, 0xb1, 0x8c, 0x7e, 0x11, 0x6c, 0x86, 0x70, 0x87, 0x72, 0x4d, 0x92, 0x6b, 0x47,
	0x35, 0x02, 0x8d, 0x31, 0x97, 0xc7, 0x13, 0x36, 0x31, 0x17, 0xd3, 0x3c, 0x60, 0x22, 0x68, 0x59,
	0x12, 0xd5, 0xca, 0xa1, 0x4c, 0xe0, 0x17, 0x98, 0xd4, 0x78, 0xc2, 0x82, 0x40, 0x4e, 0x6f, 0x83,
	0xeb, 0x21, 0xfc, 0x5d, 0x41, 0x96, 0xa5, 0x7d, 0x02, 0x8e, 0x33, 0xc9, 0xf1, 0x84, 0xbd, 0x44,
	0x84, 0xf4, 0x6d, 0x70, 0x23, 0x40, 0x56, 0x05, 0x71, 0x4f, 0x52, 0x35, 0xf1, 0xf0, 0xe0, 0xa0,
	0xa2, 0x1e, 0x48, 0xb2, 0x9a, 0xbe, 0xc8, 0x64, 0xc6, 0x13, 0x36, 0x8d, 0x15, 0x81, 0x9c, 0x7e,
	0x03, 0xb0, 0xa7, 0xcc, 0x04, 0x71, 0x4f, 0x3e, 0x7c, 0x7f, 0x5f, 0x2a, 0xbf, 0x2d, 0x79, 0xb6,
	0xab, 0xcc, 0xe6, 0x78, 0xc2, 0x5e, 0xc5, 0xda, 0x05, 0x25, 0xfd, 0xfa, 0x53, 0x08, 0x14, 0x49,
	0x94, 0x2a, 0x55, 0x55, 0x13, 0x4a, 0x35, 0x49, 0x16, 0xa5, 0xf4, 0x25, 0x26, 0x3b, 0x9e, 0xb0,
	0x19, 0xac, 0x25, 0x4a, 0xa2, 0xa3, 0x77, 0xc1, 0x56, 0x60, 0x2f, 0x4b, 0x1f, 0xa8, 0x5a, 0x4d,
	0x7a, 0xf7, 0xc8, 0x55, 0xb9, 0x34, 0xef, 0xa5, 0xd7, 0x70, 0xe0, 0xae, 0xc6, 0x57, 0xb8, 0x72,
	0x9a, 0x05, 0xe9, 0xc0, 0xee, 0xae, 0x24, 0x94, 0x25, 0x25, 0x9d, 0xc0, 0x95, 0xc1, 0x3b, 0x26,
	0xfe, 0xf0, 0x9b, 0xdc, 0x4a, 0x49, 0xfb, 0xe9, 0x71, 0x8e, 0x7a, 0xf4, 0x38, 0x47, 0xfd, 0xfe,
	0x38, 0x47, 0x7d, 0xf9, 0x24, 0xb7, 0xf2, 0xe8, 0x49, 0x6e, 0xe5, 0xd7, 0x27, 0xb9, 0x95, 0xfb,
	0x52, 0xd3, 0x44, 0xad, 0x7e, 0x9d, 0x37, 0xec, 0x0e, 0xf9, 0xd2, 0x21, 0x3f, 0x3b, 0x4e, 0xe3,
	0xa4, 0xf0, 0xa0, 0x30, 0xff, 0xb6, 0xdb, 0xf1, 0x3f, 0xee, 0x5e, 0xda, 0xdd, 0x09, 0x7f, 0xdf,
	0xb9, 0xaf, 0x90, 0x53, 0x5f, 0xf5, 0xda, 0xd9, 0xcb, 0x7f, 0x04, 0x00, 0x00, 0xff, 0xff, 0xd1,
	0xd2, 0x21, 0x16, 0x0c, 0x0e, 0x00, 0x00,
}

func (m *ClientState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AllowUpdateAfterProposal {
		i--
		if m.AllowUpdateAfterProposal {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.ConsensusState != nil {
		{
			size, err := m.ConsensusState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSolomachine(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.FrozenSequence != 0 {
		i = encodeVarintSolomachine(dAtA, i, uint64(m.FrozenSequence))
		i--
		dAtA[i] = 0x10
	}
	if m.Sequence != 0 {
		i = encodeVarintSolomachine(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ConsensusState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsensusState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsensusState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		i = encodeVarintSolomachine(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Diversifier) > 0 {
		i -= len(m.Diversifier)
		copy(dAtA[i:], m.Diversifier)
		i = encodeVarintSolomachine(dAtA, i, uint64(len(m.Diversifier)))
		i--
		dAtA[i] = 0x12
	}
	if m.PublicKey != nil {
		{
			size, err := m.PublicKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSolomachine(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Header) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Header) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Header) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewDiversifier) > 0 {
		i -= len(m.NewDiversifier)
		copy(dAtA[i:], m.NewDiversifier)
		i = encodeVarintSolomachine(dAtA, i, uint64(len(m.NewDiversifier)))
		i--
		dAtA[i] = 0x2a
	}
	if m.NewPublicKey != nil {
		{
			size, err := m.NewPublicKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSolomachine(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintSolomachine(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Timestamp != 0 {
		i = encodeVarintSolomachine(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x10
	}
	if m.Sequence != 0 {
		i = encodeVarintSolomachine(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Misbehaviour) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Misbehaviour) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Misbehaviour) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SignatureTwo != nil {
		{
			size, err := m.SignatureTwo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSolomachine(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.SignatureOne != nil {
		{
			size, err := m.SignatureOne.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSolomachine(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Sequence != 0 {
		i = encodeVarintSolomachine(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ClientId) > 0 {
		i -= len(m.ClientId)
		copy(dAtA[i:], m.ClientId)
		i = encodeVarintSolomachine(dAtA, i, uint64(len(m.ClientId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SignatureAndData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignatureAndData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignatureAndData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		i = encodeVarintSolomachine(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintSolomachine(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x1a
	}
	if m.DataType != 0 {
		i = encodeVarintSolomachine(dAtA, i, uint64(m.DataType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintSolomachine(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TimestampedSignatureData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimestampedSignatureData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TimestampedSignatureData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		i = encodeVarintSolomachine(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SignatureData) > 0 {
		i -= len(m.SignatureData)
		copy(dAtA[i:], m.SignatureData)
		i = encodeVarintSolomachine(dAtA, i, uint64(len(m.SignatureData)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SignBytes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignBytes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignBytes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintSolomachine(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x2a
	}
	if m.DataType != 0 {
		i = encodeVarintSolomachine(dAtA, i, uint64(m.DataType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Diversifier) > 0 {
		i -= len(m.Diversifier)
		copy(dAtA[i:], m.Diversifier)
		i = encodeVarintSolomachine(dAtA, i, uint64(len(m.Diversifier)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Timestamp != 0 {
		i = encodeVarintSolomachine(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x10
	}
	if m.Sequence != 0 {
		i = encodeVarintSolomachine(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HeaderData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeaderData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HeaderData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewDiversifier) > 0 {
		i -= len(m.NewDiversifier)
		copy(dAtA[i:], m.NewDiversifier)
		i = encodeVarintSolomachine(dAtA, i, uint64(len(m.NewDiversifier)))
		i--
		dAtA[i] = 0x12
	}
	if m.NewPubKey != nil {
		{
			size, err := m.NewPubKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSolomachine(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClientStateData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientStateData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientStateData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClientState != nil {
		{
			size, err := m.ClientState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSolomachine(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintSolomachine(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConsensusStateData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsensusStateData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsensusStateData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ConsensusState != nil {
		{
			size, err := m.ConsensusState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSolomachine(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintSolomachine(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConnectionStateData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConnectionStateData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConnectionStateData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Connection != nil {
		{
			size, err := m.Connection.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSolomachine(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintSolomachine(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChannelStateData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelStateData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChannelStateData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Channel != nil {
		{
			size, err := m.Channel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSolomachine(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintSolomachine(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PacketCommitmentData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PacketCommitmentData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PacketCommitmentData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Commitment) > 0 {
		i -= len(m.Commitment)
		copy(dAtA[i:], m.Commitment)
		i = encodeVarintSolomachine(dAtA, i, uint64(len(m.Commitment)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintSolomachine(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PacketAcknowledgementData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PacketAcknowledgementData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PacketAcknowledgementData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Acknowledgement) > 0 {
		i -= len(m.Acknowledgement)
		copy(dAtA[i:], m.Acknowledgement)
		i = encodeVarintSolomachine(dAtA, i, uint64(len(m.Acknowledgement)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintSolomachine(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PacketReceiptAbsenceData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PacketReceiptAbsenceData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PacketReceiptAbsenceData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintSolomachine(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NextSequenceRecvData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NextSequenceRecvData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NextSequenceRecvData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NextSeqRecv != 0 {
		i = encodeVarintSolomachine(dAtA, i, uint64(m.NextSeqRecv))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintSolomachine(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSolomachine(dAtA []byte, offset int, v uint64) int {
	offset -= sovSolomachine(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ClientState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sequence != 0 {
		n += 1 + sovSolomachine(uint64(m.Sequence))
	}
	if m.FrozenSequence != 0 {
		n += 1 + sovSolomachine(uint64(m.FrozenSequence))
	}
	if m.ConsensusState != nil {
		l = m.ConsensusState.Size()
		n += 1 + l + sovSolomachine(uint64(l))
	}
	if m.AllowUpdateAfterProposal {
		n += 2
	}
	return n
}

func (m *ConsensusState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PublicKey != nil {
		l = m.PublicKey.Size()
		n += 1 + l + sovSolomachine(uint64(l))
	}
	l = len(m.Diversifier)
	if l > 0 {
		n += 1 + l + sovSolomachine(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovSolomachine(uint64(m.Timestamp))
	}
	return n
}

func (m *Header) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sequence != 0 {
		n += 1 + sovSolomachine(uint64(m.Sequence))
	}
	if m.Timestamp != 0 {
		n += 1 + sovSolomachine(uint64(m.Timestamp))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovSolomachine(uint64(l))
	}
	if m.NewPublicKey != nil {
		l = m.NewPublicKey.Size()
		n += 1 + l + sovSolomachine(uint64(l))
	}
	l = len(m.NewDiversifier)
	if l > 0 {
		n += 1 + l + sovSolomachine(uint64(l))
	}
	return n
}

func (m *Misbehaviour) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClientId)
	if l > 0 {
		n += 1 + l + sovSolomachine(uint64(l))
	}
	if m.Sequence != 0 {
		n += 1 + sovSolomachine(uint64(m.Sequence))
	}
	if m.SignatureOne != nil {
		l = m.SignatureOne.Size()
		n += 1 + l + sovSolomachine(uint64(l))
	}
	if m.SignatureTwo != nil {
		l = m.SignatureTwo.Size()
		n += 1 + l + sovSolomachine(uint64(l))
	}
	return n
}

func (m *SignatureAndData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovSolomachine(uint64(l))
	}
	if m.DataType != 0 {
		n += 1 + sovSolomachine(uint64(m.DataType))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovSolomachine(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovSolomachine(uint64(m.Timestamp))
	}
	return n
}

func (m *TimestampedSignatureData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SignatureData)
	if l > 0 {
		n += 1 + l + sovSolomachine(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovSolomachine(uint64(m.Timestamp))
	}
	return n
}

func (m *SignBytes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sequence != 0 {
		n += 1 + sovSolomachine(uint64(m.Sequence))
	}
	if m.Timestamp != 0 {
		n += 1 + sovSolomachine(uint64(m.Timestamp))
	}
	l = len(m.Diversifier)
	if l > 0 {
		n += 1 + l + sovSolomachine(uint64(l))
	}
	if m.DataType != 0 {
		n += 1 + sovSolomachine(uint64(m.DataType))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovSolomachine(uint64(l))
	}
	return n
}

func (m *HeaderData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NewPubKey != nil {
		l = m.NewPubKey.Size()
		n += 1 + l + sovSolomachine(uint64(l))
	}
	l = len(m.NewDiversifier)
	if l > 0 {
		n += 1 + l + sovSolomachine(uint64(l))
	}
	return n
}

func (m *ClientStateData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovSolomachine(uint64(l))
	}
	if m.ClientState != nil {
		l = m.ClientState.Size()
		n += 1 + l + sovSolomachine(uint64(l))
	}
	return n
}

func (m *ConsensusStateData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovSolomachine(uint64(l))
	}
	if m.ConsensusState != nil {
		l = m.ConsensusState.Size()
		n += 1 + l + sovSolomachine(uint64(l))
	}
	return n
}

func (m *ConnectionStateData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovSolomachine(uint64(l))
	}
	if m.Connection != nil {
		l = m.Connection.Size()
		n += 1 + l + sovSolomachine(uint64(l))
	}
	return n
}

func (m *ChannelStateData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovSolomachine(uint64(l))
	}
	if m.Channel != nil {
		l = m.Channel.Size()
		n += 1 + l + sovSolomachine(uint64(l))
	}
	return n
}

func (m *PacketCommitmentData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovSolomachine(uint64(l))
	}
	l = len(m.Commitment)
	if l > 0 {
		n += 1 + l + sovSolomachine(uint64(l))
	}
	return n
}

func (m *PacketAcknowledgementData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovSolomachine(uint64(l))
	}
	l = len(m.Acknowledgement)
	if l > 0 {
		n += 1 + l + sovSolomachine(uint64(l))
	}
	return n
}

func (m *PacketReceiptAbsenceData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovSolomachine(uint64(l))
	}
	return n
}

func (m *NextSequenceRecvData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovSolomachine(uint64(l))
	}
	if m.NextSeqRecv != 0 {
		n += 1 + sovSolomachine(uint64(m.NextSeqRecv))
	}
	return n
}

func sovSolomachine(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSolomachine(x uint64) (n int) {
	return sovSolomachine(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ClientState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSolomachine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSolomachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrozenSequence", wireType)
			}
			m.FrozenSequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSolomachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FrozenSequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSolomachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSolomachine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSolomachine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConsensusState == nil {
				m.ConsensusState = &ConsensusState{}
			}
			if err := m.ConsensusState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowUpdateAfterProposal", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSolomachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowUpdateAfterProposal = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSolomachine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSolomachine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSolomachine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsensusState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSolomachine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsensusState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsensusState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSolomachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSolomachine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSolomachine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PublicKey == nil {
				m.PublicKey = &types.Any{}
			}
			if err := m.PublicKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Diversifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSolomachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSolomachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSolomachine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Diversifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSolomachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSolomachine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSolomachine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSolomachine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Header) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSolomachine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Header: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Header: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSolomachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSolomachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSolomachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSolomachine
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSolomachine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewPublicKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSolomachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSolomachine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSolomachine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewPublicKey == nil {
				m.NewPublicKey = &types.Any{}
			}
			if err := m.NewPublicKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewDiversifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSolomachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSolomachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSolomachine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewDiversifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSolomachine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSolomachine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSolomachine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Misbehaviour) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSolomachine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Misbehaviour: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Misbehaviour: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSolomachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSolomachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSolomachine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSolomachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignatureOne", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSolomachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSolomachine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSolomachine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SignatureOne == nil {
				m.SignatureOne = &SignatureAndData{}
			}
			if err := m.SignatureOne.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignatureTwo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSolomachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSolomachine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSolomachine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SignatureTwo == nil {
				m.SignatureTwo = &SignatureAndData{}
			}
			if err := m.SignatureTwo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSolomachine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSolomachine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSolomachine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignatureAndData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSolomachine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignatureAndData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignatureAndData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSolomachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSolomachine
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSolomachine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataType", wireType)
			}
			m.DataType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSolomachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataType |= DataType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSolomachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSolomachine
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSolomachine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSolomachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSolomachine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSolomachine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSolomachine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TimestampedSignatureData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSolomachine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimestampedSignatureData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimestampedSignatureData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignatureData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSolomachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSolomachine
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSolomachine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignatureData = append(m.SignatureData[:0], dAtA[iNdEx:postIndex]...)
			if m.SignatureData == nil {
				m.SignatureData = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSolomachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSolomachine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSolomachine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSolomachine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignBytes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSolomachine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignBytes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignBytes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSolomachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSolomachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Diversifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSolomachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSolomachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSolomachine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Diversifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataType", wireType)
			}
			m.DataType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSolomachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataType |= DataType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSolomachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSolomachine
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSolomachine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSolomachine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSolomachine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSolomachine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeaderData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSolomachine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeaderData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeaderData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewPubKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSolomachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSolomachine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSolomachine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewPubKey == nil {
				m.NewPubKey = &types.Any{}
			}
			if err := m.NewPubKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewDiversifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSolomachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSolomachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSolomachine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewDiversifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSolomachine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSolomachine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSolomachine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientStateData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSolomachine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientStateData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientStateData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSolomachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSolomachine
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSolomachine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = append(m.Path[:0], dAtA[iNdEx:postIndex]...)
			if m.Path == nil {
				m.Path = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSolomachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSolomachine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSolomachine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClientState == nil {
				m.ClientState = &types.Any{}
			}
			if err := m.ClientState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSolomachine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSolomachine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSolomachine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsensusStateData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSolomachine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsensusStateData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsensusStateData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSolomachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSolomachine
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSolomachine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = append(m.Path[:0], dAtA[iNdEx:postIndex]...)
			if m.Path == nil {
				m.Path = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSolomachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSolomachine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSolomachine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConsensusState == nil {
				m.ConsensusState = &types.Any{}
			}
			if err := m.ConsensusState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSolomachine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSolomachine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSolomachine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConnectionStateData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSolomachine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConnectionStateData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConnectionStateData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSolomachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSolomachine
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSolomachine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = append(m.Path[:0], dAtA[iNdEx:postIndex]...)
			if m.Path == nil {
				m.Path = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Connection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSolomachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSolomachine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSolomachine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Connection == nil {
				m.Connection = &types1.ConnectionEnd{}
			}
			if err := m.Connection.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSolomachine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSolomachine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSolomachine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelStateData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSolomachine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelStateData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelStateData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSolomachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSolomachine
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSolomachine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = append(m.Path[:0], dAtA[iNdEx:postIndex]...)
			if m.Path == nil {
				m.Path = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSolomachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSolomachine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSolomachine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Channel == nil {
				m.Channel = &types2.Channel{}
			}
			if err := m.Channel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSolomachine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSolomachine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSolomachine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PacketCommitmentData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSolomachine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PacketCommitmentData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PacketCommitmentData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSolomachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSolomachine
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSolomachine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = append(m.Path[:0], dAtA[iNdEx:postIndex]...)
			if m.Path == nil {
				m.Path = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commitment", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSolomachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSolomachine
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSolomachine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commitment = append(m.Commitment[:0], dAtA[iNdEx:postIndex]...)
			if m.Commitment == nil {
				m.Commitment = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSolomachine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSolomachine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSolomachine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PacketAcknowledgementData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSolomachine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PacketAcknowledgementData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PacketAcknowledgementData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSolomachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSolomachine
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSolomachine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = append(m.Path[:0], dAtA[iNdEx:postIndex]...)
			if m.Path == nil {
				m.Path = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Acknowledgement", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSolomachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSolomachine
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSolomachine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Acknowledgement = append(m.Acknowledgement[:0], dAtA[iNdEx:postIndex]...)
			if m.Acknowledgement == nil {
				m.Acknowledgement = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSolomachine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSolomachine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSolomachine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PacketReceiptAbsenceData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSolomachine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PacketReceiptAbsenceData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PacketReceiptAbsenceData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSolomachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSolomachine
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSolomachine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = append(m.Path[:0], dAtA[iNdEx:postIndex]...)
			if m.Path == nil {
				m.Path = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSolomachine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSolomachine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSolomachine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NextSequenceRecvData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSolomachine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NextSequenceRecvData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NextSequenceRecvData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSolomachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSolomachine
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSolomachine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = append(m.Path[:0], dAtA[iNdEx:postIndex]...)
			if m.Path == nil {
				m.Path = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextSeqRecv", wireType)
			}
			m.NextSeqRecv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSolomachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextSeqRecv |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSolomachine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSolomachine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSolomachine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSolomachine(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSolomachine
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSolomachine
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSolomachine
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSolomachine
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSolomachine
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSolomachine
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSolomachine        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSolomachine          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSolomachine = fmt.Errorf("proto: unexpected end of group")
)
