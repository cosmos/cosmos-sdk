syntax = "proto3";
package cosmos.nft.v1beta1;

option go_package = "cosmossdk.io/x/nft";

import "cosmos_proto/cosmos.proto";
import "cosmos/msg/v1/msg.proto";

// Msg defines the nft Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // Send defines a method to send a nft from one account to another account.
  rpc Send(MsgSend) returns (MsgSendResponse);

  // MintNFT defines a method to mint a new NFT.
  rpc MintNFT(MsgMintNFT) returns (MsgMintNFTResponse);

  // BurnNFT defines a method to burn an NFT.
  rpc BurnNFT(MsgBurnNFT) returns (MsgBurnNFTResponse);

  // StakeNFT defines a method to stake an NFT.
  rpc StakeNFT(MsgStakeNFT) returns (MsgStakeNFTResponse);

  // StreamNFT defines a method to stream an NFT and pay royalties.
  rpc StreamNFT(MsgStreamNFT) returns (MsgStreamNFTResponse);

  // WithdrawRoyalties defines a method to withdraw accumulated royalties.
  rpc WithdrawRoyalties(MsgWithdrawRoyalties) returns (MsgWithdrawRoyaltiesResponse);
}

// MsgSend represents a message to send a nft from one account to another account.
message MsgSend {
  option (cosmos.msg.v1.signer) = "sender";
  string class_id               = 1;
  string id                     = 2;
  string sender                 = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string receiver               = 4 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// MsgSendResponse defines the Msg/Send response type.
message MsgSendResponse {}

// MsgMintNFT represents a message to mint a new NFT.
// MsgMintNFT represents a message to mint a new NFT.
message MsgMintNFT {
  option (cosmos.msg.v1.signer) = "sender";
  string class_id               = 1;
  string id                     = 2;
  string uri                    = 3;
  string uri_hash               = 4;
  string sender                 = 5 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // Optional fields for class creation if it doesn't exist
  string class_name        = 6;
  string class_symbol      = 7;
  string class_description = 8;
  string creator           = 9 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string owner             = 10 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// MsgMintNFTResponse defines the Msg/MintNFT response type.
message MsgMintNFTResponse {}

// MsgBurnNFT represents a message to burn an NFT.
message MsgBurnNFT {
  option (cosmos.msg.v1.signer) = "sender";
  string class_id               = 1;
  string id                     = 2;
  string sender                 = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// MsgBurnNFTResponse defines the Msg/BurnNFT response type.
message MsgBurnNFTResponse {}

// MsgStakeNFT represents a message to stake an NFT.
message MsgStakeNFT {
  option (cosmos.msg.v1.signer) = "sender";
  string class_id               = 1;
  string id                     = 2;
  string sender                 = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  uint64 stake_duration         = 4; // Duration in seconds
}

// MsgStakeNFTResponse defines the Msg/StakeNFT response type.
message MsgStakeNFTResponse {}

// MsgStreamNFT represents a message to stream an NFT and pay royalties.
message MsgStreamNFT {
  option (cosmos.msg.v1.signer) = "sender";
  string class_id               = 1;
  string id                     = 2;
  string sender                 = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string payment                = 4; // Amount to pay for streaming, e.g., "10stake"
}

// MsgStreamNFTResponse defines the Msg/StreamNFT response type.
message MsgStreamNFTResponse {}

// MsgWithdrawRoyalties represents a message to withdraw accumulated royalties.
message MsgWithdrawRoyalties {
  option (cosmos.msg.v1.signer) = "recipient";
  string class_id               = 1;
  string id                     = 2;
  string role                   = 3; // "creator", "platform", or "owner"
  string recipient              = 4 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// MsgWithdrawRoyaltiesResponse defines the Msg/WithdrawRoyalties response type.
message MsgWithdrawRoyaltiesResponse {
  string amount = 1; // Amount withdrawn, e.g., "5stake"
}