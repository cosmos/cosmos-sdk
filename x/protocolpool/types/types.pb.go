// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmos/protocolpool/v1/types.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ContinuousFund defines the fields of continuous fund proposal.
type ContinuousFund struct {
	// Recipient is the address string of the account receiving funds.
	Recipient string `protobuf:"bytes,1,opt,name=recipient,proto3" json:"recipient,omitempty"`
	// Percentage is the percentage of funds to be allocated from Community pool.
	Percentage cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=percentage,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"percentage"`
	// Optional, if expiry is set, removes the state object when expired.
	Expiry *time.Time `protobuf:"bytes,3,opt,name=expiry,proto3,stdtime" json:"expiry,omitempty"`
}

func (m *ContinuousFund) Reset()         { *m = ContinuousFund{} }
func (m *ContinuousFund) String() string { return proto.CompactTextString(m) }
func (*ContinuousFund) ProtoMessage()    {}
func (*ContinuousFund) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1b7d0ea246d7f44, []int{0}
}
func (m *ContinuousFund) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContinuousFund) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContinuousFund.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContinuousFund) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContinuousFund.Merge(m, src)
}
func (m *ContinuousFund) XXX_Size() int {
	return m.Size()
}
func (m *ContinuousFund) XXX_DiscardUnknown() {
	xxx_messageInfo_ContinuousFund.DiscardUnknown(m)
}

var xxx_messageInfo_ContinuousFund proto.InternalMessageInfo

func (m *ContinuousFund) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

func (m *ContinuousFund) GetExpiry() *time.Time {
	if m != nil {
		return m.Expiry
	}
	return nil
}

// Params defines the parameters for the protocolpool module.
type Params struct {
	// EnabledDistributionDenoms lists the denoms that are allowed to be distributed.
	// This is to avoid spending time distributing undesired tokens to continuous funds and budgets.
	EnabledDistributionDenoms []string `protobuf:"bytes,1,rep,name=enabled_distribution_denoms,json=enabledDistributionDenoms,proto3" json:"enabled_distribution_denoms,omitempty"`
	// DistributionFrequency is the frequency (in terms of blocks) that funds are distributed out from the
	// x/protocolpool module.
	DistributionFrequency uint64 `protobuf:"varint,2,opt,name=distribution_frequency,json=distributionFrequency,proto3" json:"distribution_frequency,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1b7d0ea246d7f44, []int{1}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetEnabledDistributionDenoms() []string {
	if m != nil {
		return m.EnabledDistributionDenoms
	}
	return nil
}

func (m *Params) GetDistributionFrequency() uint64 {
	if m != nil {
		return m.DistributionFrequency
	}
	return 0
}

func init() {
	proto.RegisterType((*ContinuousFund)(nil), "cosmos.protocolpool.v1.ContinuousFund")
	proto.RegisterType((*Params)(nil), "cosmos.protocolpool.v1.Params")
}

func init() {
	proto.RegisterFile("cosmos/protocolpool/v1/types.proto", fileDescriptor_c1b7d0ea246d7f44)
}

var fileDescriptor_c1b7d0ea246d7f44 = []byte{
	// 401 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x92, 0x41, 0x6b, 0xdb, 0x30,
	0x18, 0x86, 0xa3, 0xb5, 0x04, 0xa2, 0xc1, 0x0e, 0xa6, 0x2b, 0x6e, 0x0a, 0x4e, 0xc8, 0x29, 0x97,
	0xc8, 0x64, 0x63, 0x63, 0xa7, 0xc1, 0x32, 0xd3, 0xcb, 0x76, 0xd8, 0xbc, 0x9d, 0x76, 0x09, 0xb6,
	0xf4, 0x55, 0x15, 0xb5, 0xf5, 0x79, 0x92, 0x5c, 0xea, 0xd3, 0xfe, 0x42, 0x7f, 0x4c, 0x7f, 0x44,
	0x8f, 0xa5, 0x30, 0x18, 0x3b, 0x74, 0x23, 0xf9, 0x23, 0x63, 0x96, 0x43, 0xdd, 0x93, 0xc4, 0xf7,
	0x3e, 0xef, 0x2b, 0x5e, 0xf4, 0xd1, 0x19, 0x47, 0x5b, 0xa2, 0x8d, 0x2b, 0x83, 0x0e, 0x39, 0x16,
	0x15, 0x62, 0x11, 0x5f, 0x2c, 0x63, 0xd7, 0x54, 0x60, 0x59, 0x3b, 0x0d, 0x0e, 0x3d, 0xc3, 0xfa,
	0x0c, 0xbb, 0x58, 0x8e, 0x0f, 0x24, 0x4a, 0x6c, 0x87, 0xf1, 0xff, 0x9b, 0xd7, 0xc7, 0x47, 0x9e,
	0x5e, 0x7b, 0xa1, 0x6f, 0x1d, 0x4f, 0x24, 0xa2, 0x2c, 0xc0, 0x3f, 0x96, 0xd7, 0xa7, 0xb1, 0x53,
	0x25, 0x58, 0x97, 0x95, 0x95, 0x07, 0x66, 0x3f, 0x09, 0x7d, 0xf6, 0x1e, 0xb5, 0x53, 0xba, 0xc6,
	0xda, 0x9e, 0xd4, 0x5a, 0x04, 0xaf, 0xe9, 0xc8, 0x00, 0x57, 0x95, 0x02, 0xed, 0x42, 0x32, 0x25,
	0xf3, 0xd1, 0x2a, 0xbc, 0xbb, 0x5e, 0x1c, 0x74, 0xc1, 0xef, 0x84, 0x30, 0x60, 0xed, 0x17, 0x67,
	0x94, 0x96, 0xe9, 0x03, 0x1a, 0x7c, 0xa6, 0xb4, 0x02, 0xc3, 0x41, 0xbb, 0x4c, 0x42, 0xf8, 0xa4,
	0x35, 0x2e, 0x6f, 0xee, 0x27, 0x83, 0xdf, 0xf7, 0x93, 0x63, 0x6f, 0xb6, 0xe2, 0x9c, 0x29, 0x8c,
	0xcb, 0xcc, 0x9d, 0xb1, 0x8f, 0x20, 0x33, 0xde, 0x24, 0xc0, 0xef, 0xae, 0x17, 0xb4, 0xcb, 0x4e,
	0x80, 0xa7, 0xbd, 0x90, 0xe0, 0x0d, 0x1d, 0xc2, 0x65, 0xa5, 0x4c, 0x13, 0xee, 0x4d, 0xc9, 0xfc,
	0xe9, 0x8b, 0x31, 0xf3, 0x7d, 0xd8, 0xae, 0x0f, 0xfb, 0xba, 0xeb, 0xb3, 0xda, 0xbf, 0xfa, 0x33,
	0x21, 0x69, 0xc7, 0xcf, 0x7e, 0xd0, 0xe1, 0xa7, 0xcc, 0x64, 0xa5, 0x0d, 0xde, 0xd2, 0x63, 0xd0,
	0x59, 0x5e, 0x80, 0x58, 0x0b, 0x65, 0x9d, 0x51, 0x79, 0xed, 0x14, 0xea, 0xb5, 0x00, 0x8d, 0xa5,
	0x0d, 0xc9, 0x74, 0x6f, 0x3e, 0x4a, 0x8f, 0x3a, 0x24, 0xe9, 0x11, 0x49, 0x0b, 0x04, 0xaf, 0xe8,
	0xe1, 0x23, 0xdf, 0xa9, 0x81, 0xef, 0x35, 0x68, 0xde, 0xb4, 0x15, 0xf7, 0xd3, 0xe7, 0x7d, 0xf5,
	0x64, 0x27, 0xae, 0x3e, 0xdc, 0x6c, 0x22, 0x72, 0xbb, 0x89, 0xc8, 0xdf, 0x4d, 0x44, 0xae, 0xb6,
	0xd1, 0xe0, 0x76, 0x1b, 0x0d, 0x7e, 0x6d, 0xa3, 0xc1, 0xb7, 0xa5, 0x54, 0xee, 0xac, 0xce, 0x19,
	0xc7, 0xb2, 0xfb, 0xac, 0xee, 0x58, 0x58, 0x71, 0x1e, 0x5f, 0x3e, 0x5e, 0x8c, 0x76, 0x2b, 0xf2,
	0x61, 0x3b, 0x7b, 0xf9, 0x2f, 0x00, 0x00, 0xff, 0xff, 0xc9, 0x13, 0xcd, 0x50, 0x3c, 0x02, 0x00,
	0x00,
}

func (m *ContinuousFund) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContinuousFund) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContinuousFund) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Expiry != nil {
		n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.Expiry, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.Expiry):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintTypes(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x1a
	}
	{
		size := m.Percentage.Size()
		i -= size
		if _, err := m.Percentage.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DistributionFrequency != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.DistributionFrequency))
		i--
		dAtA[i] = 0x10
	}
	if len(m.EnabledDistributionDenoms) > 0 {
		for iNdEx := len(m.EnabledDistributionDenoms) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.EnabledDistributionDenoms[iNdEx])
			copy(dAtA[i:], m.EnabledDistributionDenoms[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.EnabledDistributionDenoms[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ContinuousFund) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = m.Percentage.Size()
	n += 1 + l + sovTypes(uint64(l))
	if m.Expiry != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.Expiry)
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EnabledDistributionDenoms) > 0 {
		for _, s := range m.EnabledDistributionDenoms {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.DistributionFrequency != 0 {
		n += 1 + sovTypes(uint64(m.DistributionFrequency))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ContinuousFund) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContinuousFund: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContinuousFund: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Percentage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Percentage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Expiry == nil {
				m.Expiry = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.Expiry, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnabledDistributionDenoms", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnabledDistributionDenoms = append(m.EnabledDistributionDenoms, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributionFrequency", wireType)
			}
			m.DistributionFrequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DistributionFrequency |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
