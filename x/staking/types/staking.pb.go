// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmos/staking/v1beta1/staking.proto

package types

import (
	bytes "bytes"
	compress_gzip "compress/gzip"
	fmt "fmt"
	types1 "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types2 "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_protoc_gen_gogo_descriptor "github.com/gogo/protobuf/protoc-gen-gogo/descriptor"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/golang/protobuf/ptypes/duration"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/regen-network/cosmos-proto"
	types "github.com/tendermint/tendermint/proto/tendermint/types"
	io "io"
	io_ioutil "io/ioutil"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// BondStatus is the status of a validator.
type BondStatus int32

const (
	// UNSPECIFIED defines an invalid validator status.
	Unspecified BondStatus = 0
	// UNBONDED defines a validator that is not bonded.
	Unbonded BondStatus = 1
	// UNBONDING defines a validator that is unbonding.
	Unbonding BondStatus = 2
	// BONDED defines a validator that is bonded.
	Bonded BondStatus = 3
)

var BondStatus_name = map[int32]string{
	0: "BOND_STATUS_UNSPECIFIED",
	1: "BOND_STATUS_UNBONDED",
	2: "BOND_STATUS_UNBONDING",
	3: "BOND_STATUS_BONDED",
}

var BondStatus_value = map[string]int32{
	"BOND_STATUS_UNSPECIFIED": 0,
	"BOND_STATUS_UNBONDED":    1,
	"BOND_STATUS_UNBONDING":   2,
	"BOND_STATUS_BONDED":      3,
}

func (x BondStatus) String() string {
	return proto.EnumName(BondStatus_name, int32(x))
}

func (BondStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_64c30c6cf92913c9, []int{0}
}

// HistoricalInfo contains header and validator information for a given block.
// It is stored as part of staking module's state, which persists the `n` most
// recent HistoricalInfo
// (`n` is set by the staking module's `historical_entries` parameter).
type HistoricalInfo struct {
	Header types.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header"`
	Valset []Validator  `protobuf:"bytes,2,rep,name=valset,proto3" json:"valset"`
}

func (m *HistoricalInfo) Reset()         { *m = HistoricalInfo{} }
func (m *HistoricalInfo) String() string { return proto.CompactTextString(m) }
func (*HistoricalInfo) ProtoMessage()    {}
func (*HistoricalInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_64c30c6cf92913c9, []int{0}
}
func (m *HistoricalInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HistoricalInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HistoricalInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HistoricalInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HistoricalInfo.Merge(m, src)
}
func (m *HistoricalInfo) XXX_Size() int {
	return m.Size()
}
func (m *HistoricalInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_HistoricalInfo.DiscardUnknown(m)
}

var xxx_messageInfo_HistoricalInfo proto.InternalMessageInfo

func (m *HistoricalInfo) GetHeader() types.Header {
	if m != nil {
		return m.Header
	}
	return types.Header{}
}

func (m *HistoricalInfo) GetValset() []Validator {
	if m != nil {
		return m.Valset
	}
	return nil
}

// CommissionRates defines the initial commission rates to be used for creating
// a validator.
type CommissionRates struct {
	Rate          github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=rate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"rate"`
	MaxRate       github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=max_rate,json=maxRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"max_rate" yaml:"max_rate"`
	MaxChangeRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=max_change_rate,json=maxChangeRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"max_change_rate" yaml:"max_change_rate"`
}

func (m *CommissionRates) Reset()      { *m = CommissionRates{} }
func (*CommissionRates) ProtoMessage() {}
func (*CommissionRates) Descriptor() ([]byte, []int) {
	return fileDescriptor_64c30c6cf92913c9, []int{1}
}
func (m *CommissionRates) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommissionRates) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommissionRates.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommissionRates) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommissionRates.Merge(m, src)
}
func (m *CommissionRates) XXX_Size() int {
	return m.Size()
}
func (m *CommissionRates) XXX_DiscardUnknown() {
	xxx_messageInfo_CommissionRates.DiscardUnknown(m)
}

var xxx_messageInfo_CommissionRates proto.InternalMessageInfo

// Commission defines commission parameters for a given validator.
type Commission struct {
	CommissionRates `protobuf:"bytes,1,opt,name=commission_rates,json=commissionRates,proto3,embedded=commission_rates" json:"commission_rates"`
	UpdateTime      time.Time `protobuf:"bytes,2,opt,name=update_time,json=updateTime,proto3,stdtime" json:"update_time" yaml:"update_time"`
}

func (m *Commission) Reset()      { *m = Commission{} }
func (*Commission) ProtoMessage() {}
func (*Commission) Descriptor() ([]byte, []int) {
	return fileDescriptor_64c30c6cf92913c9, []int{2}
}
func (m *Commission) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Commission) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Commission.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Commission) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Commission.Merge(m, src)
}
func (m *Commission) XXX_Size() int {
	return m.Size()
}
func (m *Commission) XXX_DiscardUnknown() {
	xxx_messageInfo_Commission.DiscardUnknown(m)
}

var xxx_messageInfo_Commission proto.InternalMessageInfo

func (m *Commission) GetUpdateTime() time.Time {
	if m != nil {
		return m.UpdateTime
	}
	return time.Time{}
}

// Description defines a validator description.
type Description struct {
	Moniker         string `protobuf:"bytes,1,opt,name=moniker,proto3" json:"moniker,omitempty"`
	Identity        string `protobuf:"bytes,2,opt,name=identity,proto3" json:"identity,omitempty"`
	Website         string `protobuf:"bytes,3,opt,name=website,proto3" json:"website,omitempty"`
	SecurityContact string `protobuf:"bytes,4,opt,name=security_contact,json=securityContact,proto3" json:"security_contact,omitempty" yaml:"security_contact"`
	Details         string `protobuf:"bytes,5,opt,name=details,proto3" json:"details,omitempty"`
}

func (m *Description) Reset()      { *m = Description{} }
func (*Description) ProtoMessage() {}
func (*Description) Descriptor() ([]byte, []int) {
	return fileDescriptor_64c30c6cf92913c9, []int{3}
}
func (m *Description) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Description) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Description.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Description) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Description.Merge(m, src)
}
func (m *Description) XXX_Size() int {
	return m.Size()
}
func (m *Description) XXX_DiscardUnknown() {
	xxx_messageInfo_Description.DiscardUnknown(m)
}

var xxx_messageInfo_Description proto.InternalMessageInfo

func (m *Description) GetMoniker() string {
	if m != nil {
		return m.Moniker
	}
	return ""
}

func (m *Description) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *Description) GetWebsite() string {
	if m != nil {
		return m.Website
	}
	return ""
}

func (m *Description) GetSecurityContact() string {
	if m != nil {
		return m.SecurityContact
	}
	return ""
}

func (m *Description) GetDetails() string {
	if m != nil {
		return m.Details
	}
	return ""
}

// Validator defines a validator, together with the total amount of the
// Validator's bond shares and their exchange rate to coins. Slashing results in
// a decrease in the exchange rate, allowing correct calculation of future
// undelegations without iterating over delegators. When coins are delegated to
// this validator, the validator is credited with a delegation whose number of
// bond shares is based on the amount of coins delegated divided by the current
// exchange rate. Voting power can be calculated as total bonded shares
// multiplied by exchange rate.
type Validator struct {
	OperatorAddress   string                                 `protobuf:"bytes,1,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty" yaml:"operator_address"`
	ConsensusPubkey   *types1.Any                            `protobuf:"bytes,2,opt,name=consensus_pubkey,json=consensusPubkey,proto3" json:"consensus_pubkey,omitempty" yaml:"consensus_pubkey"`
	Jailed            bool                                   `protobuf:"varint,3,opt,name=jailed,proto3" json:"jailed,omitempty"`
	Status            BondStatus                             `protobuf:"varint,4,opt,name=status,proto3,enum=cosmos.staking.v1beta1.BondStatus" json:"status,omitempty"`
	Tokens            github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=tokens,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"tokens"`
	DelegatorShares   github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=delegator_shares,json=delegatorShares,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"delegator_shares" yaml:"delegator_shares"`
	Description       Description                            `protobuf:"bytes,7,opt,name=description,proto3" json:"description"`
	UnbondingHeight   int64                                  `protobuf:"varint,8,opt,name=unbonding_height,json=unbondingHeight,proto3" json:"unbonding_height,omitempty" yaml:"unbonding_height"`
	UnbondingTime     time.Time                              `protobuf:"bytes,9,opt,name=unbonding_time,json=unbondingTime,proto3,stdtime" json:"unbonding_time" yaml:"unbonding_time"`
	Commission        Commission                             `protobuf:"bytes,10,opt,name=commission,proto3" json:"commission"`
	MinSelfDelegation github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,11,opt,name=min_self_delegation,json=minSelfDelegation,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"min_self_delegation" yaml:"min_self_delegation"`
}

func (m *Validator) Reset()      { *m = Validator{} }
func (*Validator) ProtoMessage() {}
func (*Validator) Descriptor() ([]byte, []int) {
	return fileDescriptor_64c30c6cf92913c9, []int{4}
}
func (m *Validator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Validator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Validator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Validator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Validator.Merge(m, src)
}
func (m *Validator) XXX_Size() int {
	return m.Size()
}
func (m *Validator) XXX_DiscardUnknown() {
	xxx_messageInfo_Validator.DiscardUnknown(m)
}

var xxx_messageInfo_Validator proto.InternalMessageInfo

// ValAddresses defines a repeated set of validator addresses.
type ValAddresses struct {
	Addresses []string `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (m *ValAddresses) Reset()      { *m = ValAddresses{} }
func (*ValAddresses) ProtoMessage() {}
func (*ValAddresses) Descriptor() ([]byte, []int) {
	return fileDescriptor_64c30c6cf92913c9, []int{5}
}
func (m *ValAddresses) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValAddresses) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValAddresses.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValAddresses) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValAddresses.Merge(m, src)
}
func (m *ValAddresses) XXX_Size() int {
	return m.Size()
}
func (m *ValAddresses) XXX_DiscardUnknown() {
	xxx_messageInfo_ValAddresses.DiscardUnknown(m)
}

var xxx_messageInfo_ValAddresses proto.InternalMessageInfo

func (m *ValAddresses) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

// DVPair is struct that just has a delegator-validator pair with no other data.
// It is intended to be used as a marshalable pointer. For example, a DVPair can
// be used to construct the key to getting an UnbondingDelegation from state.
type DVPair struct {
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty" yaml:"delegator_address"`
	ValidatorAddress string `protobuf:"bytes,2,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty" yaml:"validator_address"`
}

func (m *DVPair) Reset()      { *m = DVPair{} }
func (*DVPair) ProtoMessage() {}
func (*DVPair) Descriptor() ([]byte, []int) {
	return fileDescriptor_64c30c6cf92913c9, []int{6}
}
func (m *DVPair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DVPair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DVPair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DVPair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DVPair.Merge(m, src)
}
func (m *DVPair) XXX_Size() int {
	return m.Size()
}
func (m *DVPair) XXX_DiscardUnknown() {
	xxx_messageInfo_DVPair.DiscardUnknown(m)
}

var xxx_messageInfo_DVPair proto.InternalMessageInfo

// DVPairs defines an array of DVPair objects.
type DVPairs struct {
	Pairs []DVPair `protobuf:"bytes,1,rep,name=pairs,proto3" json:"pairs"`
}

func (m *DVPairs) Reset()         { *m = DVPairs{} }
func (m *DVPairs) String() string { return proto.CompactTextString(m) }
func (*DVPairs) ProtoMessage()    {}
func (*DVPairs) Descriptor() ([]byte, []int) {
	return fileDescriptor_64c30c6cf92913c9, []int{7}
}
func (m *DVPairs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DVPairs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DVPairs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DVPairs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DVPairs.Merge(m, src)
}
func (m *DVPairs) XXX_Size() int {
	return m.Size()
}
func (m *DVPairs) XXX_DiscardUnknown() {
	xxx_messageInfo_DVPairs.DiscardUnknown(m)
}

var xxx_messageInfo_DVPairs proto.InternalMessageInfo

func (m *DVPairs) GetPairs() []DVPair {
	if m != nil {
		return m.Pairs
	}
	return nil
}

// DVVTriplet is struct that just has a delegator-validator-validator triplet
// with no other data. It is intended to be used as a marshalable pointer. For
// example, a DVVTriplet can be used to construct the key to getting a
// Redelegation from state.
type DVVTriplet struct {
	DelegatorAddress    string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty" yaml:"delegator_address"`
	ValidatorSrcAddress string `protobuf:"bytes,2,opt,name=validator_src_address,json=validatorSrcAddress,proto3" json:"validator_src_address,omitempty" yaml:"validator_src_address"`
	ValidatorDstAddress string `protobuf:"bytes,3,opt,name=validator_dst_address,json=validatorDstAddress,proto3" json:"validator_dst_address,omitempty" yaml:"validator_dst_address"`
}

func (m *DVVTriplet) Reset()      { *m = DVVTriplet{} }
func (*DVVTriplet) ProtoMessage() {}
func (*DVVTriplet) Descriptor() ([]byte, []int) {
	return fileDescriptor_64c30c6cf92913c9, []int{8}
}
func (m *DVVTriplet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DVVTriplet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DVVTriplet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DVVTriplet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DVVTriplet.Merge(m, src)
}
func (m *DVVTriplet) XXX_Size() int {
	return m.Size()
}
func (m *DVVTriplet) XXX_DiscardUnknown() {
	xxx_messageInfo_DVVTriplet.DiscardUnknown(m)
}

var xxx_messageInfo_DVVTriplet proto.InternalMessageInfo

// DVVTriplets defines an array of DVVTriplet objects.
type DVVTriplets struct {
	Triplets []DVVTriplet `protobuf:"bytes,1,rep,name=triplets,proto3" json:"triplets"`
}

func (m *DVVTriplets) Reset()         { *m = DVVTriplets{} }
func (m *DVVTriplets) String() string { return proto.CompactTextString(m) }
func (*DVVTriplets) ProtoMessage()    {}
func (*DVVTriplets) Descriptor() ([]byte, []int) {
	return fileDescriptor_64c30c6cf92913c9, []int{9}
}
func (m *DVVTriplets) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DVVTriplets) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DVVTriplets.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DVVTriplets) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DVVTriplets.Merge(m, src)
}
func (m *DVVTriplets) XXX_Size() int {
	return m.Size()
}
func (m *DVVTriplets) XXX_DiscardUnknown() {
	xxx_messageInfo_DVVTriplets.DiscardUnknown(m)
}

var xxx_messageInfo_DVVTriplets proto.InternalMessageInfo

func (m *DVVTriplets) GetTriplets() []DVVTriplet {
	if m != nil {
		return m.Triplets
	}
	return nil
}

// Delegation represents the bond with tokens held by an account. It is
// owned by one delegator, and is associated with the voting power of one
// validator.
type Delegation struct {
	DelegatorAddress string                                 `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty" yaml:"delegator_address"`
	ValidatorAddress string                                 `protobuf:"bytes,2,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty" yaml:"validator_address"`
	Shares           github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=shares,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"shares"`
}

func (m *Delegation) Reset()      { *m = Delegation{} }
func (*Delegation) ProtoMessage() {}
func (*Delegation) Descriptor() ([]byte, []int) {
	return fileDescriptor_64c30c6cf92913c9, []int{10}
}
func (m *Delegation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Delegation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Delegation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Delegation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Delegation.Merge(m, src)
}
func (m *Delegation) XXX_Size() int {
	return m.Size()
}
func (m *Delegation) XXX_DiscardUnknown() {
	xxx_messageInfo_Delegation.DiscardUnknown(m)
}

var xxx_messageInfo_Delegation proto.InternalMessageInfo

// UnbondingDelegation stores all of a single delegator's unbonding bonds
// for a single validator in an time-ordered list.
type UnbondingDelegation struct {
	DelegatorAddress string                     `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty" yaml:"delegator_address"`
	ValidatorAddress string                     `protobuf:"bytes,2,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty" yaml:"validator_address"`
	Entries          []UnbondingDelegationEntry `protobuf:"bytes,3,rep,name=entries,proto3" json:"entries"`
}

func (m *UnbondingDelegation) Reset()      { *m = UnbondingDelegation{} }
func (*UnbondingDelegation) ProtoMessage() {}
func (*UnbondingDelegation) Descriptor() ([]byte, []int) {
	return fileDescriptor_64c30c6cf92913c9, []int{11}
}
func (m *UnbondingDelegation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnbondingDelegation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnbondingDelegation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnbondingDelegation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnbondingDelegation.Merge(m, src)
}
func (m *UnbondingDelegation) XXX_Size() int {
	return m.Size()
}
func (m *UnbondingDelegation) XXX_DiscardUnknown() {
	xxx_messageInfo_UnbondingDelegation.DiscardUnknown(m)
}

var xxx_messageInfo_UnbondingDelegation proto.InternalMessageInfo

// UnbondingDelegationEntry defines an unbonding object with relevant metadata.
type UnbondingDelegationEntry struct {
	CreationHeight int64                                  `protobuf:"varint,1,opt,name=creation_height,json=creationHeight,proto3" json:"creation_height,omitempty" yaml:"creation_height"`
	CompletionTime time.Time                              `protobuf:"bytes,2,opt,name=completion_time,json=completionTime,proto3,stdtime" json:"completion_time" yaml:"completion_time"`
	InitialBalance github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=initial_balance,json=initialBalance,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"initial_balance" yaml:"initial_balance"`
	Balance        github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=balance,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"balance"`
}

func (m *UnbondingDelegationEntry) Reset()      { *m = UnbondingDelegationEntry{} }
func (*UnbondingDelegationEntry) ProtoMessage() {}
func (*UnbondingDelegationEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_64c30c6cf92913c9, []int{12}
}
func (m *UnbondingDelegationEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnbondingDelegationEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnbondingDelegationEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnbondingDelegationEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnbondingDelegationEntry.Merge(m, src)
}
func (m *UnbondingDelegationEntry) XXX_Size() int {
	return m.Size()
}
func (m *UnbondingDelegationEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_UnbondingDelegationEntry.DiscardUnknown(m)
}

var xxx_messageInfo_UnbondingDelegationEntry proto.InternalMessageInfo

func (m *UnbondingDelegationEntry) GetCreationHeight() int64 {
	if m != nil {
		return m.CreationHeight
	}
	return 0
}

func (m *UnbondingDelegationEntry) GetCompletionTime() time.Time {
	if m != nil {
		return m.CompletionTime
	}
	return time.Time{}
}

// RedelegationEntry defines a redelegation object with relevant metadata.
type RedelegationEntry struct {
	CreationHeight int64                                  `protobuf:"varint,1,opt,name=creation_height,json=creationHeight,proto3" json:"creation_height,omitempty" yaml:"creation_height"`
	CompletionTime time.Time                              `protobuf:"bytes,2,opt,name=completion_time,json=completionTime,proto3,stdtime" json:"completion_time" yaml:"completion_time"`
	InitialBalance github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=initial_balance,json=initialBalance,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"initial_balance" yaml:"initial_balance"`
	SharesDst      github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=shares_dst,json=sharesDst,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"shares_dst"`
}

func (m *RedelegationEntry) Reset()      { *m = RedelegationEntry{} }
func (*RedelegationEntry) ProtoMessage() {}
func (*RedelegationEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_64c30c6cf92913c9, []int{13}
}
func (m *RedelegationEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RedelegationEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RedelegationEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RedelegationEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedelegationEntry.Merge(m, src)
}
func (m *RedelegationEntry) XXX_Size() int {
	return m.Size()
}
func (m *RedelegationEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_RedelegationEntry.DiscardUnknown(m)
}

var xxx_messageInfo_RedelegationEntry proto.InternalMessageInfo

func (m *RedelegationEntry) GetCreationHeight() int64 {
	if m != nil {
		return m.CreationHeight
	}
	return 0
}

func (m *RedelegationEntry) GetCompletionTime() time.Time {
	if m != nil {
		return m.CompletionTime
	}
	return time.Time{}
}

// Redelegation contains the list of a particular delegator's redelegating bonds
// from a particular source validator to a particular destination validator.
type Redelegation struct {
	DelegatorAddress    string              `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty" yaml:"delegator_address"`
	ValidatorSrcAddress string              `protobuf:"bytes,2,opt,name=validator_src_address,json=validatorSrcAddress,proto3" json:"validator_src_address,omitempty" yaml:"validator_src_address"`
	ValidatorDstAddress string              `protobuf:"bytes,3,opt,name=validator_dst_address,json=validatorDstAddress,proto3" json:"validator_dst_address,omitempty" yaml:"validator_dst_address"`
	Entries             []RedelegationEntry `protobuf:"bytes,4,rep,name=entries,proto3" json:"entries"`
}

func (m *Redelegation) Reset()      { *m = Redelegation{} }
func (*Redelegation) ProtoMessage() {}
func (*Redelegation) Descriptor() ([]byte, []int) {
	return fileDescriptor_64c30c6cf92913c9, []int{14}
}
func (m *Redelegation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Redelegation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Redelegation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Redelegation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Redelegation.Merge(m, src)
}
func (m *Redelegation) XXX_Size() int {
	return m.Size()
}
func (m *Redelegation) XXX_DiscardUnknown() {
	xxx_messageInfo_Redelegation.DiscardUnknown(m)
}

var xxx_messageInfo_Redelegation proto.InternalMessageInfo

// Params defines the parameters for the staking module.
type Params struct {
	UnbondingTime     time.Duration `protobuf:"bytes,1,opt,name=unbonding_time,json=unbondingTime,proto3,stdduration" json:"unbonding_time" yaml:"unbonding_time"`
	MaxValidators     uint32        `protobuf:"varint,2,opt,name=max_validators,json=maxValidators,proto3" json:"max_validators,omitempty" yaml:"max_validators"`
	MaxEntries        uint32        `protobuf:"varint,3,opt,name=max_entries,json=maxEntries,proto3" json:"max_entries,omitempty" yaml:"max_entries"`
	HistoricalEntries uint32        `protobuf:"varint,4,opt,name=historical_entries,json=historicalEntries,proto3" json:"historical_entries,omitempty" yaml:"historical_entries"`
	BondDenom         string        `protobuf:"bytes,5,opt,name=bond_denom,json=bondDenom,proto3" json:"bond_denom,omitempty" yaml:"bond_denom"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_64c30c6cf92913c9, []int{15}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetUnbondingTime() time.Duration {
	if m != nil {
		return m.UnbondingTime
	}
	return 0
}

func (m *Params) GetMaxValidators() uint32 {
	if m != nil {
		return m.MaxValidators
	}
	return 0
}

func (m *Params) GetMaxEntries() uint32 {
	if m != nil {
		return m.MaxEntries
	}
	return 0
}

func (m *Params) GetHistoricalEntries() uint32 {
	if m != nil {
		return m.HistoricalEntries
	}
	return 0
}

func (m *Params) GetBondDenom() string {
	if m != nil {
		return m.BondDenom
	}
	return ""
}

// DelegationResponse is equivalent to Delegation except that it contains a
// balance in addition to shares which is more suitable for client responses.
type DelegationResponse struct {
	Delegation Delegation  `protobuf:"bytes,1,opt,name=delegation,proto3" json:"delegation"`
	Balance    types2.Coin `protobuf:"bytes,2,opt,name=balance,proto3" json:"balance"`
}

func (m *DelegationResponse) Reset()      { *m = DelegationResponse{} }
func (*DelegationResponse) ProtoMessage() {}
func (*DelegationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_64c30c6cf92913c9, []int{16}
}
func (m *DelegationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegationResponse.Merge(m, src)
}
func (m *DelegationResponse) XXX_Size() int {
	return m.Size()
}
func (m *DelegationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DelegationResponse proto.InternalMessageInfo

func (m *DelegationResponse) GetDelegation() Delegation {
	if m != nil {
		return m.Delegation
	}
	return Delegation{}
}

func (m *DelegationResponse) GetBalance() types2.Coin {
	if m != nil {
		return m.Balance
	}
	return types2.Coin{}
}

// RedelegationEntryResponse is equivalent to a RedelegationEntry except that it
// contains a balance in addition to shares which is more suitable for client
// responses.
type RedelegationEntryResponse struct {
	RedelegationEntry RedelegationEntry                      `protobuf:"bytes,1,opt,name=redelegation_entry,json=redelegationEntry,proto3" json:"redelegation_entry"`
	Balance           github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=balance,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"balance"`
}

func (m *RedelegationEntryResponse) Reset()         { *m = RedelegationEntryResponse{} }
func (m *RedelegationEntryResponse) String() string { return proto.CompactTextString(m) }
func (*RedelegationEntryResponse) ProtoMessage()    {}
func (*RedelegationEntryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_64c30c6cf92913c9, []int{17}
}
func (m *RedelegationEntryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RedelegationEntryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RedelegationEntryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RedelegationEntryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedelegationEntryResponse.Merge(m, src)
}
func (m *RedelegationEntryResponse) XXX_Size() int {
	return m.Size()
}
func (m *RedelegationEntryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RedelegationEntryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RedelegationEntryResponse proto.InternalMessageInfo

func (m *RedelegationEntryResponse) GetRedelegationEntry() RedelegationEntry {
	if m != nil {
		return m.RedelegationEntry
	}
	return RedelegationEntry{}
}

// RedelegationResponse is equivalent to a Redelegation except that its entries
// contain a balance in addition to shares which is more suitable for client
// responses.
type RedelegationResponse struct {
	Redelegation Redelegation                `protobuf:"bytes,1,opt,name=redelegation,proto3" json:"redelegation"`
	Entries      []RedelegationEntryResponse `protobuf:"bytes,2,rep,name=entries,proto3" json:"entries"`
}

func (m *RedelegationResponse) Reset()         { *m = RedelegationResponse{} }
func (m *RedelegationResponse) String() string { return proto.CompactTextString(m) }
func (*RedelegationResponse) ProtoMessage()    {}
func (*RedelegationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_64c30c6cf92913c9, []int{18}
}
func (m *RedelegationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RedelegationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RedelegationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RedelegationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedelegationResponse.Merge(m, src)
}
func (m *RedelegationResponse) XXX_Size() int {
	return m.Size()
}
func (m *RedelegationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RedelegationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RedelegationResponse proto.InternalMessageInfo

func (m *RedelegationResponse) GetRedelegation() Redelegation {
	if m != nil {
		return m.Redelegation
	}
	return Redelegation{}
}

func (m *RedelegationResponse) GetEntries() []RedelegationEntryResponse {
	if m != nil {
		return m.Entries
	}
	return nil
}

// Pool is used for tracking bonded and not-bonded token supply of the bond
// denomination.
type Pool struct {
	NotBondedTokens github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=not_bonded_tokens,json=notBondedTokens,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"not_bonded_tokens"`
	BondedTokens    github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=bonded_tokens,json=bondedTokens,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"bonded_tokens" yaml:"bonded_tokens"`
}

func (m *Pool) Reset()         { *m = Pool{} }
func (m *Pool) String() string { return proto.CompactTextString(m) }
func (*Pool) ProtoMessage()    {}
func (*Pool) Descriptor() ([]byte, []int) {
	return fileDescriptor_64c30c6cf92913c9, []int{19}
}
func (m *Pool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pool.Merge(m, src)
}
func (m *Pool) XXX_Size() int {
	return m.Size()
}
func (m *Pool) XXX_DiscardUnknown() {
	xxx_messageInfo_Pool.DiscardUnknown(m)
}

var xxx_messageInfo_Pool proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("cosmos.staking.v1beta1.BondStatus", BondStatus_name, BondStatus_value)
	proto.RegisterType((*HistoricalInfo)(nil), "cosmos.staking.v1beta1.HistoricalInfo")
	proto.RegisterType((*CommissionRates)(nil), "cosmos.staking.v1beta1.CommissionRates")
	proto.RegisterType((*Commission)(nil), "cosmos.staking.v1beta1.Commission")
	proto.RegisterType((*Description)(nil), "cosmos.staking.v1beta1.Description")
	proto.RegisterType((*Validator)(nil), "cosmos.staking.v1beta1.Validator")
	proto.RegisterType((*ValAddresses)(nil), "cosmos.staking.v1beta1.ValAddresses")
	proto.RegisterType((*DVPair)(nil), "cosmos.staking.v1beta1.DVPair")
	proto.RegisterType((*DVPairs)(nil), "cosmos.staking.v1beta1.DVPairs")
	proto.RegisterType((*DVVTriplet)(nil), "cosmos.staking.v1beta1.DVVTriplet")
	proto.RegisterType((*DVVTriplets)(nil), "cosmos.staking.v1beta1.DVVTriplets")
	proto.RegisterType((*Delegation)(nil), "cosmos.staking.v1beta1.Delegation")
	proto.RegisterType((*UnbondingDelegation)(nil), "cosmos.staking.v1beta1.UnbondingDelegation")
	proto.RegisterType((*UnbondingDelegationEntry)(nil), "cosmos.staking.v1beta1.UnbondingDelegationEntry")
	proto.RegisterType((*RedelegationEntry)(nil), "cosmos.staking.v1beta1.RedelegationEntry")
	proto.RegisterType((*Redelegation)(nil), "cosmos.staking.v1beta1.Redelegation")
	proto.RegisterType((*Params)(nil), "cosmos.staking.v1beta1.Params")
	proto.RegisterType((*DelegationResponse)(nil), "cosmos.staking.v1beta1.DelegationResponse")
	proto.RegisterType((*RedelegationEntryResponse)(nil), "cosmos.staking.v1beta1.RedelegationEntryResponse")
	proto.RegisterType((*RedelegationResponse)(nil), "cosmos.staking.v1beta1.RedelegationResponse")
	proto.RegisterType((*Pool)(nil), "cosmos.staking.v1beta1.Pool")
}

func init() {
	proto.RegisterFile("cosmos/staking/v1beta1/staking.proto", fileDescriptor_64c30c6cf92913c9)
}

var fileDescriptor_64c30c6cf92913c9 = []byte{
	// 1796 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x58, 0x4d, 0x6c, 0x23, 0x49,
	0x15, 0x76, 0x3b, 0x5e, 0xc7, 0x7e, 0x4e, 0xe2, 0xa4, 0x26, 0x33, 0xeb, 0x98, 0xc1, 0xed, 0x6d,
	0x56, 0x4b, 0x40, 0xbb, 0x0e, 0x93, 0x45, 0x8b, 0xc8, 0x05, 0xc6, 0x71, 0x86, 0x58, 0xbb, 0x0c,
	0xa1, 0x93, 0x09, 0x12, 0xac, 0xb0, 0xca, 0xdd, 0x15, 0xa7, 0x89, 0xbb, 0xdb, 0x74, 0x95, 0x87,
	0x58, 0xda, 0x03, 0xc7, 0x65, 0x10, 0x62, 0xb9, 0xed, 0x65, 0xa4, 0x91, 0xf6, 0xba, 0x12, 0x17,
	0xc4, 0x95, 0xeb, 0x02, 0x97, 0xe1, 0x86, 0x10, 0x32, 0x68, 0xe6, 0x82, 0x38, 0x21, 0x1f, 0x10,
	0x37, 0x50, 0xfd, 0xf4, 0x4f, 0xda, 0xf1, 0xcc, 0x78, 0xb4, 0x87, 0x91, 0xd8, 0x4b, 0xe2, 0x7a,
	0xf5, 0xde, 0xf7, 0xea, 0xfd, 0xd6, 0xab, 0x86, 0x57, 0x2d, 0x9f, 0xba, 0x3e, 0xdd, 0xa2, 0x0c,
	0x9f, 0x39, 0x5e, 0x6f, 0xeb, 0xee, 0x8d, 0x2e, 0x61, 0xf8, 0x46, 0xb8, 0x6e, 0x0c, 0x02, 0x9f,
	0xf9, 0xe8, 0x9a, 0xe4, 0x6a, 0x84, 0x54, 0xc5, 0x55, 0x5d, 0xef, 0xf9, 0x3d, 0x5f, 0xb0, 0x6c,
	0xf1, 0x5f, 0x92, 0xbb, 0xba, 0xd1, 0xf3, 0xfd, 0x5e, 0x9f, 0x6c, 0x89, 0x55, 0x77, 0x78, 0xb2,
	0x85, 0xbd, 0x91, 0xda, 0xaa, 0xa5, 0xb7, 0xec, 0x61, 0x80, 0x99, 0xe3, 0x7b, 0x6a, 0x5f, 0x4f,
	0xef, 0x33, 0xc7, 0x25, 0x94, 0x61, 0x77, 0x10, 0x62, 0xcb, 0x93, 0x74, 0xa4, 0x52, 0x75, 0x2c,
	0x85, 0xad, 0x4c, 0xe9, 0x62, 0x4a, 0x22, 0x3b, 0x2c, 0xdf, 0x09, 0xb1, 0xaf, 0x33, 0xe2, 0xd9,
	0x24, 0x70, 0x1d, 0x8f, 0x6d, 0xb1, 0xd1, 0x80, 0x50, 0xf9, 0x57, 0xee, 0x1a, 0x3f, 0xd3, 0x60,
	0x65, 0xdf, 0xa1, 0xcc, 0x0f, 0x1c, 0x0b, 0xf7, 0xdb, 0xde, 0x89, 0x8f, 0xde, 0x82, 0xfc, 0x29,
	0xc1, 0x36, 0x09, 0x2a, 0x5a, 0x5d, 0xdb, 0x2c, 0x6d, 0x57, 0x1a, 0x31, 0x42, 0x43, 0xca, 0xee,
	0x8b, 0xfd, 0x66, 0xee, 0x93, 0xb1, 0x9e, 0x31, 0x15, 0x37, 0xfa, 0x06, 0xe4, 0xef, 0xe2, 0x3e,
	0x25, 0xac, 0x92, 0xad, 0x2f, 0x6c, 0x96, 0xb6, 0x5f, 0x69, 0x5c, 0xee, 0xbe, 0xc6, 0x31, 0xee,
	0x3b, 0x36, 0x66, 0x7e, 0x04, 0x20, 0xc5, 0x8c, 0x5f, 0x67, 0xa1, 0xbc, 0xeb, 0xbb, 0xae, 0x43,
	0xa9, 0xe3, 0x7b, 0x26, 0x66, 0x84, 0xa2, 0x26, 0xe4, 0x02, 0xcc, 0x88, 0x38, 0x4a, 0xb1, 0xd9,
	0xe0, 0xfc, 0x7f, 0x19, 0xeb, 0xaf, 0xf5, 0x1c, 0x76, 0x3a, 0xec, 0x36, 0x2c, 0xdf, 0x55, 0xce,
	0x50, 0xff, 0xde, 0xa0, 0xf6, 0x99, 0xb2, 0xaf, 0x45, 0x2c, 0x53, 0xc8, 0xa2, 0x77, 0xa1, 0xe0,
	0xe2, 0xf3, 0x8e, 0xc0, 0xc9, 0x0a, 0x9c, 0x9b, 0xf3, 0xe1, 0x4c, 0xc6, 0x7a, 0x79, 0x84, 0xdd,
	0xfe, 0x8e, 0x11, 0xe2, 0x18, 0xe6, 0xa2, 0x8b, 0xcf, 0xf9, 0x11, 0xd1, 0x00, 0xca, 0x9c, 0x6a,
	0x9d, 0x62, 0xaf, 0x47, 0xa4, 0x92, 0x05, 0xa1, 0x64, 0x7f, 0x6e, 0x25, 0xd7, 0x62, 0x25, 0x09,
	0x38, 0xc3, 0x5c, 0x76, 0xf1, 0xf9, 0xae, 0x20, 0x70, 0x8d, 0x3b, 0x85, 0x0f, 0x1f, 0xe8, 0x99,
	0x7f, 0x3c, 0xd0, 0x35, 0xe3, 0x4f, 0x1a, 0x40, 0xec, 0x31, 0xf4, 0x2e, 0xac, 0x5a, 0xd1, 0x4a,
	0xc8, 0x52, 0x15, 0xc3, 0x2f, 0xce, 0x8a, 0x45, 0xca, 0xdf, 0xcd, 0x02, 0x3f, 0xf4, 0xc3, 0xb1,
	0xae, 0x99, 0x65, 0x2b, 0x15, 0x8a, 0x1f, 0x40, 0x69, 0x38, 0xb0, 0x31, 0x23, 0x1d, 0x9e, 0x9d,
	0xc2, 0x93, 0xa5, 0xed, 0x6a, 0x43, 0xa6, 0x6e, 0x23, 0x4c, 0xdd, 0xc6, 0x51, 0x98, 0xba, 0xcd,
	0x1a, 0xc7, 0x9a, 0x8c, 0x75, 0x24, 0xcd, 0x4a, 0x08, 0x1b, 0x1f, 0xfc, 0x4d, 0xd7, 0x4c, 0x90,
	0x14, 0x2e, 0x90, 0xb0, 0xe9, 0xf7, 0x1a, 0x94, 0x5a, 0x84, 0x5a, 0x81, 0x33, 0xe0, 0x15, 0x82,
	0x2a, 0xb0, 0xe8, 0xfa, 0x9e, 0x73, 0xa6, 0xf2, 0xb1, 0x68, 0x86, 0x4b, 0x54, 0x85, 0x82, 0x63,
	0x13, 0x8f, 0x39, 0x6c, 0x24, 0xe3, 0x6a, 0x46, 0x6b, 0x2e, 0xf5, 0x13, 0xd2, 0xa5, 0x4e, 0x18,
	0x0d, 0x33, 0x5c, 0xa2, 0x5b, 0xb0, 0x4a, 0x89, 0x35, 0x0c, 0x1c, 0x36, 0xea, 0x58, 0xbe, 0xc7,
	0xb0, 0xc5, 0x2a, 0x39, 0x11, 0xb0, 0xcf, 0x4d, 0xc6, 0xfa, 0xcb, 0xf2, 0xac, 0x69, 0x0e, 0xc3,
	0x2c, 0x87, 0xa4, 0x5d, 0x49, 0xe1, 0x1a, 0x6c, 0xc2, 0xb0, 0xd3, 0xa7, 0x95, 0x97, 0xa4, 0x06,
	0xb5, 0x4c, 0xd8, 0xf2, 0xf1, 0x22, 0x14, 0xa3, 0x6c, 0xe7, 0x9a, 0xfd, 0x01, 0x09, 0xf8, 0xef,
	0x0e, 0xb6, 0xed, 0x80, 0x50, 0xaa, 0xf2, 0x3a, 0xa1, 0x39, 0xcd, 0x61, 0x98, 0xe5, 0x90, 0x74,
	0x53, 0x52, 0x10, 0xe3, 0x61, 0xf6, 0x28, 0xf1, 0xe8, 0x90, 0x76, 0x06, 0xc3, 0xee, 0x19, 0x19,
	0xa9, 0x68, 0xac, 0x4f, 0x45, 0xe3, 0xa6, 0x37, 0x6a, 0xbe, 0x19, 0xa3, 0xa7, 0xe5, 0x8c, 0x3f,
	0xfc, 0xe6, 0x8d, 0x75, 0x95, 0x1a, 0x56, 0x30, 0x1a, 0x30, 0xbf, 0x71, 0x30, 0xec, 0xbe, 0x4d,
	0x46, 0x3c, 0xfc, 0x8a, 0xf5, 0x40, 0x70, 0xa2, 0x6b, 0x90, 0xff, 0x11, 0x76, 0xfa, 0xc4, 0x16,
	0x0e, 0x2d, 0x98, 0x6a, 0x85, 0x76, 0x20, 0x4f, 0x19, 0x66, 0x43, 0x2a, 0xbc, 0xb8, 0xb2, 0x6d,
	0xcc, 0x4a, 0xb5, 0xa6, 0xef, 0xd9, 0x87, 0x82, 0xd3, 0x54, 0x12, 0xe8, 0x16, 0xe4, 0x99, 0x7f,
	0x46, 0x3c, 0xe5, 0xc2, 0xb9, 0xea, 0xbb, 0xed, 0x31, 0x53, 0x49, 0x73, 0x8f, 0xd8, 0xa4, 0x4f,
	0x7a, 0xc2, 0x71, 0xf4, 0x14, 0x07, 0x84, 0x56, 0xf2, 0x02, 0xb1, 0x3d, 0x77, 0x11, 0x2a, 0x4f,
	0xa5, 0xf1, 0x0c, 0xb3, 0x1c, 0x91, 0x0e, 0x05, 0x05, 0xbd, 0x0d, 0x25, 0x3b, 0x4e, 0xd4, 0xca,
	0xa2, 0x08, 0xc1, 0x17, 0x66, 0x99, 0x9f, 0xc8, 0x69, 0xd5, 0xf7, 0x92, 0xd2, 0x3c, 0x39, 0x86,
	0x5e, 0xd7, 0xf7, 0x6c, 0xc7, 0xeb, 0x75, 0x4e, 0x89, 0xd3, 0x3b, 0x65, 0x95, 0x42, 0x5d, 0xdb,
	0x5c, 0x48, 0x26, 0x47, 0x9a, 0xc3, 0x30, 0xcb, 0x11, 0x69, 0x5f, 0x50, 0x90, 0x0d, 0x2b, 0x31,
	0x97, 0x28, 0xd4, 0xe2, 0x53, 0x0b, 0xf5, 0x15, 0x55, 0xa8, 0x57, 0xd3, 0x5a, 0xe2, 0x5a, 0x5d,
	0x8e, 0x88, 0x5c, 0x0c, 0xed, 0x03, 0xc4, 0xed, 0xa1, 0x02, 0x42, 0x83, 0xf1, 0xf4, 0x1e, 0xa3,
	0x0c, 0x4f, 0xc8, 0xa2, 0xf7, 0xe0, 0x8a, 0xeb, 0x78, 0x1d, 0x4a, 0xfa, 0x27, 0x1d, 0xe5, 0x60,
	0x0e, 0x59, 0x12, 0xd1, 0x7b, 0x67, 0xbe, 0x7c, 0x98, 0x8c, 0xf5, 0xaa, 0x6a, 0xa1, 0xd3, 0x90,
	0x86, 0xb9, 0xe6, 0x3a, 0xde, 0x21, 0xe9, 0x9f, 0xb4, 0x22, 0xda, 0xce, 0xd2, 0xfb, 0x0f, 0xf4,
	0x8c, 0x2a, 0xd7, 0x8c, 0xf1, 0x16, 0x2c, 0x1d, 0xe3, 0xbe, 0x2a, 0x33, 0x42, 0xd1, 0x75, 0x28,
	0xe2, 0x70, 0x51, 0xd1, 0xea, 0x0b, 0x9b, 0x45, 0x33, 0x26, 0xc8, 0x32, 0xff, 0xe9, 0x5f, 0xeb,
	0x9a, 0xf1, 0xb1, 0x06, 0xf9, 0xd6, 0xf1, 0x01, 0x76, 0x02, 0xd4, 0x86, 0xb5, 0x38, 0x73, 0x2e,
	0x16, 0xf9, 0xf5, 0xc9, 0x58, 0xaf, 0xa4, 0x93, 0x2b, 0xaa, 0xf2, 0x38, 0x81, 0xc3, 0x32, 0x6f,
	0xc3, 0xda, 0xdd, 0xb0, 0x77, 0x44, 0x50, 0xd9, 0x34, 0xd4, 0x14, 0x8b, 0x61, 0xae, 0x46, 0x34,
	0x05, 0x95, 0x32, 0x73, 0x0f, 0x16, 0xe5, 0x69, 0x29, 0xda, 0x81, 0x97, 0x06, 0xfc, 0x87, 0xb0,
	0xae, 0xb4, 0x5d, 0x9b, 0x99, 0xbc, 0x82, 0x5f, 0x85, 0x4f, 0x8a, 0x18, 0xbf, 0xca, 0x02, 0xb4,
	0x8e, 0x8f, 0x8f, 0x02, 0x67, 0xd0, 0x27, 0xec, 0xd3, 0xb4, 0xfc, 0x08, 0xae, 0xc6, 0x66, 0xd1,
	0xc0, 0x4a, 0x59, 0x5f, 0x9f, 0x8c, 0xf5, 0xeb, 0x69, 0xeb, 0x13, 0x6c, 0x86, 0x79, 0x25, 0xa2,
	0x1f, 0x06, 0xd6, 0xa5, 0xa8, 0x36, 0x65, 0x11, 0xea, 0xc2, 0x6c, 0xd4, 0x04, 0x5b, 0x12, 0xb5,
	0x45, 0xd9, 0xe5, 0xae, 0x3d, 0x84, 0x52, 0xec, 0x12, 0x8a, 0x5a, 0x50, 0x60, 0xea, 0xb7, 0xf2,
	0xb0, 0x31, 0xdb, 0xc3, 0xa1, 0x98, 0xf2, 0x72, 0x24, 0x69, 0xfc, 0x47, 0x03, 0x88, 0x73, 0xf6,
	0xc5, 0x4c, 0x31, 0xde, 0xca, 0x55, 0xe3, 0x5d, 0x78, 0xae, 0x51, 0x4d, 0x49, 0xa7, 0xfc, 0xf9,
	0xf3, 0x2c, 0x5c, 0xb9, 0x13, 0x76, 0x9e, 0x17, 0xde, 0x07, 0x07, 0xb0, 0x48, 0x3c, 0x16, 0x38,
	0xc2, 0x09, 0x3c, 0xda, 0x5f, 0x99, 0x15, 0xed, 0x4b, 0x6c, 0xda, 0xf3, 0x58, 0x30, 0x52, 0xb1,
	0x0f, 0x61, 0x52, 0xde, 0xf8, 0xe5, 0x02, 0x54, 0x66, 0x49, 0xa2, 0x5d, 0x28, 0x5b, 0x01, 0x11,
	0x84, 0xf0, 0xfe, 0xd0, 0xc4, 0xfd, 0x51, 0x8d, 0x27, 0xcb, 0x14, 0x83, 0x61, 0xae, 0x84, 0x14,
	0x75, 0x7b, 0xf4, 0x80, 0x8f, 0x7d, 0x3c, 0xed, 0x38, 0xd7, 0x33, 0xce, 0x79, 0x86, 0xba, 0x3e,
	0x42, 0x25, 0x17, 0x01, 0xe4, 0xfd, 0xb1, 0x12, 0x53, 0xc5, 0x05, 0xf2, 0x63, 0x28, 0x3b, 0x9e,
	0xc3, 0x1c, 0xdc, 0xef, 0x74, 0x71, 0x1f, 0x7b, 0xd6, 0xf3, 0x4c, 0xcd, 0xb2, 0xe5, 0x2b, 0xb5,
	0x29, 0x38, 0xc3, 0x5c, 0x51, 0x94, 0xa6, 0x24, 0xa0, 0x7d, 0x58, 0x0c, 0x55, 0xe5, 0x9e, 0x6b,
	0xda, 0x08, 0xc5, 0x13, 0x03, 0xde, 0x2f, 0x16, 0x60, 0xcd, 0x24, 0xf6, 0x67, 0xa1, 0x98, 0x2f,
	0x14, 0xdf, 0x06, 0x90, 0xe5, 0xce, 0x1b, 0xec, 0x73, 0x44, 0x83, 0x37, 0x8c, 0xa2, 0x44, 0x68,
	0x51, 0x96, 0x88, 0xc7, 0x38, 0x0b, 0x4b, 0xc9, 0x78, 0xfc, 0x9f, 0xde, 0x4a, 0xa8, 0x1d, 0x77,
	0xa2, 0x9c, 0xe8, 0x44, 0x5f, 0x9a, 0xd5, 0x89, 0xa6, 0xb2, 0xf7, 0xc9, 0x2d, 0xe8, 0xdf, 0x59,
	0xc8, 0x1f, 0xe0, 0x00, 0xbb, 0x14, 0x59, 0x53, 0x93, 0xa6, 0x7c, 0x6b, 0x6e, 0x4c, 0xe5, 0x67,
	0x4b, 0x7d, 0xed, 0x78, 0xca, 0xa0, 0xf9, 0xe1, 0x25, 0x83, 0xe6, 0x37, 0x61, 0x85, 0x3f, 0x87,
	0x23, 0x1b, 0xa5, 0xb7, 0x97, 0x9b, 0x1b, 0x31, 0xca, 0xc5, 0x7d, 0xf9, 0x5a, 0x8e, 0x1e, 0x5d,
	0x14, 0x7d, 0x0d, 0x4a, 0x9c, 0x23, 0x6e, 0xcc, 0x5c, 0xfc, 0x5a, 0xfc, 0x2c, 0x4d, 0x6c, 0x1a,
	0x26, 0xb8, 0xf8, 0x7c, 0x4f, 0x2e, 0xd0, 0x3b, 0x80, 0x4e, 0xa3, 0x2f, 0x23, 0x9d, 0xd8, 0x9d,
	0x5c, 0xfe, 0xf3, 0x93, 0xb1, 0xbe, 0x21, 0xe5, 0xa7, 0x79, 0x0c, 0x73, 0x2d, 0x26, 0x86, 0x68,
	0x5f, 0x05, 0xe0, 0x76, 0x75, 0x6c, 0xe2, 0xf9, 0xae, 0x7a, 0xee, 0x5c, 0x9d, 0x8c, 0xf5, 0x35,
	0x89, 0x12, 0xef, 0x19, 0x66, 0x91, 0x2f, 0x5a, 0xfc, 0x77, 0x22, 0xb3, 0x3f, 0xd2, 0x00, 0xc5,
	0x2d, 0xdf, 0x24, 0x74, 0xc0, 0xdf, 0x67, 0x7c, 0x10, 0x4f, 0x4c, 0xcd, 0xda, 0x93, 0x07, 0xf1,
	0x58, 0x3e, 0x1c, 0xc4, 0x13, 0x95, 0xf2, 0xf5, 0xb8, 0x3d, 0x66, 0x55, 0x1c, 0x15, 0x4c, 0x17,
	0x53, 0x92, 0x18, 0xe6, 0x9d, 0x50, 0x7a, 0xaa, 0x1f, 0x66, 0x8c, 0x3f, 0x6a, 0xb0, 0x31, 0x95,
	0x51, 0xd1, 0x61, 0x7f, 0x08, 0x28, 0x48, 0x6c, 0x0a, 0x7f, 0x8d, 0xd4, 0xa1, 0xe7, 0x4e, 0xd0,
	0xb5, 0x60, 0xaa, 0xef, 0x7e, 0x7a, 0x1d, 0x3e, 0x27, 0x7c, 0xfe, 0x3b, 0x0d, 0xd6, 0x93, 0xea,
	0x23, 0x43, 0x6e, 0xc3, 0x52, 0x52, 0xbb, 0x32, 0xe1, 0xd5, 0x67, 0x31, 0x41, 0x9d, 0xfe, 0x82,
	0x3c, 0xfa, 0x6e, 0x5c, 0xae, 0xf2, 0xdb, 0xd9, 0x8d, 0x67, 0xf6, 0x46, 0x78, 0xa6, 0x74, 0xd9,
	0xe6, 0x44, 0x3c, 0xfe, 0xab, 0x41, 0xee, 0xc0, 0xf7, 0xfb, 0xc8, 0x87, 0x35, 0xcf, 0x67, 0x1d,
	0x9e, 0x59, 0xc4, 0xee, 0xa8, 0x47, 0xb7, 0xec, 0x83, 0xbb, 0xf3, 0x39, 0xe9, 0x9f, 0x63, 0x7d,
	0x1a, 0xca, 0x2c, 0x7b, 0x3e, 0x6b, 0x0a, 0xca, 0x91, 0x7c, 0x92, 0xbf, 0x07, 0xcb, 0x17, 0x95,
	0xc9, 0x2e, 0xf9, 0xbd, 0xb9, 0x95, 0x5d, 0x84, 0x99, 0x8c, 0xf5, 0xf5, 0xb8, 0x62, 0x22, 0xb2,
	0x61, 0x2e, 0x75, 0x13, 0xda, 0x77, 0x0a, 0x3c, 0x7e, 0xff, 0x7a, 0xa0, 0x6b, 0x5f, 0xfe, 0xad,
	0x06, 0x10, 0x7f, 0x79, 0x40, 0xaf, 0xc3, 0xcb, 0xcd, 0xef, 0xdc, 0x6e, 0x75, 0x0e, 0x8f, 0x6e,
	0x1e, 0xdd, 0x39, 0xec, 0xdc, 0xb9, 0x7d, 0x78, 0xb0, 0xb7, 0xdb, 0xbe, 0xd5, 0xde, 0x6b, 0xad,
	0x66, 0xaa, 0xe5, 0x7b, 0xf7, 0xeb, 0xa5, 0x3b, 0x1e, 0x1d, 0x10, 0xcb, 0x39, 0x71, 0x88, 0x8d,
	0x5e, 0x83, 0xf5, 0x8b, 0xdc, 0x7c, 0xb5, 0xd7, 0x5a, 0xd5, 0xaa, 0x4b, 0xf7, 0xee, 0xd7, 0x0b,
	0x72, 0x16, 0x23, 0x36, 0xda, 0x84, 0xab, 0xd3, 0x7c, 0xed, 0xdb, 0xdf, 0x5a, 0xcd, 0x56, 0x97,
	0xef, 0xdd, 0xaf, 0x17, 0xa3, 0xa1, 0x0d, 0x19, 0x80, 0x92, 0x9c, 0x0a, 0x6f, 0xa1, 0x0a, 0xf7,
	0xee, 0xd7, 0xf3, 0xd2, 0x81, 0xd5, 0xdc, 0xfb, 0x1f, 0xd5, 0x32, 0xcd, 0x5b, 0x9f, 0x3c, 0xaa,
	0x69, 0x0f, 0x1f, 0xd5, 0xb4, 0xbf, 0x3f, 0xaa, 0x69, 0x1f, 0x3c, 0xae, 0x65, 0x1e, 0x3e, 0xae,
	0x65, 0xfe, 0xfc, 0xb8, 0x96, 0xf9, 0xfe, 0xeb, 0x4f, 0xf4, 0xdd, 0x79, 0xf4, 0x51, 0x5b, 0x78,
	0xb1, 0x9b, 0x17, 0x6d, 0xf8, 0xcd, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0xc2, 0x48, 0x4c, 0x86,
	0xf3, 0x16, 0x00, 0x00,
}

func (this *Pool) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return StakingDescription()
}
func StakingDescription() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	d := &github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet{}
	var gzipped = []byte{
		// 9556 bytes of a gzipped FileDescriptorSet
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x7d, 0x6b, 0x70, 0x1c, 0xc9,
		0x79, 0x18, 0x67, 0x77, 0x01, 0xec, 0x7e, 0x58, 0x00, 0x8b, 0x06, 0x48, 0x2e, 0xf7, 0x78, 0x00,
		0x6e, 0xee, 0xc5, 0xe3, 0xdd, 0x01, 0x77, 0xbc, 0x23, 0x8f, 0x5c, 0x4a, 0x77, 0xc6, 0x02, 0x4b,
		0x10, 0x24, 0x5e, 0x37, 0x00, 0x78, 0x7a, 0x39, 0x5b, 0x83, 0xd9, 0xc6, 0x62, 0x0e, 0xbb, 0x33,
		0x73, 0x33, 0xb3, 0x24, 0x71, 0x92, 0xaa, 0xce, 0x92, 0xa2, 0x48, 0x74, 0x1c, 0x49, 0x96, 0xcb,
		0x91, 0x4e, 0xa2, 0x22, 0x59, 0x4e, 0xe4, 0xc8, 0x4a, 0xfc, 0x90, 0xa2, 0xc4, 0x49, 0xaa, 0x22,
		0xa7, 0xe2, 0x58, 0x52, 0x2a, 0x2e, 0xa9, 0xe2, 0x4a, 0x1c, 0x57, 0x4c, 0x3b, 0x27, 0x95, 0x73,
		0x51, 0x94, 0x58, 0xa6, 0xe5, 0xc4, 0x29, 0xfd, 0x48, 0xaa, 0x5f, 0xf3, 0xda, 0xc7, 0x2c, 0x20,
		0x52, 0x27, 0xc7, 0xf9, 0x85, 0x9d, 0xee, 0xef, 0xfb, 0xfa, 0x7b, 0xf5, 0xf7, 0x7d, 0xdd, 0xd3,
		0x3d, 0x80, 0x4f, 0x9c, 0x87, 0xa9, 0x9a, 0x69, 0xd6, 0xea, 0x78, 0xc6, 0xb2, 0x4d, 0xd7, 0xdc,
		0x6a, 0x6e, 0xcf, 0x54, 0xb1, 0xa3, 0xd9, 0xba, 0xe5, 0x9a, 0xf6, 0x34, 0x6d, 0x43, 0x23, 0x0c,
		0x62, 0x5a, 0x40, 0xc8, 0xcb, 0x30, 0x7a, 0x41, 0xaf, 0xe3, 0x79, 0x0f, 0x70, 0x1d, 0xbb, 0xe8,
		0x2c, 0xa4, 0xb6, 0xf5, 0x3a, 0xce, 0x4b, 0x53, 0xc9, 0x13, 0x83, 0xa7, 0x1e, 0x98, 0x8e, 0x20,
		0x4d, 0x87, 0x31, 0xd6, 0x48, 0xb3, 0x42, 0x31, 0xe4, 0x6f, 0xa7, 0x60, 0xac, 0x4d, 0x2f, 0x42,
		0x90, 0x32, 0xd4, 0x06, 0xa1, 0x28, 0x9d, 0xc8, 0x28, 0xf4, 0x37, 0xca, 0xc3, 0x80, 0xa5, 0x6a,
		0xbb, 0x6a, 0x0d, 0xe7, 0x13, 0xb4, 0x59, 0x3c, 0xa2, 0x09, 0x80, 0x2a, 0xb6, 0xb0, 0x51, 0xc5,
		0x86, 0xb6, 0x97, 0x4f, 0x4e, 0x25, 0x4f, 0x64, 0x94, 0x40, 0x0b, 0x7a, 0x14, 0x46, 0xad, 0xe6,
		0x56, 0x5d, 0xd7, 0x2a, 0x01, 0x30, 0x98, 0x4a, 0x9e, 0xe8, 0x53, 0x72, 0xac, 0x63, 0xde, 0x07,
		0x7e, 0x18, 0x46, 0xae, 0x61, 0x75, 0x37, 0x08, 0x3a, 0x48, 0x41, 0x87, 0x49, 0x73, 0x00, 0x70,
		0x0e, 0xb2, 0x0d, 0xec, 0x38, 0x6a, 0x0d, 0x57, 0xdc, 0x3d, 0x0b, 0xe7, 0x53, 0x54, 0xfa, 0xa9,
		0x16, 0xe9, 0xa3, 0x92, 0x0f, 0x72, 0xac, 0x8d, 0x3d, 0x0b, 0xa3, 0x59, 0xc8, 0x60, 0xa3, 0xd9,
		0x60, 0x14, 0xfa, 0x3a, 0xe8, 0xaf, 0x6c, 0x34, 0x1b, 0x51, 0x2a, 0x69, 0x82, 0xc6, 0x49, 0x0c,
		0x38, 0xd8, 0xbe, 0xaa, 0x6b, 0x38, 0xdf, 0x4f, 0x09, 0x3c, 0xdc, 0x42, 0x60, 0x9d, 0xf5, 0x47,
		0x69, 0x08, 0x3c, 0x34, 0x07, 0x19, 0x7c, 0xdd, 0xc5, 0x86, 0xa3, 0x9b, 0x46, 0x7e, 0x80, 0x12,
		0x79, 0xb0, 0x8d, 0x15, 0x71, 0xbd, 0x1a, 0x25, 0xe1, 0xe3, 0xa1, 0x33, 0x30, 0x60, 0x5a, 0xae,
		0x6e, 0x1a, 0x4e, 0x3e, 0x3d, 0x25, 0x9d, 0x18, 0x3c, 0x75, 0xbc, 0xad, 0x23, 0xac, 0x32, 0x18,
		0x45, 0x00, 0xa3, 0x45, 0xc8, 0x39, 0x66, 0xd3, 0xd6, 0x70, 0x45, 0x33, 0xab, 0xb8, 0xa2, 0x1b,
		0xdb, 0x66, 0x3e, 0x43, 0x09, 0x4c, 0xb6, 0x0a, 0x42, 0x01, 0xe7, 0xcc, 0x2a, 0x5e, 0x34, 0xb6,
		0x4d, 0x65, 0xd8, 0x09, 0x3d, 0xa3, 0x23, 0xd0, 0xef, 0xec, 0x19, 0xae, 0x7a, 0x3d, 0x9f, 0xa5,
		0x1e, 0xc2, 0x9f, 0xe4, 0xdf, 0xe8, 0x87, 0x91, 0x5e, 0x5c, 0xec, 0x3c, 0xf4, 0x6d, 0x13, 0x29,
		0xf3, 0x89, 0xfd, 0xe8, 0x80, 0xe1, 0x84, 0x95, 0xd8, 0x7f, 0x40, 0x25, 0xce, 0xc2, 0xa0, 0x81,
		0x1d, 0x17, 0x57, 0x99, 0x47, 0x24, 0x7b, 0xf4, 0x29, 0x60, 0x48, 0xad, 0x2e, 0x95, 0x3a, 0x90,
		0x4b, 0xbd, 0x05, 0x46, 0x3c, 0x96, 0x2a, 0xb6, 0x6a, 0xd4, 0x84, 0x6f, 0xce, 0xc4, 0x71, 0x32,
		0x5d, 0x16, 0x78, 0x0a, 0x41, 0x53, 0x86, 0x71, 0xe8, 0x19, 0xcd, 0x03, 0x98, 0x06, 0x36, 0xb7,
		0x2b, 0x55, 0xac, 0xd5, 0xf3, 0xe9, 0x0e, 0x5a, 0x5a, 0x25, 0x20, 0x2d, 0x5a, 0x32, 0x59, 0xab,
		0x56, 0x47, 0xe7, 0x7c, 0x57, 0x1b, 0xe8, 0xe0, 0x29, 0xcb, 0x6c, 0x92, 0xb5, 0x78, 0xdb, 0x26,
		0x0c, 0xdb, 0x98, 0xf8, 0x3d, 0xae, 0x72, 0xc9, 0x32, 0x94, 0x89, 0xe9, 0x58, 0xc9, 0x14, 0x8e,
		0xc6, 0x04, 0x1b, 0xb2, 0x83, 0x8f, 0xe8, 0x7e, 0xf0, 0x1a, 0x2a, 0xd4, 0xad, 0x80, 0x46, 0xa1,
		0xac, 0x68, 0x5c, 0x51, 0x1b, 0xb8, 0xf0, 0x32, 0x0c, 0x87, 0xd5, 0x83, 0xc6, 0xa1, 0xcf, 0x71,
		0x55, 0xdb, 0xa5, 0x5e, 0xd8, 0xa7, 0xb0, 0x07, 0x94, 0x83, 0x24, 0x36, 0xaa, 0x34, 0xca, 0xf5,
		0x29, 0xe4, 0x27, 0xfa, 0x09, 0x5f, 0xe0, 0x24, 0x15, 0xf8, 0xa1, 0x56, 0x8b, 0x86, 0x28, 0x47,
		0xe5, 0x2e, 0x3c, 0x03, 0x43, 0x21, 0x01, 0x7a, 0x1d, 0x5a, 0x7e, 0x17, 0x1c, 0x6e, 0x4b, 0x1a,
		0xbd, 0x05, 0xc6, 0x9b, 0x86, 0x6e, 0xb8, 0xd8, 0xb6, 0x6c, 0x4c, 0x3c, 0x96, 0x0d, 0x95, 0xff,
		0x2f, 0x03, 0x1d, 0x7c, 0x6e, 0x33, 0x08, 0xcd, 0xa8, 0x28, 0x63, 0xcd, 0xd6, 0xc6, 0x93, 0x99,
		0xf4, 0xeb, 0x03, 0xb9, 0x57, 0x5e, 0x79, 0xe5, 0x95, 0x84, 0xfc, 0xb1, 0x7e, 0x18, 0x6f, 0x37,
		0x67, 0xda, 0x4e, 0xdf, 0x23, 0xd0, 0x6f, 0x34, 0x1b, 0x5b, 0xd8, 0xa6, 0x4a, 0xea, 0x53, 0xf8,
		0x13, 0x9a, 0x85, 0xbe, 0xba, 0xba, 0x85, 0xeb, 0xf9, 0xd4, 0x94, 0x74, 0x62, 0xf8, 0xd4, 0xa3,
		0x3d, 0xcd, 0xca, 0xe9, 0x25, 0x82, 0xa2, 0x30, 0x4c, 0xf4, 0x2c, 0xa4, 0x78, 0x88, 0x26, 0x14,
		0x4e, 0xf6, 0x46, 0x81, 0xcc, 0x25, 0x85, 0xe2, 0xa1, 0x7b, 0x20, 0x43, 0xfe, 0x32, 0xdf, 0xe8,
		0xa7, 0x3c, 0xa7, 0x49, 0x03, 0xf1, 0x0b, 0x54, 0x80, 0x34, 0x9d, 0x26, 0x55, 0x2c, 0x52, 0x9b,
		0xf7, 0x4c, 0x1c, 0xab, 0x8a, 0xb7, 0xd5, 0x66, 0xdd, 0xad, 0x5c, 0x55, 0xeb, 0x4d, 0x4c, 0x1d,
		0x3e, 0xa3, 0x64, 0x79, 0xe3, 0x15, 0xd2, 0x86, 0x26, 0x61, 0x90, 0xcd, 0x2a, 0xdd, 0xa8, 0xe2,
		0xeb, 0x34, 0x7a, 0xf6, 0x29, 0x6c, 0xa2, 0x2d, 0x92, 0x16, 0x32, 0xfc, 0x8b, 0x8e, 0x69, 0x08,
		0xd7, 0xa4, 0x43, 0x90, 0x06, 0x3a, 0xfc, 0x33, 0xd1, 0xc0, 0x7d, 0x6f, 0x7b, 0xf1, 0xa2, 0x3e,
		0x25, 0x7f, 0x39, 0x01, 0x29, 0x1a, 0x2f, 0x46, 0x60, 0x70, 0xe3, 0xad, 0x6b, 0xe5, 0xca, 0xfc,
		0xea, 0x66, 0x69, 0xa9, 0x9c, 0x93, 0xd0, 0x30, 0x00, 0x6d, 0xb8, 0xb0, 0xb4, 0x3a, 0xbb, 0x91,
		0x4b, 0x78, 0xcf, 0x8b, 0x2b, 0x1b, 0x67, 0x9e, 0xce, 0x25, 0x3d, 0x84, 0x4d, 0xd6, 0x90, 0x0a,
		0x02, 0x3c, 0x75, 0x2a, 0xd7, 0x87, 0x72, 0x90, 0x65, 0x04, 0x16, 0xdf, 0x52, 0x9e, 0x3f, 0xf3,
		0x74, 0xae, 0x3f, 0xdc, 0xf2, 0xd4, 0xa9, 0xdc, 0x00, 0x1a, 0x82, 0x0c, 0x6d, 0x29, 0xad, 0xae,
		0x2e, 0xe5, 0xd2, 0x1e, 0xcd, 0xf5, 0x0d, 0x65, 0x71, 0x65, 0x21, 0x97, 0xf1, 0x68, 0x2e, 0x28,
		0xab, 0x9b, 0x6b, 0x39, 0xf0, 0x28, 0x2c, 0x97, 0xd7, 0xd7, 0x67, 0x17, 0xca, 0xb9, 0x41, 0x0f,
		0xa2, 0xf4, 0xd6, 0x8d, 0xf2, 0x7a, 0x2e, 0x1b, 0x62, 0xeb, 0xa9, 0x53, 0xb9, 0x21, 0x6f, 0x88,
		0xf2, 0xca, 0xe6, 0x72, 0x6e, 0x18, 0x8d, 0xc2, 0x10, 0x1b, 0x42, 0x30, 0x31, 0x12, 0x69, 0x3a,
		0xf3, 0x74, 0x2e, 0xe7, 0x33, 0xc2, 0xa8, 0x8c, 0x86, 0x1a, 0xce, 0x3c, 0x9d, 0x43, 0xf2, 0x1c,
		0xf4, 0x51, 0xef, 0x42, 0x08, 0x86, 0x97, 0x66, 0x4b, 0xe5, 0xa5, 0xca, 0xea, 0xda, 0xc6, 0xe2,
		0xea, 0xca, 0xec, 0x52, 0x4e, 0xf2, 0xdb, 0x94, 0xf2, 0xf3, 0x9b, 0x8b, 0x4a, 0x79, 0x3e, 0x97,
		0x08, 0xb6, 0xad, 0x95, 0x67, 0x37, 0xca, 0xf3, 0xb9, 0xa4, 0xac, 0xc1, 0x78, 0xbb, 0x38, 0xd9,
		0x76, 0x66, 0x04, 0x4c, 0x9c, 0xe8, 0x60, 0x62, 0x4a, 0xab, 0xc5, 0xc4, 0xdf, 0x4a, 0xc0, 0x58,
		0x9b, 0x5c, 0xd1, 0x76, 0x90, 0xe7, 0xa0, 0x8f, 0xb9, 0x28, 0xcb, 0x9e, 0x8f, 0xb4, 0x4d, 0x3a,
		0xd4, 0x61, 0x5b, 0x32, 0x28, 0xc5, 0x0b, 0x56, 0x10, 0xc9, 0x0e, 0x15, 0x04, 0x21, 0xd1, 0x12,
		0xd3, 0x7f, 0xb2, 0x25, 0xa6, 0xb3, 0xb4, 0x77, 0xa6, 0x97, 0xb4, 0x47, 0xdb, 0xf6, 0x17, 0xdb,
		0xfb, 0xda, 0xc4, 0xf6, 0xf3, 0x30, 0xda, 0x42, 0xa8, 0xe7, 0x18, 0xfb, 0x5e, 0x09, 0xf2, 0x9d,
		0x94, 0x13, 0x13, 0xe9, 0x12, 0xa1, 0x48, 0x77, 0x3e, 0xaa, 0xc1, 0xfb, 0x3a, 0x1b, 0xa1, 0xc5,
		0xd6, 0x9f, 0x93, 0xe0, 0x48, 0xfb, 0x4a, 0xb1, 0x2d, 0x0f, 0xcf, 0x42, 0x7f, 0x03, 0xbb, 0x3b,
		0xa6, 0xa8, 0x96, 0x1e, 0x6a, 0x93, 0x83, 0x49, 0x77, 0xd4, 0xd8, 0x1c, 0x2b, 0x98, 0xc4, 0x93,
		0x9d, 0xca, 0x3d, 0xc6, 0x4d, 0x0b, 0xa7, 0x1f, 0x4c, 0xc0, 0xe1, 0xb6, 0xc4, 0xdb, 0x32, 0x7a,
		0x2f, 0x80, 0x6e, 0x58, 0x4d, 0x97, 0x55, 0x44, 0x2c, 0xc0, 0x66, 0x68, 0x0b, 0x0d, 0x5e, 0x24,
		0x78, 0x36, 0x5d, 0xaf, 0x3f, 0x49, 0xfb, 0x81, 0x35, 0x51, 0x80, 0xb3, 0x3e, 0xa3, 0x29, 0xca,
		0xe8, 0x44, 0x07, 0x49, 0x5b, 0x1c, 0xf3, 0x09, 0xc8, 0x69, 0x75, 0x1d, 0x1b, 0x6e, 0xc5, 0x71,
		0x6d, 0xac, 0x36, 0x74, 0xa3, 0x46, 0x33, 0x48, 0xba, 0xd8, 0xb7, 0xad, 0xd6, 0x1d, 0xac, 0x8c,
		0xb0, 0xee, 0x75, 0xd1, 0x4b, 0x30, 0xa8, 0x03, 0xd9, 0x01, 0x8c, 0xfe, 0x10, 0x06, 0xeb, 0xf6,
		0x30, 0xe4, 0x9f, 0xcd, 0xc0, 0x60, 0xa0, 0xae, 0x46, 0xf7, 0x41, 0xf6, 0x45, 0xf5, 0xaa, 0x5a,
		0x11, 0x6b, 0x25, 0xa6, 0x89, 0x41, 0xd2, 0xb6, 0xc6, 0xd7, 0x4b, 0x4f, 0xc0, 0x38, 0x05, 0x31,
		0x9b, 0x2e, 0xb6, 0x2b, 0x5a, 0x5d, 0x75, 0x1c, 0xaa, 0xb4, 0x34, 0x05, 0x45, 0xa4, 0x6f, 0x95,
		0x74, 0xcd, 0x89, 0x1e, 0x74, 0x1a, 0xc6, 0x28, 0x46, 0xa3, 0x59, 0x77, 0x75, 0xab, 0x8e, 0x2b,
		0x64, 0xf5, 0xe6, 0xd0, 0x4c, 0xe2, 0x71, 0x36, 0x4a, 0x20, 0x96, 0x39, 0x00, 0xe1, 0xc8, 0x41,
		0xf3, 0x70, 0x2f, 0x45, 0xab, 0x61, 0x03, 0xdb, 0xaa, 0x8b, 0x2b, 0xf8, 0xa5, 0xa6, 0x5a, 0x77,
		0x2a, 0xaa, 0x51, 0xad, 0xec, 0xa8, 0xce, 0x4e, 0x7e, 0x9c, 0x10, 0x28, 0x25, 0xf2, 0x92, 0x72,
		0x8c, 0x00, 0x2e, 0x70, 0xb8, 0x32, 0x05, 0x9b, 0x35, 0xaa, 0x17, 0x55, 0x67, 0x07, 0x15, 0xe1,
		0x08, 0xa5, 0xe2, 0xb8, 0xb6, 0x6e, 0xd4, 0x2a, 0xda, 0x0e, 0xd6, 0x76, 0x2b, 0x4d, 0x77, 0xfb,
		0x6c, 0xfe, 0x9e, 0xe0, 0xf8, 0x94, 0xc3, 0x75, 0x0a, 0x33, 0x47, 0x40, 0x36, 0xdd, 0xed, 0xb3,
		0x68, 0x1d, 0xb2, 0xc4, 0x18, 0x0d, 0xfd, 0x65, 0x5c, 0xd9, 0x36, 0x6d, 0x9a, 0x1a, 0x87, 0xdb,
		0x84, 0xa6, 0x80, 0x06, 0xa7, 0x57, 0x39, 0xc2, 0xb2, 0x59, 0xc5, 0xc5, 0xbe, 0xf5, 0xb5, 0x72,
		0x79, 0x5e, 0x19, 0x14, 0x54, 0x2e, 0x98, 0x36, 0x71, 0xa8, 0x9a, 0xe9, 0x29, 0x78, 0x90, 0x39,
		0x54, 0xcd, 0x14, 0xea, 0x3d, 0x0d, 0x63, 0x9a, 0xc6, 0x64, 0xd6, 0xb5, 0x0a, 0x5f, 0x63, 0x39,
		0xf9, 0x5c, 0x48, 0x59, 0x9a, 0xb6, 0xc0, 0x00, 0xb8, 0x8f, 0x3b, 0xe8, 0x1c, 0x1c, 0xf6, 0x95,
		0x15, 0x44, 0x1c, 0x6d, 0x91, 0x32, 0x8a, 0x7a, 0x1a, 0xc6, 0xac, 0xbd, 0x56, 0x44, 0x14, 0x1a,
		0xd1, 0xda, 0x8b, 0xa2, 0x3d, 0x03, 0xe3, 0xd6, 0x8e, 0xd5, 0x8a, 0x77, 0x32, 0x88, 0x87, 0xac,
		0x1d, 0x2b, 0x8a, 0xf8, 0x20, 0x5d, 0x70, 0xdb, 0x58, 0x53, 0x5d, 0x5c, 0xcd, 0x1f, 0x0d, 0x82,
		0x07, 0x3a, 0xd0, 0x0c, 0xe4, 0x34, 0xad, 0x82, 0x0d, 0x75, 0xab, 0x8e, 0x2b, 0xaa, 0x8d, 0x0d,
		0xd5, 0xc9, 0x4f, 0x06, 0x81, 0x87, 0x35, 0xad, 0x4c, 0x7b, 0x67, 0x69, 0x27, 0x3a, 0x09, 0xa3,
		0xe6, 0xd6, 0x8b, 0x1a, 0x73, 0xc9, 0x8a, 0x65, 0xe3, 0x6d, 0xfd, 0x7a, 0xfe, 0x01, 0xaa, 0xdf,
		0x11, 0xd2, 0x41, 0x1d, 0x72, 0x8d, 0x36, 0xa3, 0x47, 0x20, 0xa7, 0x39, 0x3b, 0xaa, 0x6d, 0xd1,
		0x98, 0xec, 0x58, 0xaa, 0x86, 0xf3, 0x0f, 0x32, 0x50, 0xd6, 0xbe, 0x22, 0x9a, 0xc9, 0x94, 0x70,
		0xae, 0xe9, 0xdb, 0xae, 0xa0, 0xf8, 0x30, 0x9b, 0x12, 0xb4, 0x8d, 0x53, 0x3b, 0x01, 0x39, 0xa2,
		0x8a, 0xd0, 0xc0, 0x27, 0x28, 0xd8, 0xb0, 0xb5, 0x63, 0x05, 0xc7, 0xbd, 0x1f, 0x86, 0x08, 0xa4,
		0x3f, 0xe8, 0x23, 0xac, 0x20, 0xb3, 0x76, 0x02, 0x23, 0x3e, 0x0d, 0x47, 0x08, 0x50, 0x03, 0xbb,
		0x6a, 0x55, 0x75, 0xd5, 0x00, 0xf4, 0x63, 0x14, 0x9a, 0xe8, 0x7d, 0x99, 0x77, 0x86, 0xf8, 0xb4,
		0x9b, 0x5b, 0x7b, 0x9e, 0x67, 0x3d, 0xce, 0xf8, 0x24, 0x6d, 0xc2, 0xb7, 0xee, 0x5a, 0xd1, 0x2d,
		0x17, 0x21, 0x1b, 0x74, 0x7c, 0x94, 0x01, 0xe6, 0xfa, 0x39, 0x89, 0x54, 0x41, 0x73, 0xab, 0xf3,
		0xa4, 0x7e, 0x79, 0x5b, 0x39, 0x97, 0x20, 0x75, 0xd4, 0xd2, 0xe2, 0x46, 0xb9, 0xa2, 0x6c, 0xae,
		0x6c, 0x2c, 0x2e, 0x97, 0x73, 0xc9, 0x40, 0xc1, 0x7e, 0x29, 0x95, 0x7e, 0x28, 0xf7, 0xb0, 0xfc,
		0xcd, 0x04, 0x0c, 0x87, 0x57, 0x60, 0xe8, 0x4d, 0x70, 0x54, 0x6c, 0x97, 0x38, 0xd8, 0xad, 0x5c,
		0xd3, 0x6d, 0x3a, 0x23, 0x1b, 0x2a, 0xcb, 0x8e, 0x9e, 0x4f, 0x8c, 0x73, 0xa8, 0x75, 0xec, 0xbe,
		0xa0, 0xdb, 0x64, 0xbe, 0x35, 0x54, 0x17, 0x2d, 0xc1, 0xa4, 0x61, 0x56, 0x1c, 0x57, 0x35, 0xaa,
		0xaa, 0x5d, 0xad, 0xf8, 0x1b, 0x55, 0x15, 0x55, 0xd3, 0xb0, 0xe3, 0x98, 0x2c, 0x13, 0x7a, 0x54,
		0x8e, 0x1b, 0xe6, 0x3a, 0x07, 0xf6, 0x53, 0xc4, 0x2c, 0x07, 0x8d, 0xf8, 0x6f, 0xb2, 0x93, 0xff,
		0xde, 0x03, 0x99, 0x86, 0x6a, 0x55, 0xb0, 0xe1, 0xda, 0x7b, 0xb4, 0xee, 0x4e, 0x2b, 0xe9, 0x86,
		0x6a, 0x95, 0xc9, 0xf3, 0x8f, 0x64, 0xf9, 0x73, 0x29, 0x95, 0x4e, 0xe7, 0x32, 0x97, 0x52, 0xe9,
		0x4c, 0x0e, 0xe4, 0xd7, 0x92, 0x90, 0x0d, 0xd6, 0xe1, 0x64, 0x59, 0xa3, 0xd1, 0x94, 0x25, 0xd1,
		0xa0, 0x76, 0x7f, 0xd7, 0xaa, 0x7d, 0x7a, 0x8e, 0xe4, 0xb2, 0x62, 0x3f, 0xab, 0x8e, 0x15, 0x86,
		0x49, 0xea, 0x08, 0xe2, 0x6c, 0x98, 0x55, 0x23, 0x69, 0x85, 0x3f, 0xa1, 0x05, 0xe8, 0x7f, 0xd1,
		0xa1, 0xb4, 0xfb, 0x29, 0xed, 0x07, 0xba, 0xd3, 0xbe, 0xb4, 0x4e, 0x89, 0x67, 0x2e, 0xad, 0x57,
		0x56, 0x56, 0x95, 0xe5, 0xd9, 0x25, 0x85, 0xa3, 0xa3, 0x63, 0x90, 0xaa, 0xab, 0x2f, 0xef, 0x85,
		0xb3, 0x1e, 0x6d, 0xea, 0xd5, 0x08, 0xc7, 0x20, 0x75, 0x0d, 0xab, 0xbb, 0xe1, 0x5c, 0x43, 0x9b,
		0xee, 0xe2, 0x64, 0x98, 0x81, 0x3e, 0xaa, 0x2f, 0x04, 0xc0, 0x35, 0x96, 0x3b, 0x84, 0xd2, 0x90,
		0x9a, 0x5b, 0x55, 0xc8, 0x84, 0xc8, 0x41, 0x96, 0xb5, 0x56, 0xd6, 0x16, 0xcb, 0x73, 0xe5, 0x5c,
		0x42, 0x3e, 0x0d, 0xfd, 0x4c, 0x09, 0x64, 0xb2, 0x78, 0x6a, 0xc8, 0x1d, 0xe2, 0x8f, 0x9c, 0x86,
		0x24, 0x7a, 0x37, 0x97, 0x4b, 0x65, 0x25, 0x97, 0x08, 0x9b, 0x3a, 0x95, 0xeb, 0x93, 0x1d, 0xc8,
		0x06, 0x0b, 0xf1, 0x1f, 0xcd, 0x22, 0xfb, 0x2b, 0x12, 0x0c, 0x06, 0x0a, 0x6b, 0x52, 0x11, 0xa9,
		0xf5, 0xba, 0x79, 0xad, 0xa2, 0xd6, 0x75, 0xd5, 0xe1, 0xae, 0x01, 0xb4, 0x69, 0x96, 0xb4, 0xf4,
		0x6a, 0xba, 0x1f, 0xd1, 0x14, 0xe9, 0xcb, 0xf5, 0xcb, 0x9f, 0x92, 0x20, 0x17, 0xad, 0x6c, 0x23,
		0x6c, 0x4a, 0x6f, 0x24, 0x9b, 0xf2, 0x27, 0x25, 0x18, 0x0e, 0x97, 0xb3, 0x11, 0xf6, 0xee, 0x7b,
		0x43, 0xd9, 0xfb, 0xa3, 0x04, 0x0c, 0x85, 0x8a, 0xd8, 0x5e, 0xb9, 0x7b, 0x09, 0x46, 0xf5, 0x2a,
		0x6e, 0x58, 0xa6, 0x8b, 0x0d, 0x6d, 0xaf, 0x52, 0xc7, 0x57, 0x71, 0x3d, 0x2f, 0xd3, 0xa0, 0x31,
		0xd3, 0xbd, 0x4c, 0x9e, 0x5e, 0xf4, 0xf1, 0x96, 0x08, 0x5a, 0x71, 0x6c, 0x71, 0xbe, 0xbc, 0xbc,
		0xb6, 0xba, 0x51, 0x5e, 0x99, 0x7b, 0x6b, 0x65, 0x73, 0xe5, 0xf2, 0xca, 0xea, 0x0b, 0x2b, 0x4a,
		0x4e, 0x8f, 0x80, 0xdd, 0xc5, 0x69, 0xbf, 0x06, 0xb9, 0x28, 0x53, 0xe8, 0x28, 0xb4, 0x63, 0x2b,
		0x77, 0x08, 0x8d, 0xc1, 0xc8, 0xca, 0x6a, 0x65, 0x7d, 0x71, 0xbe, 0x5c, 0x29, 0x5f, 0xb8, 0x50,
		0x9e, 0xdb, 0x58, 0x67, 0x1b, 0x1f, 0x1e, 0xf4, 0x46, 0x68, 0x82, 0xcb, 0xaf, 0x26, 0x61, 0xac,
		0x0d, 0x27, 0x68, 0x96, 0x2f, 0x59, 0xd8, 0x2a, 0xea, 0xf1, 0x5e, 0xb8, 0x9f, 0x26, 0x35, 0xc3,
		0x9a, 0x6a, 0xbb, 0x7c, 0x85, 0xf3, 0x08, 0x10, 0x2d, 0x19, 0xae, 0xbe, 0xad, 0x63, 0x9b, 0xef,
		0x13, 0xb1, 0x75, 0xcc, 0x88, 0xdf, 0xce, 0xb6, 0x8a, 0x1e, 0x03, 0x64, 0x99, 0x8e, 0xee, 0xea,
		0x57, 0x71, 0x45, 0x37, 0xc4, 0xa6, 0x12, 0x59, 0xd7, 0xa4, 0x94, 0x9c, 0xe8, 0x59, 0x34, 0x5c,
		0x0f, 0xda, 0xc0, 0x35, 0x35, 0x02, 0x4d, 0x82, 0x79, 0x52, 0xc9, 0x89, 0x1e, 0x0f, 0xfa, 0x3e,
		0xc8, 0x56, 0xcd, 0x26, 0x29, 0xf6, 0x18, 0x1c, 0xc9, 0x1d, 0x92, 0x32, 0xc8, 0xda, 0x3c, 0x10,
		0x5e, 0xc6, 0xfb, 0xbb, 0x59, 0x59, 0x65, 0x90, 0xb5, 0x31, 0x90, 0x87, 0x61, 0x44, 0xad, 0xd5,
		0x6c, 0x42, 0x5c, 0x10, 0x62, 0x0b, 0x93, 0x61, 0xaf, 0x99, 0x02, 0x16, 0x2e, 0x41, 0x5a, 0xe8,
		0x81, 0xa4, 0x6a, 0xa2, 0x89, 0x8a, 0xc5, 0x56, 0xdb, 0x89, 0x13, 0x19, 0x25, 0x6d, 0x88, 0xce,
		0xfb, 0x20, 0xab, 0x3b, 0x15, 0x7f, 0x73, 0x3e, 0x31, 0x95, 0x38, 0x91, 0x56, 0x06, 0x75, 0xc7,
		0xdb, 0xd8, 0x94, 0x3f, 0x97, 0x80, 0xe1, 0xf0, 0xcb, 0x05, 0x34, 0x0f, 0xe9, 0xba, 0xa9, 0xa9,
		0xd4, 0xb5, 0xd8, 0x9b, 0xad, 0x13, 0x31, 0xef, 0x23, 0xa6, 0x97, 0x38, 0xbc, 0xe2, 0x61, 0x16,
		0x7e, 0x47, 0x82, 0xb4, 0x68, 0x46, 0x47, 0x20, 0x65, 0xa9, 0xee, 0x0e, 0x25, 0xd7, 0x57, 0x4a,
		0xe4, 0x24, 0x85, 0x3e, 0x93, 0x76, 0xc7, 0x52, 0x0d, 0xea, 0x02, 0xbc, 0x9d, 0x3c, 0x13, 0xbb,
		0xd6, 0xb1, 0x5a, 0xa5, 0xab, 0x1e, 0xb3, 0xd1, 0xc0, 0x86, 0xeb, 0x08, 0xbb, 0xf2, 0xf6, 0x39,
		0xde, 0x8c, 0x1e, 0x85, 0x51, 0xd7, 0x56, 0xf5, 0x7a, 0x08, 0x36, 0x45, 0x61, 0x73, 0xa2, 0xc3,
		0x03, 0x2e, 0xc2, 0x31, 0x41, 0xb7, 0x8a, 0x5d, 0x55, 0xdb, 0xc1, 0x55, 0x1f, 0xa9, 0x9f, 0xee,
		0x6e, 0x1c, 0xe5, 0x00, 0xf3, 0xbc, 0x5f, 0xe0, 0xca, 0xdf, 0x94, 0x60, 0x54, 0xac, 0xd3, 0xaa,
		0x9e, 0xb2, 0x96, 0x01, 0x54, 0xc3, 0x30, 0xdd, 0xa0, 0xba, 0x5a, 0x5d, 0xb9, 0x05, 0x6f, 0x7a,
		0xd6, 0x43, 0x52, 0x02, 0x04, 0x0a, 0x0d, 0x00, 0xbf, 0xa7, 0xa3, 0xda, 0x26, 0x61, 0x90, 0xbf,
		0x39, 0xa2, 0xaf, 0x1f, 0xd9, 0xca, 0x1e, 0x58, 0x13, 0x59, 0xd0, 0xa1, 0x71, 0xe8, 0xdb, 0xc2,
		0x35, 0xdd, 0xe0, 0xfb, 0xc1, 0xec, 0x41, 0xec, 0xbf, 0xa4, 0xbc, 0xfd, 0x97, 0xd2, 0x87, 0x24,
		0x18, 0xd3, 0xcc, 0x46, 0x94, 0xdf, 0x52, 0x2e, 0xb2, 0xbd, 0xe0, 0x5c, 0x94, 0xde, 0xf6, 0x6c,
		0x4d, 0x77, 0x77, 0x9a, 0x5b, 0xd3, 0x9a, 0xd9, 0x98, 0xa9, 0x99, 0x75, 0xd5, 0xa8, 0xf9, 0xef,
		0x4f, 0xe9, 0x0f, 0xed, 0xf1, 0x1a, 0x36, 0x1e, 0xaf, 0x99, 0x81, 0xb7, 0xa9, 0xe7, 0xfd, 0x9f,
		0x7f, 0x21, 0x49, 0xbf, 0x90, 0x48, 0x2e, 0xac, 0x95, 0x3e, 0x9f, 0x28, 0x2c, 0xb0, 0xe1, 0xd6,
		0x84, 0x7a, 0x14, 0xbc, 0x5d, 0xc7, 0x1a, 0x11, 0x19, 0xbe, 0xf3, 0x28, 0x8c, 0xd7, 0xcc, 0x9a,
		0x49, 0x29, 0xce, 0x90, 0x5f, 0xfc, 0x8d, 0x6c, 0xc6, 0x6b, 0x2d, 0xc4, 0xbe, 0xbe, 0x2d, 0xae,
		0xc0, 0x18, 0x07, 0xae, 0xd0, 0x57, 0x42, 0x6c, 0x61, 0x83, 0xba, 0x6e, 0xab, 0xe5, 0x7f, 0xed,
		0xdb, 0x34, 0xa1, 0x2b, 0xa3, 0x1c, 0x95, 0xf4, 0xb1, 0xb5, 0x4f, 0x51, 0x81, 0xc3, 0x21, 0x7a,
		0x6c, 0xda, 0x62, 0x3b, 0x86, 0xe2, 0x6f, 0x71, 0x8a, 0x63, 0x01, 0x8a, 0xeb, 0x1c, 0xb5, 0x38,
		0x07, 0x43, 0xfb, 0xa1, 0xf5, 0xaf, 0x39, 0xad, 0x2c, 0x0e, 0x12, 0x59, 0x80, 0x11, 0x4a, 0x44,
		0x6b, 0x3a, 0xae, 0xd9, 0xa0, 0x31, 0xb1, 0x3b, 0x99, 0xdf, 0xfe, 0x36, 0x9b, 0x47, 0xc3, 0x04,
		0x6d, 0xce, 0xc3, 0x2a, 0x16, 0x81, 0xbe, 0x05, 0xab, 0x62, 0xad, 0x1e, 0x43, 0xe1, 0xab, 0x9c,
		0x11, 0x0f, 0xbe, 0x78, 0x05, 0xc6, 0xc9, 0x6f, 0x1a, 0xb2, 0x82, 0x9c, 0xc4, 0xef, 0xc1, 0xe5,
		0xbf, 0xf9, 0x5e, 0x36, 0x55, 0xc7, 0x3c, 0x02, 0x01, 0x9e, 0x02, 0x56, 0xac, 0x61, 0xd7, 0xc5,
		0xb6, 0x53, 0x51, 0xeb, 0xed, 0xd8, 0x0b, 0x6c, 0x62, 0xe4, 0x3f, 0xfe, 0xdd, 0xb0, 0x15, 0x17,
		0x18, 0xe6, 0x6c, 0xbd, 0x5e, 0xdc, 0x84, 0xa3, 0x6d, 0xbc, 0xa2, 0x07, 0x9a, 0xaf, 0x72, 0x9a,
		0xe3, 0x2d, 0x9e, 0x41, 0xc8, 0xae, 0x81, 0x68, 0xf7, 0x6c, 0xd9, 0x03, 0xcd, 0x4f, 0x70, 0x9a,
		0x88, 0xe3, 0x0a, 0x93, 0x12, 0x8a, 0x97, 0x60, 0xf4, 0x2a, 0xb6, 0xb7, 0x4c, 0x87, 0x6f, 0x1c,
		0xf5, 0x40, 0xee, 0x93, 0x9c, 0xdc, 0x08, 0x47, 0xa4, 0x3b, 0x49, 0x84, 0xd6, 0x39, 0x48, 0x6f,
		0xab, 0x1a, 0xee, 0x81, 0xc4, 0x4d, 0x4e, 0x62, 0x80, 0xc0, 0x13, 0xd4, 0x59, 0xc8, 0xd6, 0x4c,
		0x9e, 0xb5, 0xe2, 0xd1, 0x3f, 0xc5, 0xd1, 0x07, 0x05, 0x0e, 0x27, 0x61, 0x99, 0x56, 0xb3, 0x4e,
		0x52, 0x5a, 0x3c, 0x89, 0xbf, 0x23, 0x48, 0x08, 0x1c, 0x4e, 0x62, 0x1f, 0x6a, 0xfd, 0xb4, 0x20,
		0xe1, 0x04, 0xf4, 0xf9, 0x1c, 0x0c, 0x9a, 0x46, 0x7d, 0xcf, 0x34, 0x7a, 0x61, 0xe2, 0x33, 0x9c,
		0x02, 0x70, 0x14, 0x42, 0xe0, 0x3c, 0x64, 0x7a, 0x35, 0xc4, 0xdf, 0xfd, 0xae, 0x98, 0x1e, 0xc2,
		0x02, 0x0b, 0x30, 0x22, 0x02, 0x94, 0x6e, 0x1a, 0x3d, 0x90, 0xf8, 0x7b, 0x9c, 0xc4, 0x70, 0x00,
		0x8d, 0x8b, 0xe1, 0x62, 0xc7, 0xad, 0xe1, 0x5e, 0x88, 0x7c, 0x4e, 0x88, 0xc1, 0x51, 0xb8, 0x2a,
		0xb7, 0xb0, 0xa1, 0xed, 0xf4, 0x46, 0xe1, 0x97, 0x84, 0x2a, 0x05, 0x0e, 0x21, 0x31, 0x07, 0x43,
		0x0d, 0xd5, 0x76, 0x76, 0xd4, 0x7a, 0x4f, 0xe6, 0xf8, 0xfb, 0x9c, 0x46, 0xd6, 0x43, 0xe2, 0x1a,
		0x69, 0x1a, 0xfb, 0x21, 0xf3, 0x79, 0xa1, 0x91, 0x00, 0x1a, 0x9f, 0x7a, 0x8e, 0x4b, 0x77, 0xd9,
		0xf6, 0x43, 0xed, 0x97, 0xc5, 0xd4, 0x63, 0xb8, 0xcb, 0x41, 0x8a, 0xe7, 0x21, 0xe3, 0xe8, 0x2f,
		0xf7, 0x44, 0xe6, 0x0b, 0xc2, 0xd2, 0x14, 0x81, 0x20, 0xbf, 0x15, 0x8e, 0xb5, 0x4d, 0x13, 0x3d,
		0x10, 0xfb, 0x07, 0x9c, 0xd8, 0x91, 0x36, 0xa9, 0x82, 0x87, 0x84, 0xfd, 0x92, 0xfc, 0x87, 0x22,
		0x24, 0xe0, 0x08, 0xad, 0x35, 0xb2, 0x8e, 0x70, 0xd4, 0xed, 0xfd, 0x69, 0xed, 0x57, 0x84, 0xd6,
		0x18, 0x6e, 0x48, 0x6b, 0x1b, 0x70, 0x84, 0x53, 0xdc, 0x9f, 0x5d, 0x7f, 0x55, 0x04, 0x56, 0x86,
		0xbd, 0x19, 0xb6, 0xee, 0xdb, 0xa1, 0xe0, 0xa9, 0x53, 0x14, 0xac, 0x4e, 0xa5, 0xa1, 0x5a, 0x3d,
		0x50, 0xfe, 0x35, 0x4e, 0x59, 0x44, 0x7c, 0xaf, 0xe2, 0x75, 0x96, 0x55, 0x8b, 0x10, 0x7f, 0x0b,
		0xe4, 0x05, 0xf1, 0xa6, 0x61, 0x63, 0xcd, 0xac, 0x19, 0xfa, 0xcb, 0xb8, 0xda, 0x03, 0xe9, 0x5f,
		0x8f, 0x98, 0x6a, 0x33, 0x80, 0x4e, 0x28, 0x2f, 0x42, 0xce, 0xab, 0x55, 0x2a, 0x7a, 0xc3, 0x32,
		0x6d, 0x37, 0x86, 0xe2, 0x17, 0x85, 0xa5, 0x3c, 0xbc, 0x45, 0x8a, 0x56, 0x2c, 0xc3, 0x30, 0x7d,
		0xec, 0xd5, 0x25, 0xbf, 0xc4, 0x09, 0x0d, 0xf9, 0x58, 0x3c, 0x70, 0x68, 0x66, 0xc3, 0x52, 0xed,
		0x5e, 0xe2, 0xdf, 0x3f, 0x12, 0x81, 0x83, 0xa3, 0xf0, 0xc0, 0xe1, 0xee, 0x59, 0x98, 0x64, 0xfb,
		0x1e, 0x28, 0x7c, 0x59, 0x04, 0x0e, 0x81, 0xc3, 0x49, 0x88, 0x82, 0xa1, 0x07, 0x12, 0xff, 0x58,
		0x90, 0x10, 0x38, 0x84, 0xc4, 0xf3, 0x7e, 0xa2, 0xb5, 0x71, 0x4d, 0x77, 0x5c, 0x9b, 0x95, 0xc9,
		0xdd, 0x49, 0xfd, 0x93, 0xef, 0x86, 0x8b, 0x30, 0x25, 0x80, 0x4a, 0x22, 0x11, 0xdf, 0x76, 0xa5,
		0xab, 0xa8, 0x78, 0xc6, 0x7e, 0x43, 0x44, 0xa2, 0x00, 0x1a, 0xe1, 0x2d, 0x50, 0x21, 0x12, 0xb5,
		0x6b, 0x64, 0xed, 0xd0, 0x03, 0xb9, 0x7f, 0x1a, 0x61, 0x6e, 0x5d, 0xe0, 0x12, 0x9a, 0x81, 0xfa,
		0xa7, 0x69, 0xec, 0xe2, 0xbd, 0x9e, 0xbc, 0xf3, 0x9f, 0x45, 0xea, 0x9f, 0x4d, 0x86, 0xc9, 0x62,
		0xc8, 0x48, 0xa4, 0x9e, 0x42, 0x71, 0xe7, 0x87, 0xf2, 0x3f, 0xf5, 0x7d, 0x2e, 0x6f, 0xb8, 0x9c,
		0x2a, 0x2e, 0x11, 0x27, 0x0f, 0x17, 0x3d, 0xf1, 0xc4, 0xde, 0xfb, 0x7d, 0xcf, 0xcf, 0x43, 0x35,
		0x4f, 0xf1, 0x02, 0x0c, 0x85, 0x0a, 0x9e, 0x78, 0x52, 0xef, 0xe3, 0xa4, 0xb2, 0xc1, 0x7a, 0xa7,
		0x78, 0x1a, 0x52, 0xa4, 0x78, 0x89, 0x47, 0xff, 0xeb, 0x1c, 0x9d, 0x82, 0x17, 0xdf, 0x0c, 0x69,
		0x51, 0xb4, 0xc4, 0xa3, 0xbe, 0x9f, 0xa3, 0x7a, 0x28, 0x04, 0x5d, 0x14, 0x2c, 0xf1, 0xe8, 0x7f,
		0x43, 0xa0, 0x0b, 0x14, 0x82, 0xde, 0xbb, 0x0a, 0xbf, 0xf2, 0xd3, 0x29, 0x9e, 0x74, 0x84, 0xee,
		0xce, 0xc3, 0x00, 0xaf, 0x54, 0xe2, 0xb1, 0x3f, 0xc8, 0x07, 0x17, 0x18, 0xc5, 0x67, 0xa0, 0xaf,
		0x47, 0x85, 0xff, 0x0c, 0x47, 0x65, 0xf0, 0xc5, 0x39, 0x18, 0x0c, 0x54, 0x27, 0xf1, 0xe8, 0x7f,
		0x8b, 0xa3, 0x07, 0xb1, 0x08, 0xeb, 0xbc, 0x3a, 0x89, 0x27, 0xf0, 0x21, 0xc1, 0x3a, 0xc7, 0x20,
		0x6a, 0x13, 0x85, 0x49, 0x3c, 0xf6, 0x87, 0x85, 0xd6, 0x05, 0x4a, 0xf1, 0x39, 0xc8, 0x78, 0xc9,
		0x26, 0x1e, 0xff, 0x23, 0x1c, 0xdf, 0xc7, 0x21, 0x1a, 0x08, 0x24, 0xbb, 0x78, 0x12, 0x3f, 0x2b,
		0x34, 0x10, 0xc0, 0x22, 0xd3, 0x28, 0x5a, 0xc0, 0xc4, 0x53, 0xfa, 0xa8, 0x98, 0x46, 0x91, 0xfa,
		0x85, 0x58, 0x93, 0xc6, 0xfc, 0x78, 0x12, 0x3f, 0x27, 0xac, 0x49, 0xe1, 0x09, 0x1b, 0xd1, 0x8a,
		0x20, 0x9e, 0xc6, 0xdf, 0x16, 0x6c, 0x44, 0x0a, 0x82, 0xe2, 0x1a, 0xa0, 0xd6, 0x6a, 0x20, 0x9e,
		0xde, 0xc7, 0x38, 0xbd, 0xd1, 0x96, 0x62, 0xa0, 0xf8, 0x02, 0x1c, 0x69, 0x5f, 0x09, 0xc4, 0x53,
		0xfd, 0xf8, 0xf7, 0x23, 0x6b, 0xb7, 0x60, 0x21, 0x50, 0xdc, 0xf0, 0x53, 0x4a, 0xb0, 0x0a, 0x88,
		0x27, 0xfb, 0xea, 0xf7, 0xc3, 0x81, 0x3b, 0x58, 0x04, 0x14, 0x67, 0x01, 0xfc, 0x04, 0x1c, 0x4f,
		0xeb, 0x93, 0x9c, 0x56, 0x00, 0x89, 0x4c, 0x0d, 0x9e, 0x7f, 0xe3, 0xf1, 0x6f, 0x8a, 0xa9, 0xc1,
		0x31, 0xc8, 0xd4, 0x10, 0xa9, 0x37, 0x1e, 0xfb, 0x53, 0x62, 0x6a, 0x08, 0x14, 0xe2, 0xd9, 0x81,
		0xec, 0x16, 0x4f, 0xe1, 0x33, 0xc2, 0xb3, 0x03, 0x58, 0xc5, 0x15, 0x18, 0x6d, 0x49, 0x88, 0xf1,
		0xa4, 0x7e, 0x81, 0x93, 0xca, 0x45, 0xf3, 0x61, 0x30, 0x79, 0xf1, 0x64, 0x18, 0x4f, 0xed, 0xb3,
		0x91, 0xe4, 0xc5, 0x73, 0x61, 0xf1, 0x3c, 0xa4, 0x8d, 0x66, 0xbd, 0x4e, 0x26, 0x0f, 0xea, 0x7e,
		0xe6, 0x2f, 0xff, 0x5f, 0x7f, 0xc0, 0xb5, 0x23, 0x10, 0x8a, 0xa7, 0xa1, 0x0f, 0x37, 0xb6, 0x70,
		0x35, 0x0e, 0xf3, 0x3b, 0x3f, 0x10, 0x01, 0x93, 0x40, 0x17, 0x9f, 0x03, 0x60, 0x5b, 0x23, 0xf4,
		0xf5, 0x60, 0x0c, 0xee, 0x7f, 0xfb, 0x01, 0x3f, 0x8d, 0xe3, 0xa3, 0xf8, 0x04, 0xd8, 0xd9, 0x9e,
		0xee, 0x04, 0xbe, 0x1b, 0x26, 0x40, 0x2d, 0x72, 0x0e, 0x06, 0x5e, 0x74, 0x4c, 0xc3, 0x55, 0x6b,
		0x71, 0xd8, 0xff, 0x9d, 0x63, 0x0b, 0x78, 0xa2, 0xb0, 0x86, 0x69, 0x63, 0x57, 0xad, 0x39, 0x71,
		0xb8, 0xff, 0x83, 0xe3, 0x7a, 0x08, 0x04, 0x59, 0x53, 0x1d, 0xb7, 0x17, 0xb9, 0xff, 0x44, 0x20,
		0x0b, 0x04, 0xc2, 0x34, 0xf9, 0xbd, 0x8b, 0xf7, 0xe2, 0x70, 0xbf, 0x27, 0x98, 0xe6, 0xf0, 0xc5,
		0x37, 0x43, 0x86, 0xfc, 0x64, 0x47, 0xec, 0x62, 0x90, 0xff, 0x94, 0x23, 0xfb, 0x18, 0x64, 0x64,
		0xc7, 0xad, 0xba, 0x7a, 0xbc, 0xb2, 0x6f, 0x73, 0x4b, 0x0b, 0xf8, 0xe2, 0x2c, 0x0c, 0x3a, 0x6e,
		0xb5, 0xda, 0xe4, 0xf5, 0x69, 0x0c, 0xfa, 0x9f, 0xfd, 0xc0, 0xdb, 0xb2, 0xf0, 0x70, 0x88, 0xb5,
		0xaf, 0xed, 0xba, 0x96, 0x49, 0x5f, 0x81, 0xc4, 0x51, 0xf8, 0x3e, 0xa7, 0x10, 0x40, 0x29, 0xce,
		0x41, 0x96, 0xc8, 0x62, 0x63, 0x0b, 0xd3, 0xf7, 0x55, 0x31, 0x24, 0xfe, 0x9c, 0x2b, 0x20, 0x84,
		0x54, 0xfa, 0xc9, 0xaf, 0xbe, 0x36, 0x21, 0x7d, 0xe3, 0xb5, 0x09, 0xe9, 0x8f, 0x5e, 0x9b, 0x90,
		0x3e, 0xfc, 0xad, 0x89, 0x43, 0xdf, 0xf8, 0xd6, 0xc4, 0xa1, 0xdf, 0xfb, 0xd6, 0xc4, 0xa1, 0xf6,
		0xdb, 0xc6, 0xb0, 0x60, 0x2e, 0x98, 0x6c, 0xc3, 0xf8, 0x6d, 0x72, 0x68, 0xbb, 0xb8, 0x66, 0xfa,
		0xbb, 0xb5, 0xde, 0x22, 0x07, 0xfe, 0x5c, 0x22, 0x0b, 0xe6, 0xf0, 0x5e, 0xae, 0x6a, 0xec, 0x75,
		0xb8, 0x83, 0x53, 0x68, 0xbb, 0x31, 0x2c, 0xbf, 0x09, 0x92, 0xb3, 0xc6, 0x1e, 0x3a, 0xc6, 0x62,
		0x5e, 0xa5, 0x69, 0xd7, 0xf9, 0xd1, 0xaf, 0x01, 0xf2, 0xbc, 0x69, 0xd7, 0xd1, 0xb8, 0x7f, 0x3e,
		0x53, 0x3a, 0x91, 0xe5, 0x87, 0x2e, 0x8b, 0xa9, 0xef, 0x7d, 0x66, 0xf2, 0x50, 0x69, 0x37, 0x2a,
		0xe1, 0x57, 0x62, 0xa5, 0x4c, 0xcf, 0x1a, 0x7b, 0x54, 0xc8, 0x35, 0xe9, 0x6d, 0x7d, 0x64, 0x0c,
		0x47, 0x6c, 0x6c, 0x4f, 0x44, 0x37, 0xb6, 0x5f, 0xc0, 0xf5, 0xfa, 0x65, 0xc3, 0xbc, 0x66, 0x6c,
		0x10, 0xb0, 0xad, 0x7e, 0x4a, 0xe3, 0x29, 0xf8, 0x9b, 0x09, 0x98, 0x68, 0xd9, 0xc3, 0xe6, 0x96,
		0xef, 0x74, 0x01, 0xa9, 0x08, 0xe9, 0x79, 0xe1, 0x50, 0x79, 0x18, 0x70, 0xb0, 0x66, 0x1a, 0x55,
		0x87, 0x8a, 0x9a, 0x54, 0xc4, 0x23, 0x11, 0xd5, 0x50, 0x0d, 0xd3, 0xe1, 0xc7, 0x23, 0xd9, 0x43,
		0xe9, 0xe7, 0xa4, 0xfd, 0xd9, 0x71, 0x48, 0x8c, 0x24, 0xc4, 0x3c, 0xd9, 0x6d, 0xef, 0x9f, 0xaa,
		0xc0, 0xe3, 0x3f, 0xb0, 0xcf, 0xdf, 0xab, 0x3a, 0x3e, 0x9c, 0x80, 0xc9, 0xa8, 0x3a, 0xc8, 0x3c,
		0x72, 0x5c, 0xb5, 0x61, 0x75, 0xd2, 0xc7, 0x79, 0xc8, 0x6c, 0x08, 0x98, 0x7d, 0x2b, 0xe4, 0xe7,
		0xf7, 0xa9, 0x90, 0x61, 0x6f, 0x28, 0xa1, 0x91, 0x47, 0xe3, 0x35, 0xe2, 0x89, 0x70, 0x00, 0x95,
		0xbc, 0x27, 0x09, 0xc7, 0x34, 0xd3, 0x69, 0x98, 0x4e, 0x85, 0x39, 0x3c, 0x7b, 0xe0, 0xca, 0xc8,
		0x06, 0xbb, 0x7a, 0x78, 0x1d, 0x72, 0x11, 0x86, 0x69, 0x50, 0xa0, 0x1b, 0xc1, 0x34, 0x0e, 0xc7,
		0xa6, 0xce, 0xaf, 0xfd, 0xfb, 0x3e, 0x3a, 0x89, 0x86, 0x3c, 0x44, 0x7a, 0xd2, 0x65, 0x03, 0xc6,
		0xf5, 0x86, 0x55, 0xc7, 0xf4, 0x95, 0x58, 0xc5, 0xeb, 0x8b, 0xa7, 0xf7, 0x75, 0x4e, 0x6f, 0xcc,
		0x47, 0x5f, 0x14, 0xd8, 0xc5, 0x25, 0x18, 0x55, 0x35, 0x0d, 0x5b, 0x21, 0x92, 0x31, 0x01, 0x4b,
		0x30, 0x98, 0xe3, 0x98, 0x1e, 0xb5, 0xd2, 0x73, 0x9d, 0x6c, 0xfb, 0xb6, 0x07, 0x03, 0x46, 0xb3,
		0x71, 0x0d, 0x1b, 0x8f, 0x1b, 0xd8, 0xbd, 0x66, 0xda, 0xbb, 0x5c, 0xbd, 0x8f, 0xb3, 0xa1, 0x84,
		0x11, 0xde, 0x97, 0x84, 0x09, 0xd6, 0x31, 0xb3, 0xa5, 0x3a, 0x78, 0xe6, 0xea, 0x93, 0x5b, 0xd8,
		0x55, 0x9f, 0x9c, 0xd1, 0x4c, 0x5d, 0x4c, 0xd3, 0x31, 0x6e, 0x17, 0xd2, 0x3f, 0xcd, 0xfb, 0x3b,
		0xc4, 0xa9, 0x05, 0x48, 0xcd, 0x99, 0xba, 0x41, 0x3c, 0xb2, 0x8a, 0x0d, 0xb3, 0xc1, 0xa3, 0x14,
		0x7b, 0x40, 0xf7, 0x43, 0xbf, 0xda, 0x30, 0x9b, 0x86, 0xcb, 0xde, 0xe6, 0x95, 0x06, 0xbf, 0x7a,
		0x6b, 0xf2, 0xd0, 0xef, 0xdf, 0x9a, 0x4c, 0x2e, 0x1a, 0xae, 0xc2, 0xbb, 0x8a, 0xa9, 0xd7, 0x3f,
		0x3d, 0x29, 0xc9, 0x97, 0x60, 0x60, 0x1e, 0x6b, 0x07, 0xa1, 0x35, 0x8f, 0xb5, 0x08, 0xad, 0x47,
		0x20, 0xbd, 0x68, 0xb8, 0xec, 0x08, 0xf1, 0xbd, 0x90, 0xd4, 0x0d, 0x76, 0x28, 0x2d, 0x32, 0x3e,
		0x69, 0x27, 0xa0, 0xf3, 0x58, 0xf3, 0x40, 0xab, 0x58, 0x8b, 0x82, 0x12, 0xf2, 0xa4, 0xbd, 0x34,
		0xff, 0x7b, 0xff, 0x79, 0xe2, 0xd0, 0x2b, 0xaf, 0x4d, 0x1c, 0xea, 0x68, 0x89, 0x60, 0x76, 0xe0,
		0x2a, 0xe6, 0x26, 0x70, 0xaa, 0xbb, 0x33, 0x6e, 0x68, 0x2e, 0x7c, 0x3e, 0x05, 0xf7, 0xd2, 0x4b,
		0x21, 0x76, 0x43, 0x37, 0xdc, 0x19, 0xcd, 0xde, 0xb3, 0x5c, 0x9a, 0x4e, 0xcc, 0x6d, 0x6e, 0x85,
		0x51, 0xbf, 0x7b, 0x9a, 0x75, 0x77, 0xb0, 0xc1, 0x36, 0xf4, 0xad, 0x11, 0x3c, 0xa2, 0x38, 0xd7,
		0x74, 0xd5, 0x3a, 0x0f, 0x17, 0xec, 0x81, 0xb4, 0xb2, 0x8b, 0x24, 0x09, 0xd6, 0xaa, 0x8b, 0x3b,
		0x24, 0x75, 0xac, 0x6e, 0xb3, 0x83, 0xbb, 0x49, 0x9a, 0x42, 0xd2, 0xa4, 0x81, 0x9e, 0xd1, 0x1d,
		0x87, 0x3e, 0xb5, 0xc9, 0x5e, 0x39, 0x27, 0x49, 0x6e, 0xa1, 0x0f, 0xf2, 0x65, 0x18, 0xe0, 0xaf,
		0xb9, 0x50, 0x0e, 0x92, 0xbb, 0x78, 0x8f, 0x8e, 0x93, 0x55, 0xc8, 0x4f, 0x34, 0x0d, 0x7d, 0x94,
		0x79, 0x7e, 0x23, 0x21, 0x3f, 0xdd, 0xc2, 0xfd, 0x34, 0x65, 0x52, 0x61, 0x60, 0xf2, 0x25, 0x48,
		0xcf, 0x9b, 0x0d, 0xdd, 0x30, 0xc3, 0xd4, 0x32, 0x8c, 0x1a, 0xe5, 0xd9, 0x6a, 0x72, 0x5b, 0x2b,
		0xec, 0x01, 0x1d, 0x81, 0x7e, 0x76, 0x90, 0x9b, 0xbf, 0x36, 0xe7, 0x4f, 0xf2, 0x1c, 0x0c, 0x50,
		0xda, 0xab, 0x16, 0x42, 0xfc, 0x66, 0x0f, 0x3f, 0x31, 0x4e, 0xc3, 0x02, 0x27, 0x9f, 0xf0, 0x99,
		0x45, 0x90, 0xaa, 0xaa, 0xae, 0xca, 0xe5, 0xa6, 0xbf, 0xe5, 0x67, 0x21, 0xcd, 0x89, 0x38, 0xe8,
		0x14, 0x24, 0x4d, 0xcb, 0xe1, 0x2f, 0xbe, 0x0b, 0x9d, 0x44, 0x59, 0xb5, 0x4a, 0x29, 0xe2, 0x25,
		0x0a, 0x01, 0x2e, 0x29, 0x1d, 0xdd, 0xe2, 0x6c, 0xc0, 0x2d, 0x02, 0x26, 0x0f, 0xfc, 0x64, 0x26,
		0x6d, 0x71, 0x07, 0xcf, 0x59, 0x3e, 0x93, 0x80, 0x89, 0x40, 0xef, 0x55, 0x6c, 0x93, 0xb5, 0x1e,
		0xf3, 0x28, 0xee, 0x2d, 0x28, 0xc0, 0x24, 0xef, 0xef, 0xe0, 0x2e, 0x6f, 0x86, 0xe4, 0xac, 0x65,
		0xa1, 0x02, 0xa4, 0xd9, 0x0b, 0x6e, 0x93, 0xf9, 0x4b, 0x4a, 0xf1, 0x9e, 0x49, 0x9f, 0x63, 0x6e,
		0xbb, 0xd7, 0x54, 0xdb, 0xbb, 0xc2, 0x24, 0x9e, 0xe5, 0x73, 0x90, 0x99, 0x33, 0x0d, 0x07, 0x1b,
		0x4e, 0x93, 0x26, 0xa2, 0xad, 0xba, 0xa9, 0xed, 0x72, 0x0a, 0xec, 0x81, 0x28, 0x5c, 0xb5, 0x2c,
		0x8a, 0x99, 0x52, 0xc8, 0x4f, 0x36, 0x2f, 0x4b, 0xeb, 0x1d, 0x55, 0x74, 0x6e, 0xff, 0x2a, 0xe2,
		0x42, 0x7a, 0x3a, 0xfa, 0x03, 0x09, 0x8e, 0xb7, 0x4e, 0xa8, 0x5d, 0xbc, 0xe7, 0xec, 0x77, 0x3e,
		0x9d, 0x85, 0xcc, 0x1a, 0xbd, 0x47, 0x7c, 0x19, 0xef, 0xa1, 0x02, 0x0c, 0xe0, 0xea, 0xa9, 0xd3,
		0xa7, 0x9f, 0x3c, 0xc7, 0xbc, 0xfd, 0xe2, 0x21, 0x45, 0x34, 0x14, 0xd3, 0x44, 0xaa, 0xd7, 0x3f,
		0x33, 0x29, 0x95, 0xfa, 0x20, 0xe9, 0x34, 0x1b, 0x77, 0xd5, 0x07, 0x5e, 0xed, 0x83, 0xa9, 0x20,
		0x26, 0xcd, 0xc6, 0x57, 0xd5, 0xba, 0x5e, 0x55, 0xfd, 0x1b, 0xde, 0xb9, 0x80, 0x8c, 0x14, 0xa2,
		0xbd, 0x88, 0x85, 0xae, 0x9a, 0x92, 0x7f, 0x5d, 0x82, 0xec, 0x15, 0x41, 0x79, 0x1d, 0xbb, 0xe8,
		0x3c, 0x80, 0x37, 0x92, 0x98, 0x16, 0xf7, 0x4c, 0x47, 0xc7, 0x9a, 0xf6, 0x70, 0x94, 0x00, 0x38,
		0x7a, 0x86, 0x3a, 0x9a, 0x65, 0x3a, 0xfc, 0x7e, 0x4b, 0x0c, 0xaa, 0x07, 0x8c, 0x1e, 0x03, 0x44,
		0x23, 0x58, 0xe5, 0xaa, 0xe9, 0xea, 0x46, 0xad, 0x62, 0x99, 0xd7, 0xf8, 0x65, 0xc0, 0xa4, 0x92,
		0xa3, 0x3d, 0x57, 0x68, 0xc7, 0x1a, 0x69, 0x27, 0x4c, 0x67, 0x3c, 0x2a, 0xa4, 0x76, 0x52, 0xab,
		0x55, 0x1b, 0x3b, 0x0e, 0x0f, 0x52, 0xe2, 0x11, 0x9d, 0x87, 0x01, 0xab, 0xb9, 0x55, 0x11, 0x11,
		0x61, 0xf0, 0xd4, 0xf1, 0x76, 0xf3, 0x5b, 0xd8, 0x9f, 0xcf, 0xf0, 0x7e, 0xab, 0xb9, 0x45, 0xbc,
		0xe1, 0x3e, 0xc8, 0xb6, 0x61, 0x66, 0xf0, 0xaa, 0xcf, 0x07, 0xbd, 0x9e, 0xce, 0x25, 0xa8, 0x58,
		0xb6, 0x6e, 0xda, 0xba, 0xbb, 0x47, 0x4f, 0xa7, 0x24, 0x95, 0x9c, 0xe8, 0x58, 0xe3, 0xed, 0xf2,
		0x2e, 0x8c, 0xac, 0xd3, 0xda, 0xc1, 0xe7, 0xfc, 0xb4, 0xcf, 0x9f, 0x14, 0xcf, 0x5f, 0x47, 0xce,
		0x12, 0x2d, 0x9c, 0x95, 0x9e, 0xef, 0xe8, 0x9d, 0xcf, 0xec, 0xdf, 0x3b, 0xc3, 0xd9, 0xec, 0x4f,
		0x8e, 0x85, 0x26, 0x1f, 0x2f, 0x15, 0x03, 0xe1, 0xa9, 0x57, 0xc7, 0x8c, 0x2b, 0x99, 0x0b, 0xdd,
		0x93, 0x66, 0x21, 0x26, 0x4c, 0x16, 0x62, 0xa7, 0x90, 0x7c, 0x0e, 0x86, 0xd6, 0x54, 0xdb, 0x5d,
		0xc7, 0xee, 0x45, 0xac, 0x56, 0xb1, 0x1d, 0xce, 0xaa, 0x43, 0x22, 0xab, 0x22, 0x48, 0xd1, 0xd4,
		0xc9, 0xb2, 0x0a, 0xfd, 0x2d, 0xef, 0x40, 0x8a, 0x9e, 0x50, 0xf3, 0x32, 0x2e, 0xc7, 0x60, 0x19,
		0x97, 0xc4, 0xca, 0x3d, 0x17, 0x3b, 0x62, 0xc1, 0x46, 0x1f, 0xd0, 0xd3, 0x22, 0x6f, 0x26, 0xbb,
		0xe7, 0x4d, 0xee, 0x88, 0x3c, 0x7b, 0xd6, 0x61, 0xa0, 0x44, 0x42, 0xed, 0xe2, 0xbc, 0xc7, 0x88,
		0xe4, 0x33, 0x82, 0x96, 0x61, 0xc4, 0x52, 0x6d, 0x97, 0x1e, 0xcd, 0xdf, 0xa1, 0x52, 0x70, 0x5f,
		0x9f, 0x6c, 0x9d, 0x79, 0x21, 0x61, 0xf9, 0x28, 0x43, 0x56, 0xb0, 0x51, 0xfe, 0xe3, 0x14, 0xf4,
		0x73, 0x65, 0xbc, 0x19, 0x06, 0xb8, 0x5a, 0xb9, 0x77, 0xde, 0x3b, 0xdd, 0x9a, 0x78, 0xa6, 0xbd,
		0x04, 0xc1, 0xe9, 0x09, 0x1c, 0xf4, 0x10, 0xa4, 0xb5, 0x1d, 0x55, 0x37, 0x2a, 0x7a, 0x55, 0x94,
		0x71, 0xaf, 0xdd, 0x9a, 0x1c, 0x98, 0x23, 0x6d, 0x8b, 0xf3, 0xca, 0x00, 0xed, 0x5c, 0xac, 0x92,
		0x4c, 0xbf, 0x83, 0xf5, 0xda, 0x8e, 0xcb, 0x67, 0x18, 0x7f, 0x42, 0x67, 0x21, 0x45, 0x1c, 0x82,
		0xdf, 0xdc, 0x2a, 0xb4, 0x14, 0xd3, 0xde, 0x8a, 0xa6, 0x94, 0x26, 0x03, 0x7f, 0xf8, 0x0f, 0x27,
		0x25, 0x85, 0x62, 0xa0, 0x39, 0x18, 0xaa, 0xab, 0x8e, 0x5b, 0xa1, 0x19, 0x8a, 0x0c, 0xdf, 0x47,
		0x49, 0x1c, 0x6b, 0x55, 0x08, 0x57, 0x2c, 0x67, 0x7d, 0x90, 0x60, 0xb1, 0xa6, 0x2a, 0x3a, 0x01,
		0x39, 0x4a, 0x44, 0x33, 0x1b, 0x0d, 0xdd, 0x65, 0xb5, 0x53, 0x3f, 0xd5, 0xfb, 0x30, 0x69, 0x9f,
		0xa3, 0xcd, 0xb4, 0x82, 0xba, 0x07, 0x32, 0xf4, 0xaa, 0x08, 0x05, 0x61, 0xc7, 0x22, 0xd3, 0xa4,
		0x81, 0x76, 0x3e, 0x0c, 0x23, 0x7e, 0x7c, 0x64, 0x20, 0x69, 0x46, 0xc5, 0x6f, 0xa6, 0x80, 0x4f,
		0xc0, 0xb8, 0x81, 0xaf, 0xd3, 0x83, 0x9a, 0x21, 0xe8, 0x0c, 0x85, 0x46, 0xa4, 0xef, 0x4a, 0x18,
		0xe3, 0x41, 0x18, 0xd6, 0x84, 0xf2, 0x19, 0x2c, 0x50, 0xd8, 0x21, 0xaf, 0x95, 0x82, 0x1d, 0x83,
		0xb4, 0x6a, 0x59, 0x0c, 0x60, 0x90, 0xc7, 0x47, 0xcb, 0xa2, 0x5d, 0x27, 0x61, 0x94, 0xca, 0x68,
		0x63, 0xa7, 0x59, 0x77, 0x39, 0x91, 0x2c, 0x85, 0x19, 0x21, 0x1d, 0x0a, 0x6b, 0xa7, 0xb0, 0xf7,
		0xc3, 0x10, 0xbe, 0xaa, 0x57, 0xb1, 0xa1, 0x61, 0x06, 0x37, 0x44, 0xe1, 0xb2, 0xa2, 0x91, 0x02,
		0x3d, 0x02, 0x5e, 0xdc, 0xab, 0x88, 0x98, 0x3c, 0xcc, 0xe8, 0x89, 0xf6, 0x59, 0xd6, 0x2c, 0xe7,
		0x21, 0x35, 0xaf, 0xba, 0x2a, 0x29, 0x20, 0xdc, 0xeb, 0x2c, 0xd1, 0x64, 0x15, 0xf2, 0x53, 0x7e,
		0x3d, 0x01, 0xa9, 0x2b, 0xa6, 0x8b, 0xd1, 0x53, 0x81, 0x02, 0x6f, 0xb8, 0x9d, 0x3f, 0xaf, 0xeb,
		0x35, 0x03, 0x57, 0x97, 0x9d, 0x5a, 0xe0, 0xbe, 0xb6, 0xef, 0x4e, 0x89, 0x90, 0x3b, 0x8d, 0x43,
		0x9f, 0x6d, 0x36, 0x8d, 0xaa, 0x38, 0x51, 0x48, 0x1f, 0x50, 0x19, 0xd2, 0x9e, 0x97, 0xa4, 0xe2,
		0xbc, 0x64, 0x84, 0x78, 0x09, 0xf1, 0x61, 0xde, 0xa0, 0x0c, 0x6c, 0x71, 0x67, 0x29, 0x41, 0xc6,
		0x0b, 0x5e, 0xdc, 0xdb, 0x7a, 0x73, 0x58, 0x1f, 0x8d, 0x24, 0x13, 0xcf, 0xf6, 0x9e, 0xf2, 0x98,
		0xc7, 0xe5, 0xbc, 0x0e, 0xae, 0xbd, 0x90, 0x5b, 0xf1, 0xbb, 0xe3, 0x03, 0x54, 0x2e, 0xdf, 0xad,
		0xd8, 0xfd, 0xf1, 0xe3, 0x90, 0x71, 0xf4, 0x9a, 0xa1, 0xba, 0x4d, 0x1b, 0x73, 0xcf, 0xf3, 0x1b,
		0xe4, 0xaf, 0x48, 0xd0, 0xcf, 0x3c, 0x39, 0xa0, 0x37, 0xa9, 0xbd, 0xde, 0x12, 0x9d, 0xf4, 0x96,
		0x3c, 0xb8, 0xde, 0x66, 0x01, 0x3c, 0x66, 0x1c, 0x7e, 0xf7, 0xb7, 0x4d, 0xc5, 0xc0, 0x58, 0x5c,
		0xd7, 0x6b, 0x7c, 0xa2, 0x06, 0x90, 0xe4, 0x3f, 0x90, 0x48, 0x91, 0xca, 0xfb, 0xd1, 0x2c, 0x0c,
		0x09, 0xbe, 0x2a, 0xdb, 0x75, 0xb5, 0xc6, 0x7d, 0xe7, 0xde, 0x8e, 0xcc, 0x5d, 0xa8, 0xab, 0x35,
		0x65, 0x90, 0xf3, 0x43, 0x1e, 0xda, 0xdb, 0x21, 0xd1, 0xc1, 0x0e, 0x21, 0xc3, 0x27, 0x0f, 0x66,
		0xf8, 0x90, 0x89, 0x52, 0x51, 0x13, 0x7d, 0x31, 0x41, 0x17, 0x2b, 0x96, 0xe9, 0xa8, 0xf5, 0x1f,
		0xc5, 0x8c, 0xb8, 0x07, 0x32, 0x96, 0x59, 0xaf, 0xb0, 0x1e, 0x76, 0xd2, 0x36, 0x6d, 0x99, 0x75,
		0xa5, 0xc5, 0xec, 0x7d, 0x77, 0x68, 0xba, 0xf4, 0xdf, 0x01, 0xad, 0x0d, 0x44, 0xb5, 0x66, 0x43,
		0x96, 0xa9, 0x82, 0xe7, 0xb2, 0x27, 0x88, 0x0e, 0x68, 0x72, 0x94, 0x5a, 0x73, 0x2f, 0x63, 0x9b,
		0x41, 0x2a, 0x1c, 0x8e, 0x60, 0xb0, 0xd0, 0xdf, 0x6e, 0x95, 0x1b, 0x74, 0x4b, 0x85, 0xc3, 0xc9,
		0x3f, 0x2f, 0x01, 0x2c, 0x11, 0xcd, 0x52, 0x79, 0x49, 0x16, 0x72, 0x28, 0x0b, 0x95, 0xd0, 0xc8,
		0x13, 0x9d, 0x8c, 0xc6, 0xc7, 0xcf, 0x3a, 0x41, 0xbe, 0xe7, 0x60, 0xc8, 0x77, 0x46, 0x07, 0x0b,
		0x66, 0x26, 0xba, 0x54, 0xd5, 0xeb, 0xd8, 0x55, 0xb2, 0x57, 0x03, 0x4f, 0xf2, 0xbf, 0x94, 0x20,
		0x43, 0x79, 0x5a, 0xc6, 0xae, 0x1a, 0xb2, 0xa1, 0x74, 0x70, 0x1b, 0xde, 0x0b, 0xc0, 0xc8, 0x38,
		0xfa, 0xcb, 0x98, 0x7b, 0x56, 0x86, 0xb6, 0xac, 0xeb, 0x2f, 0x63, 0x74, 0xc6, 0x53, 0x78, 0xb2,
		0xbb, 0xc2, 0x45, 0xd5, 0xcd, 0xd5, 0x7e, 0x14, 0x06, 0xe8, 0x27, 0x70, 0xae, 0x3b, 0xbc, 0x90,
		0xee, 0x37, 0x9a, 0x8d, 0x8d, 0xeb, 0x8e, 0xfc, 0x22, 0x0c, 0x6c, 0x5c, 0x67, 0x7b, 0x1f, 0xf7,
		0x40, 0xc6, 0x36, 0x4d, 0x9e, 0x93, 0x59, 0x2d, 0x94, 0x26, 0x0d, 0x34, 0x05, 0x89, 0xf5, 0x7e,
		0xc2, 0x5f, 0xef, 0xfb, 0x1b, 0x16, 0xc9, 0x9e, 0x36, 0x2c, 0x4e, 0xfe, 0x07, 0x09, 0x06, 0x03,
		0xf1, 0x01, 0x3d, 0x09, 0x87, 0x4b, 0x4b, 0xab, 0x73, 0x97, 0x2b, 0x8b, 0xf3, 0x95, 0x0b, 0x4b,
		0xb3, 0x0b, 0xfe, 0x5d, 0x92, 0xc2, 0x91, 0x1b, 0x37, 0xa7, 0x50, 0x00, 0x76, 0xd3, 0xd8, 0x35,
		0xcc, 0x6b, 0x06, 0x9a, 0x81, 0xf1, 0x30, 0xca, 0x6c, 0x69, 0xbd, 0xbc, 0xb2, 0x91, 0x93, 0x0a,
		0x87, 0x6f, 0xdc, 0x9c, 0x1a, 0x0d, 0x60, 0xcc, 0x6e, 0x39, 0xd8, 0x70, 0x5b, 0x11, 0xe6, 0x56,
		0x97, 0x97, 0x17, 0x37, 0x72, 0x89, 0x16, 0x04, 0x1e, 0xb0, 0x1f, 0x81, 0xd1, 0x30, 0xc2, 0xca,
		0xe2, 0x52, 0x2e, 0x59, 0x40, 0x37, 0x6e, 0x4e, 0x0d, 0x07, 0xa0, 0x57, 0xf4, 0x7a, 0x21, 0xfd,
		0x81, 0xcf, 0x4e, 0x1c, 0xfa, 0xa5, 0x5f, 0x9c, 0x90, 0x88, 0x64, 0x43, 0xa1, 0x18, 0x81, 0x1e,
		0x83, 0xa3, 0xeb, 0x8b, 0x0b, 0x2b, 0xe5, 0xf9, 0xca, 0xf2, 0xfa, 0x42, 0x85, 0x7d, 0x44, 0xc3,
		0x93, 0x6e, 0xe4, 0xc6, 0xcd, 0xa9, 0x41, 0x2e, 0x52, 0x27, 0xe8, 0x35, 0xa5, 0x7c, 0x65, 0x75,
		0xa3, 0x9c, 0x93, 0x18, 0xf4, 0x9a, 0x8d, 0xaf, 0x9a, 0x2e, 0xfb, 0x46, 0xd6, 0x13, 0x70, 0xac,
		0x0d, 0xb4, 0x27, 0xd8, 0xe8, 0x8d, 0x9b, 0x53, 0x43, 0x6b, 0x36, 0x66, 0xf3, 0x87, 0x62, 0x4c,
		0x43, 0xbe, 0x15, 0x63, 0x75, 0x6d, 0x75, 0x7d, 0x76, 0x29, 0x37, 0x55, 0xc8, 0xdd, 0xb8, 0x39,
		0x95, 0x15, 0xc1, 0x90, 0xc0, 0xfb, 0x92, 0xdd, 0xcd, 0x15, 0xcf, 0x9f, 0x3d, 0x0e, 0x0f, 0xf0,
		0x3d, 0x3e, 0xc7, 0x55, 0x77, 0x75, 0xa3, 0xe6, 0xed, 0xa4, 0xf2, 0x67, 0xbe, 0xf2, 0x39, 0xc2,
		0x37, 0x53, 0x45, 0x6b, 0xd7, 0xfd, 0xd4, 0x42, 0xe7, 0x37, 0x47, 0x85, 0x98, 0x97, 0x2b, 0xf1,
		0x4b, 0xa7, 0xce, 0x7b, 0xef, 0x85, 0x98, 0x1d, 0xe1, 0x42, 0xd7, 0xc5, 0x9d, 0xfc, 0x41, 0x09,
		0x86, 0x2f, 0xea, 0x8e, 0x6b, 0xda, 0xba, 0xa6, 0xd6, 0xe9, 0x0d, 0x92, 0x33, 0xbd, 0xc6, 0xd6,
		0xc8, 0x54, 0x7f, 0x0e, 0xfa, 0xaf, 0xaa, 0x75, 0x16, 0xd4, 0x92, 0xf4, 0x8b, 0x17, 0xed, 0xd5,
		0xe7, 0x87, 0x36, 0x41, 0x80, 0xa1, 0xc9, 0xbf, 0x92, 0x80, 0x11, 0x3a, 0x19, 0x1c, 0xf6, 0x89,
		0x23, 0xb2, 0xc6, 0x2a, 0x41, 0xca, 0x56, 0x5d, 0xbe, 0x29, 0x58, 0x9a, 0xe6, 0x3b, 0xbb, 0x0f,
		0xc5, 0xef, 0xd6, 0x4e, 0xcf, 0x63, 0x4d, 0xa1, 0xb8, 0xe8, 0x1d, 0x90, 0x6e, 0xa8, 0xd7, 0x2b,
		0x94, 0x0e, 0x5b, 0xb9, 0xcc, 0xee, 0x8f, 0xce, 0xed, 0x5b, 0x93, 0x23, 0x7b, 0x6a, 0xa3, 0x5e,
		0x94, 0x05, 0x1d, 0x59, 0x19, 0x68, 0xa8, 0xd7, 0x09, 0x8b, 0xc8, 0x82, 0x11, 0xd2, 0xaa, 0xed,
		0xa8, 0x46, 0x0d, 0xb3, 0x41, 0xe8, 0x16, 0x67, 0xe9, 0xe2, 0xbe, 0x07, 0x39, 0xe2, 0x0f, 0x12,
		0x20, 0x27, 0x2b, 0x43, 0x0d, 0xf5, 0xfa, 0x1c, 0x6d, 0x20, 0x23, 0x16, 0xd3, 0x1f, 0xfb, 0xf4,
		0xe4, 0x21, 0xba, 0x5b, 0xfe, 0x4d, 0x09, 0xc0, 0xd7, 0x18, 0x7a, 0x07, 0xe4, 0x34, 0xef, 0x89,
		0xe2, 0x3a, 0xdc, 0x86, 0x0f, 0x77, 0xb2, 0x45, 0x44, 0xdf, 0x2c, 0x37, 0x7f, 0xe3, 0xd6, 0xa4,
		0xa4, 0x8c, 0x68, 0x11, 0x53, 0xbc, 0x1d, 0x06, 0x9b, 0x56, 0x55, 0x75, 0x71, 0x85, 0xae, 0xe3,
		0x12, 0xb1, 0x79, 0x7e, 0x82, 0xd0, 0xba, 0x7d, 0x6b, 0x12, 0x31, 0xb1, 0x02, 0xc8, 0x32, 0xcd,
		0xfe, 0xc0, 0x5a, 0x08, 0x42, 0x40, 0xa6, 0xaf, 0x49, 0x30, 0x38, 0x1f, 0x38, 0xc9, 0x95, 0x87,
		0x81, 0x86, 0x69, 0xe8, 0xbb, 0xdc, 0x1f, 0x33, 0x8a, 0x78, 0x44, 0x05, 0x48, 0xb3, 0x4b, 0x75,
		0xee, 0x9e, 0xd8, 0xea, 0x14, 0xcf, 0x04, 0xeb, 0x1a, 0xde, 0x72, 0x74, 0x61, 0x0d, 0x45, 0x3c,
		0xa2, 0x0b, 0x90, 0x73, 0xb0, 0xd6, 0xb4, 0x75, 0x77, 0xaf, 0xa2, 0x99, 0x86, 0xab, 0x6a, 0x2e,
		0xbb, 0x9e, 0x55, 0xba, 0xe7, 0xf6, 0xad, 0xc9, 0xa3, 0x8c, 0xd7, 0x28, 0x84, 0xac, 0x8c, 0x88,
		0xa6, 0x39, 0xd6, 0x42, 0x46, 0xa8, 0x62, 0x57, 0xd5, 0xeb, 0x4e, 0x9e, 0xbd, 0xf8, 0x11, 0x8f,
		0x01, 0x59, 0xbe, 0x30, 0x10, 0xdc, 0xd8, 0xba, 0x00, 0x39, 0xd3, 0xc2, 0x76, 0xa8, 0x10, 0x95,
		0xa2, 0x23, 0x47, 0x21, 0x64, 0x65, 0x44, 0x34, 0x89, 0x22, 0xd5, 0x25, 0x66, 0x16, 0x0b, 0x45,
		0xab, 0xb9, 0xe5, 0xef, 0x87, 0x8d, 0xb7, 0x58, 0x63, 0xd6, 0xd8, 0x2b, 0x3d, 0xe5, 0x53, 0x8f,
		0xe2, 0xc9, 0x5f, 0xff, 0xd2, 0xe3, 0xe3, 0xdc, 0x35, 0xfc, 0xfd, 0xa9, 0xcb, 0x78, 0x8f, 0x98,
		0x9f, 0x83, 0xae, 0x51, 0x48, 0x52, 0x76, 0xbe, 0xa8, 0xea, 0x75, 0x71, 0xcd, 0x58, 0xe1, 0x4f,
		0xa8, 0x08, 0xfd, 0x8e, 0xab, 0xba, 0x4d, 0x87, 0x7f, 0xd4, 0x4b, 0xee, 0xe4, 0x6a, 0x25, 0xd3,
		0xa8, 0xae, 0x53, 0x48, 0x85, 0x63, 0xa0, 0x0b, 0xd0, 0xef, 0x9a, 0xbb, 0xd8, 0xe0, 0x2a, 0xdc,
		0xd7, 0xfc, 0xa6, 0xef, 0xa1, 0x18, 0x36, 0xd1, 0x48, 0x15, 0xd7, 0x71, 0x8d, 0x95, 0x55, 0x3b,
		0x2a, 0x59, 0x7d, 0xd0, 0x6f, 0x7b, 0x95, 0x16, 0xf7, 0x3d, 0x09, 0xb9, 0xa6, 0xa2, 0xf4, 0x64,
		0x65, 0xc4, 0x6b, 0x5a, 0xa7, 0x2d, 0xe8, 0x72, 0xe8, 0xc8, 0x21, 0xff, 0x00, 0xde, 0xfd, 0x9d,
		0xc4, 0x0f, 0xf8, 0xb4, 0xd8, 0x9f, 0x08, 0x1e, 0x58, 0xbc, 0x00, 0xb9, 0xa6, 0xb1, 0x65, 0x1a,
		0xf4, 0x2e, 0x20, 0xaf, 0xef, 0xc9, 0xfa, 0x2e, 0x19, 0x74, 0x8e, 0x28, 0x84, 0xac, 0x8c, 0x78,
		0x4d, 0x17, 0xd9, 0x2a, 0xa0, 0x0a, 0xc3, 0x3e, 0x14, 0x9d, 0xa8, 0x99, 0xd8, 0x89, 0x7a, 0x1f,
		0x9f, 0xa8, 0x87, 0xa3, 0xa3, 0xf8, 0x73, 0x75, 0xc8, 0x6b, 0x24, 0x68, 0xe8, 0x22, 0x80, 0x1f,
		0x1e, 0xe8, 0x3e, 0xc5, 0x60, 0x67, 0xc3, 0xfb, 0x31, 0x46, 0xac, 0xf7, 0x7c, 0x5c, 0xf4, 0x2e,
		0x18, 0x6b, 0xe8, 0x46, 0xc5, 0xc1, 0xf5, 0xed, 0x0a, 0x57, 0x30, 0x21, 0x49, 0xbf, 0xe5, 0x52,
		0x5a, 0xda, 0x9f, 0x3f, 0xdc, 0xbe, 0x35, 0x59, 0xe0, 0x21, 0xb4, 0x95, 0xa4, 0xac, 0x8c, 0x36,
		0x74, 0x63, 0x1d, 0xd7, 0xb7, 0xe7, 0xbd, 0xb6, 0x62, 0xf6, 0x03, 0x9f, 0x9e, 0x3c, 0xc4, 0xa7,
		0xeb, 0x21, 0xf9, 0x0c, 0xdd, 0x3b, 0xe7, 0xd3, 0x0c, 0x3b, 0x64, 0x4d, 0xa2, 0x8a, 0x07, 0xba,
		0xa3, 0x91, 0x51, 0xfc, 0x06, 0x36, 0xcd, 0x5f, 0xf9, 0x4f, 0x53, 0x92, 0xfc, 0x05, 0x09, 0xfa,
		0xe7, 0xaf, 0xac, 0xa9, 0xba, 0x8d, 0x16, 0x61, 0xd4, 0xf7, 0x9c, 0xf0, 0x24, 0x3f, 0x7e, 0xfb,
		0xd6, 0x64, 0x3e, 0xea, 0x5c, 0xde, 0x2c, 0xf7, 0x1d, 0x58, 0x4c, 0xf3, 0xc5, 0x4e, 0x0b, 0xd7,
		0x10, 0xa9, 0x16, 0x10, 0xb9, 0x75, 0x59, 0x1b, 0x11, 0xb3, 0x0c, 0x03, 0x8c, 0x5b, 0x07, 0x15,
		0xa1, 0xcf, 0x22, 0x3f, 0xf8, 0x8b, 0x81, 0x89, 0x8e, 0xce, 0x4b, 0xe1, 0xbd, 0x8d, 0x4c, 0x82,
		0x22, 0x7f, 0x24, 0x01, 0x30, 0x7f, 0xe5, 0xca, 0x86, 0xad, 0x5b, 0x75, 0xec, 0xde, 0x49, 0xc9,
		0x37, 0xe0, 0x70, 0x60, 0x95, 0x64, 0x6b, 0x11, 0xe9, 0xa7, 0x6e, 0xdf, 0x9a, 0x3c, 0x1e, 0x95,
		0x3e, 0x00, 0x26, 0x2b, 0x63, 0xfe, 0x7a, 0xc9, 0xd6, 0xda, 0x52, 0xad, 0x3a, 0xae, 0x47, 0x35,
		0xd9, 0x99, 0x6a, 0x00, 0x2c, 0x48, 0x75, 0xde, 0x71, 0xdb, 0xab, 0x76, 0x1d, 0x06, 0x7d, 0x95,
		0x38, 0x68, 0x1e, 0xd2, 0x2e, 0xff, 0xcd, 0x35, 0x2c, 0x77, 0xd6, 0xb0, 0x40, 0xe3, 0x5a, 0xf6,
		0x30, 0xe5, 0xbf, 0x90, 0x00, 0x7c, 0x9f, 0xfd, 0xf1, 0x74, 0x31, 0x12, 0xca, 0x79, 0xe0, 0x4d,
		0x1e, 0xa8, 0x54, 0xe3, 0xd8, 0x11, 0x7d, 0xfe, 0x74, 0x02, 0xc6, 0x36, 0x45, 0xe4, 0xf9, 0xb1,
		0xd7, 0xc1, 0x1a, 0x0c, 0x60, 0xc3, 0xb5, 0x75, 0xaa, 0x04, 0x62, 0xed, 0x27, 0x3a, 0x59, 0xbb,
		0x8d, 0x4c, 0xf4, 0x63, 0x36, 0x62, 0xd3, 0x9d, 0x93, 0x89, 0x68, 0xe3, 0x43, 0x49, 0xc8, 0x77,
		0xc2, 0x44, 0x73, 0x30, 0xa2, 0xd9, 0x98, 0x36, 0x54, 0x82, 0x3b, 0x7f, 0xa5, 0x82, 0x5f, 0x59,
		0x46, 0x00, 0x64, 0x65, 0x58, 0xb4, 0xf0, 0xec, 0x51, 0x03, 0x52, 0xf6, 0x11, 0xb7, 0x23, 0x50,
		0x3d, 0xd6, 0x79, 0x32, 0x4f, 0x1f, 0x62, 0x90, 0x30, 0x01, 0x96, 0x3f, 0x86, 0xfd, 0x56, 0x9a,
		0x40, 0x5e, 0x82, 0x11, 0xdd, 0xd0, 0x5d, 0x5d, 0xad, 0x57, 0xb6, 0xd4, 0xba, 0x6a, 0x68, 0x07,
		0xa9, 0x9a, 0x59, 0xc8, 0xe7, 0xc3, 0x46, 0xc8, 0xc9, 0xca, 0x30, 0x6f, 0x29, 0xb1, 0x06, 0x74,
		0x11, 0x06, 0xc4, 0x50, 0xa9, 0x03, 0x55, 0x1b, 0x02, 0x3d, 0x50, 0xe0, 0xfd, 0x4c, 0x12, 0x46,
		0x15, 0x5c, 0xfd, 0xff, 0xa6, 0xd8, 0x9f, 0x29, 0x96, 0x01, 0xd8, 0x74, 0x27, 0x01, 0xf6, 0x00,
		0xd6, 0x20, 0x01, 0x23, 0xc3, 0x28, 0xcc, 0x3b, 0x6e, 0xc0, 0x1e, 0xb7, 0x12, 0x90, 0x0d, 0xda,
		0xe3, 0xaf, 0x68, 0x56, 0x42, 0x8b, 0x7e, 0x24, 0x4a, 0xf1, 0x6f, 0x80, 0x76, 0x88, 0x44, 0x2d,
		0xde, 0xdb, 0x3d, 0x04, 0xfd, 0xcf, 0x04, 0xf4, 0xaf, 0xa9, 0xb6, 0xda, 0x70, 0x90, 0xd6, 0x52,
		0x69, 0x8a, 0xed, 0xc7, 0x96, 0x0f, 0x38, 0xf3, 0xdd, 0x8e, 0x98, 0x42, 0xf3, 0x63, 0x6d, 0x0a,
		0xcd, 0x9f, 0x80, 0x61, 0xb2, 0x1c, 0x0e, 0x1c, 0x61, 0x20, 0xda, 0x1e, 0x2a, 0x1d, 0xf3, 0xa9,
		0x84, 0xfb, 0xd9, 0x6a, 0xf9, 0x4a, 0xf0, 0x0c, 0xc3, 0x20, 0x81, 0xf0, 0x03, 0x33, 0x41, 0x3f,
		0xe2, 0x2f, 0x4b, 0x03, 0x9d, 0xb2, 0x02, 0x0d, 0xf5, 0x7a, 0x99, 0x3d, 0xa0, 0x25, 0x40, 0x3b,
		0xde, 0xce, 0x48, 0xc5, 0x57, 0x27, 0xc1, 0xbf, 0xf7, 0xf6, 0xad, 0xc9, 0x63, 0x0c, 0xbf, 0x15,
		0x46, 0x56, 0x46, 0xfd, 0x46, 0x41, 0xed, 0x69, 0x00, 0x22, 0x57, 0x85, 0x1d, 0x8f, 0x63, 0xcb,
		0x9d, 0xc3, 0xb7, 0x6f, 0x4d, 0x8e, 0x32, 0x2a, 0x7e, 0x9f, 0xac, 0x64, 0xc8, 0xc3, 0x3c, 0xf9,
		0x1d, 0xf0, 0xec, 0xcf, 0x4a, 0x80, 0xfc, 0x90, 0xaf, 0x60, 0xc7, 0x22, 0xeb, 0x33, 0x52, 0x88,
		0x07, 0xaa, 0x66, 0xa9, 0x7b, 0x21, 0xee, 0xe3, 0x8b, 0x42, 0x3c, 0x30, 0x53, 0xce, 0xf9, 0xe1,
		0x31, 0xc1, 0xed, 0xd8, 0xe6, 0x2c, 0xe1, 0xf4, 0x9c, 0xa9, 0x0b, 0xec, 0x96, 0x78, 0x78, 0x48,
		0xfe, 0x37, 0x12, 0x1c, 0x6b, 0xf1, 0x28, 0x8f, 0xd9, 0xbf, 0x06, 0xc8, 0x0e, 0x74, 0xf2, 0xef,
		0xb9, 0x31, 0xa6, 0xf7, 0xed, 0xa0, 0xa3, 0x76, 0x4b, 0xdc, 0xbd, 0x73, 0x11, 0x9e, 0x1d, 0x46,
		0xfc, 0x17, 0x12, 0x8c, 0x07, 0x87, 0xf7, 0x04, 0x59, 0x81, 0x6c, 0x70, 0x74, 0x2e, 0xc2, 0x03,
		0xbd, 0x88, 0xc0, 0xb9, 0x0f, 0xe1, 0xa3, 0xe7, 0xfd, 0xe9, 0xca, 0xf6, 0xce, 0x9e, 0xec, 0x59,
		0x1b, 0x82, 0xa7, 0xe8, 0xb4, 0x4d, 0x51, 0x7b, 0xfc, 0x1f, 0x09, 0x52, 0x6b, 0xa6, 0x59, 0x47,
		0x26, 0x8c, 0x1a, 0xa6, 0x5b, 0x21, 0x9e, 0x85, 0xab, 0x15, 0xbe, 0xe8, 0x66, 0x71, 0x70, 0x6e,
		0x7f, 0x4a, 0xfa, 0xce, 0xad, 0xc9, 0x56, 0x52, 0xca, 0x88, 0x61, 0xba, 0x25, 0xda, 0xb2, 0xc1,
		0x96, 0xe4, 0xef, 0x82, 0xa1, 0xf0, 0x60, 0x2c, 0x4a, 0xbe, 0xb0, 0xef, 0xc1, 0xc2, 0x64, 0x6e,
		0xdf, 0x9a, 0x1c, 0xf7, 0x67, 0x8c, 0xd7, 0x2c, 0x2b, 0xd9, 0xad, 0xc0, 0xe8, 0xec, 0x78, 0xd7,
		0xf7, 0x3e, 0x3d, 0x29, 0x9d, 0xfc, 0xb2, 0x04, 0xe0, 0xef, 0x3c, 0xa0, 0xc7, 0xe0, 0x68, 0x69,
		0x75, 0x65, 0xbe, 0xb2, 0xbe, 0x31, 0xbb, 0xb1, 0xb9, 0x5e, 0xd9, 0x5c, 0x59, 0x5f, 0x2b, 0xcf,
		0x2d, 0x5e, 0x58, 0x2c, 0xcf, 0xfb, 0xdb, 0xe3, 0x8e, 0x85, 0x35, 0x7d, 0x5b, 0xc7, 0x55, 0xf4,
		0x10, 0x8c, 0x87, 0xa1, 0xc9, 0x53, 0x79, 0x3e, 0x27, 0x15, 0xb2, 0x37, 0x6e, 0x4e, 0xa5, 0x59,
		0x2d, 0x86, 0xab, 0xe8, 0x04, 0x1c, 0x6e, 0x85, 0x5b, 0x5c, 0x59, 0xc8, 0x25, 0x0a, 0x43, 0x37,
		0x6e, 0x4e, 0x65, 0xbc, 0xa2, 0x0d, 0xc9, 0x80, 0x82, 0x90, 0x9c, 0x5e, 0xb2, 0x00, 0x37, 0x6e,
		0x4e, 0xf5, 0x33, 0x05, 0x16, 0x52, 0x1f, 0xf8, 0xec, 0xc4, 0xa1, 0xd2, 0x85, 0x8e, 0x1b, 0xe0,
		0x8f, 0x75, 0xd5, 0xdd, 0x75, 0x6f, 0x53, 0x3b, 0xbc, 0xeb, 0xfd, 0xa7, 0x03, 0x1d, 0x77, 0xbd,
		0x6b, 0xd8, 0xc0, 0x8e, 0xee, 0x1c, 0x68, 0xd7, 0xbb, 0xa7, 0x9d, 0x74, 0xf9, 0x77, 0xfb, 0x20,
		0xbb, 0xc0, 0x46, 0x21, 0x86, 0xc0, 0xe8, 0x4d, 0xd0, 0x6f, 0xd1, 0x34, 0xe2, 0xbd, 0x46, 0xeb,
		0xe0, 0xf0, 0x2c, 0xd9, 0x78, 0x67, 0xb9, 0x58, 0xea, 0x71, 0xf8, 0x61, 0x0e, 0x76, 0xc6, 0xcc,
		0x3f, 0x35, 0x95, 0xdd, 0xd7, 0x7e, 0x0f, 0xab, 0x59, 0xf8, 0xd6, 0x4a, 0x94, 0x9e, 0xcc, 0xce,
		0x85, 0x6c, 0x90, 0x16, 0x76, 0x3a, 0xec, 0x7d, 0x12, 0x1c, 0xa6, 0x50, 0x7e, 0x22, 0xa6, 0x90,
		0xa2, 0xd8, 0x3f, 0xd9, 0x49, 0x84, 0x25, 0xd5, 0xf1, 0xcf, 0x7a, 0xb0, 0xf3, 0x5c, 0x0f, 0xf0,
		0x44, 0x78, 0x3c, 0x30, 0x78, 0x94, 0xac, 0xac, 0x8c, 0xd5, 0x5b, 0x30, 0x1d, 0xb4, 0x10, 0x3a,
		0xd0, 0x97, 0xda, 0xdf, 0x56, 0x7b, 0xf0, 0x70, 0xdf, 0x25, 0x18, 0xf4, 0x63, 0x89, 0xc3, 0xff,
		0xaf, 0x44, 0xef, 0xb9, 0x23, 0x88, 0x8c, 0xde, 0x2f, 0xc1, 0x61, 0x3f, 0x9b, 0x07, 0xc9, 0xb2,
		0xff, 0xbf, 0xf1, 0xe8, 0x3e, 0x16, 0x42, 0x51, 0xe5, 0xb4, 0xa5, 0x2b, 0x2b, 0xe3, 0xcd, 0x56,
		0x54, 0xb2, 0x04, 0x1b, 0x0a, 0x46, 0x56, 0x27, 0x2f, 0x3e, 0x45, 0xd7, 0x7b, 0x68, 0x0e, 0x13,
		0x60, 0xff, 0x13, 0xc0, 0x32, 0x6d, 0x17, 0x57, 0xe9, 0x86, 0x5c, 0x5a, 0xf1, 0x9e, 0xe5, 0x15,
		0x40, 0xad, 0xc6, 0x8d, 0x1e, 0x60, 0xcc, 0xf8, 0x07, 0x18, 0xc7, 0xa1, 0x2f, 0x78, 0xc4, 0x8f,
		0x3d, 0x14, 0xd3, 0x1f, 0xe0, 0xe9, 0xf3, 0x8e, 0xcf, 0xf9, 0x7f, 0x95, 0x80, 0x93, 0xc1, 0xd7,
		0x43, 0x2f, 0x35, 0xb1, 0xbd, 0xe7, 0x4d, 0x51, 0x4b, 0xad, 0xe9, 0x46, 0xf0, 0x8e, 0xcf, 0xb1,
		0x60, 0xc2, 0xa7, 0xb0, 0x42, 0x4f, 0xb2, 0x01, 0x83, 0x6b, 0x6a, 0x0d, 0x2b, 0xf8, 0xa5, 0x26,
		0x76, 0xdc, 0x36, 0x87, 0xc8, 0x8f, 0x40, 0xbf, 0xb9, 0xbd, 0x2d, 0x5e, 0x69, 0xa7, 0x14, 0xfe,
		0x44, 0x44, 0xae, 0xeb, 0x0d, 0x9d, 0x9d, 0x06, 0x4b, 0x29, 0xec, 0x01, 0x4d, 0xc2, 0xa0, 0x66,
		0x36, 0x0d, 0x3e, 0xe3, 0xf2, 0x29, 0xf1, 0x81, 0x87, 0xa6, 0xc1, 0x66, 0x9c, 0xfc, 0x1c, 0x64,
		0xd9, 0x78, 0x3c, 0xe3, 0x1e, 0x83, 0x34, 0x3d, 0x4e, 0xe5, 0x8f, 0x3a, 0x40, 0x9e, 0x2f, 0xb3,
		0x03, 0xe7, 0x8c, 0x0a, 0x1b, 0x98, 0x3d, 0x94, 0x4a, 0x1d, 0x55, 0x79, 0x22, 0x3e, 0x34, 0x30,
		0x45, 0x79, 0x6a, 0xfc, 0xad, 0x3e, 0x38, 0xcc, 0xdf, 0xd0, 0xa9, 0x96, 0x3e, 0xb3, 0xe3, 0xba,
		0xe2, 0x16, 0x10, 0xf0, 0x52, 0x57, 0xb5, 0x74, 0x79, 0x0f, 0x52, 0x17, 0x5d, 0xd7, 0x42, 0x27,
		0xa1, 0xcf, 0x6e, 0xd6, 0xb1, 0xd8, 0xf1, 0xf1, 0xf6, 0xe4, 0x55, 0x4b, 0x9f, 0x26, 0x00, 0x4a,
		0xb3, 0x8e, 0x15, 0x06, 0x82, 0xca, 0x30, 0xb9, 0xdd, 0xac, 0xd7, 0xf7, 0x2a, 0x55, 0x4c, 0xff,
		0xe7, 0x8e, 0xf7, 0x79, 0x7b, 0x7c, 0xdd, 0x52, 0xc5, 0x37, 0xf2, 0x88, 0x6e, 0x8e, 0x53, 0xb0,
		0x79, 0x0a, 0x25, 0x3e, 0x6d, 0x5f, 0x16, 0x30, 0xf2, 0xef, 0x27, 0x20, 0x2d, 0x48, 0xd3, 0x13,
		0xe0, 0xb8, 0x8e, 0x35, 0xd7, 0x14, 0x6f, 0x4c, 0xbc, 0x67, 0x84, 0x20, 0x59, 0xe3, 0x26, 0xca,
		0x5c, 0x3c, 0xa4, 0x90, 0x07, 0xd2, 0xe6, 0x9d, 0xcb, 0x27, 0x6d, 0x56, 0x93, 0x58, 0x2d, 0x65,
		0x99, 0x62, 0x69, 0x76, 0xf1, 0x90, 0x42, 0x9f, 0x50, 0x1e, 0xfa, 0xc9, 0xcc, 0x70, 0xd9, 0x87,
		0x07, 0x49, 0x3b, 0x7f, 0x46, 0x47, 0xa0, 0xcf, 0x52, 0x5d, 0x8d, 0x1d, 0xa9, 0x23, 0x1d, 0xec,
		0x11, 0x3d, 0x03, 0xfd, 0xec, 0xc2, 0x67, 0xf4, 0x1f, 0x5a, 0x10, 0x65, 0xb0, 0x2f, 0x6b, 0x11,
		0xbe, 0xd7, 0x54, 0xd7, 0xc5, 0xb6, 0x41, 0x08, 0x32, 0x70, 0x84, 0x20, 0xb5, 0x65, 0x56, 0xf7,
		0xf8, 0x3f, 0xd9, 0xa0, 0xbf, 0xf9, 0xe7, 0xff, 0xa9, 0x3f, 0x54, 0x68, 0x27, 0xfb, 0xdf, 0x42,
		0x59, 0xd1, 0x58, 0x22, 0x40, 0x65, 0x18, 0x53, 0xab, 0x55, 0x9d, 0x78, 0x35, 0x59, 0x81, 0xea,
		0x34, 0x42, 0x38, 0xf4, 0x3f, 0x47, 0x75, 0xb2, 0x05, 0xf2, 0x11, 0x4a, 0x1c, 0xbe, 0x94, 0x81,
		0x01, 0x8b, 0x31, 0x25, 0x9f, 0x87, 0xd1, 0x16, 0x4e, 0x09, 0x7f, 0xbb, 0xba, 0x51, 0x15, 0x97,
		0x15, 0xc8, 0x6f, 0xd2, 0x46, 0xbf, 0x8e, 0xc7, 0xde, 0x45, 0xd1, 0xdf, 0xa5, 0xf7, 0x74, 0xbe,
		0xd8, 0x35, 0x1c, 0xb8, 0xd8, 0xa5, 0x5a, 0x7a, 0x29, 0x43, 0xe9, 0xf3, 0xeb, 0x5c, 0xb3, 0xbc,
		0x83, 0x5d, 0xe5, 0x9a, 0x36, 0xed, 0x1a, 0xc9, 0xd2, 0x22, 0xfb, 0x92, 0x2e, 0xd5, 0xd2, 0x1d,
		0xea, 0x8e, 0xfe, 0xd7, 0xfa, 0x9c, 0xf3, 0x81, 0xdf, 0xf4, 0x92, 0x57, 0x6a, 0x61, 0x76, 0x6d,
		0xd1, 0xf3, 0xe3, 0xdf, 0x4c, 0xc0, 0xf1, 0x80, 0x1f, 0x07, 0x80, 0x5b, 0xdd, 0xb9, 0xd0, 0xde,
		0xe3, 0x7b, 0xb8, 0xdc, 0x75, 0x19, 0x52, 0x04, 0x1e, 0xc5, 0x7c, 0x9c, 0x3f, 0xff, 0xab, 0x5f,
		0xff, 0xe7, 0x72, 0xf8, 0xad, 0x55, 0xc8, 0x2a, 0x94, 0x48, 0xe9, 0xfd, 0xbd, 0xeb, 0x2f, 0xe7,
		0x7f, 0xa8, 0xd0, 0xb9, 0x73, 0x6a, 0x8c, 0xea, 0xf0, 0xdb, 0xa7, 0x41, 0xee, 0x50, 0xf2, 0xb0,
		0x88, 0xd9, 0xbd, 0x88, 0xda, 0x47, 0x38, 0xee, 0x74, 0xfe, 0xbf, 0x9b, 0x05, 0x7b, 0x2c, 0xc7,
		0xae, 0xc3, 0x91, 0xe7, 0xc9, 0xd8, 0xfe, 0x32, 0x59, 0x04, 0xf6, 0x23, 0xde, 0xdb, 0x3c, 0x89,
		0xff, 0xe3, 0x2e, 0xf1, 0xa6, 0x0e, 0x7c, 0xfe, 0xf8, 0x02, 0xf1, 0xa1, 0xe9, 0x8e, 0xf9, 0x62,
		0x3a, 0x90, 0x2c, 0x94, 0x00, 0xa6, 0xfc, 0xcb, 0x12, 0x1c, 0x6d, 0x19, 0x9a, 0xc7, 0xf8, 0x85,
		0x36, 0x57, 0x15, 0x0e, 0x54, 0xd9, 0x2c, 0xb4, 0x61, 0xf6, 0xe1, 0x58, 0x66, 0x19, 0x17, 0x21,
		0x6e, 0x9f, 0x85, 0xc3, 0x61, 0x66, 0x85, 0x9a, 0x1e, 0x84, 0xe1, 0xf0, 0x8e, 0x30, 0x57, 0xd7,
		0x50, 0x68, 0x4f, 0x58, 0xae, 0x44, 0xf5, 0xec, 0xc9, 0x5a, 0x86, 0x8c, 0x07, 0xca, 0x4b, 0xe0,
		0x9e, 0x45, 0xf5, 0x31, 0xe5, 0x8f, 0x48, 0x30, 0x15, 0x1e, 0x21, 0x50, 0x0c, 0xed, 0x8f, 0xd9,
		0x3b, 0x66, 0xe2, 0xd7, 0x25, 0xb8, 0xaf, 0x0b, 0x4f, 0x5c, 0x01, 0x2f, 0xc3, 0x78, 0x60, 0x27,
		0x40, 0x84, 0x70, 0x61, 0xf6, 0x93, 0xf1, 0x65, 0xa8, 0xb7, 0xf0, 0xbd, 0x87, 0x28, 0xe5, 0xf3,
		0x7f, 0x38, 0x39, 0xd6, 0xda, 0xe7, 0x28, 0x63, 0xad, 0xab, 0xf7, 0x3b, 0xe8, 0x1f, 0xaf, 0x4a,
		0xf0, 0x48, 0x58, 0xd4, 0x36, 0xf5, 0xec, 0x1b, 0x65, 0x87, 0xff, 0x28, 0xc1, 0xc9, 0x5e, 0x98,
		0xe3, 0x06, 0xd9, 0x82, 0x31, 0xbf, 0xd2, 0x8e, 0xda, 0x63, 0x5f, 0xf5, 0x3b, 0xf3, 0x52, 0xe4,
		0x51, 0xbb, 0x0b, 0x8a, 0xb7, 0xf8, 0xc4, 0x0a, 0x9a, 0xdc, 0x53, 0x72, 0x78, 0x37, 0x57, 0x28,
		0x39, 0xb4, 0x9f, 0xdb, 0xc6, 0x16, 0x89, 0x36, 0xb6, 0xf0, 0x4b, 0x73, 0xf9, 0x2a, 0x8f, 0x5b,
		0x6d, 0xf6, 0xe0, 0xde, 0x0e, 0x63, 0x6d, 0x5c, 0x99, 0xcf, 0xea, 0x7d, 0x78, 0xb2, 0x82, 0x5a,
		0x9d, 0x55, 0xde, 0x83, 0x49, 0x3a, 0x6e, 0x1b, 0x45, 0xdf, 0x6d, 0x91, 0x1b, 0x3c, 0xb6, 0xb4,
		0x1d, 0x9a, 0xcb, 0xbe, 0x08, 0xfd, 0xcc, 0xce, 0x5c, 0xdc, 0x03, 0x38, 0x0a, 0x27, 0x20, 0x7f,
		0x42, 0xc4, 0xb2, 0x79, 0xc1, 0x76, 0xfb, 0x39, 0xd4, 0x8b, 0xac, 0x77, 0x68, 0x0e, 0x05, 0x94,
		0xf1, 0x4d, 0x11, 0xd5, 0xda, 0x73, 0xc7, 0xd5, 0xa1, 0xdd, 0xb1, 0xa8, 0xc6, 0x74, 0x73, 0x77,
		0xc3, 0xd7, 0x2f, 0x8a, 0xf0, 0xe5, 0xc9, 0x14, 0x13, 0xbe, 0xde, 0x18, 0xd5, 0x7b, 0x81, 0x2c,
		0x86, 0xcd, 0xbf, 0x8c, 0x81, 0xec, 0x7b, 0x12, 0x1c, 0xa3, 0xb2, 0x05, 0x37, 0x22, 0xf6, 0xab,
		0xf2, 0xc7, 0x00, 0x39, 0xb6, 0x56, 0x69, 0x3b, 0xbb, 0x73, 0x8e, 0xad, 0x5d, 0x09, 0xe5, 0x97,
		0xc7, 0x00, 0x55, 0x43, 0xdb, 0x4d, 0x14, 0x9a, 0x9d, 0x92, 0xcb, 0x55, 0x03, 0xbb, 0x19, 0x6d,
		0xcc, 0x99, 0xba, 0x03, 0xe6, 0xfc, 0x86, 0x04, 0x85, 0x76, 0x22, 0x73, 0xf3, 0xe9, 0x70, 0x24,
		0xf4, 0x92, 0x20, 0x6a, 0xc1, 0xc7, 0x7a, 0xd9, 0xca, 0x89, 0x4c, 0xa3, 0xc3, 0x36, 0xbe, 0xdb,
		0x75, 0xc0, 0x64, 0xd8, 0x43, 0x5b, 0x2b, 0xeb, 0x37, 0x6c, 0xfa, 0x7c, 0xa9, 0x25, 0xae, 0xfe,
		0xa5, 0xa8, 0xbd, 0xaf, 0xc3, 0x44, 0x07, 0xae, 0xef, 0x76, 0xde, 0xdb, 0xe9, 0x68, 0xcc, 0x3b,
		0x5d, 0xbe, 0x3f, 0xcd, 0x67, 0x42, 0xf8, 0x04, 0x76, 0x60, 0x2d, 0xd6, 0xee, 0x0a, 0x97, 0xfc,
		0x56, 0xb8, 0xa7, 0x2d, 0x16, 0xe7, 0xad, 0x08, 0xa9, 0x1d, 0xdd, 0x71, 0x39, 0x5b, 0x0f, 0x75,
		0x62, 0x2b, 0x82, 0x4d, 0x71, 0x64, 0x04, 0x39, 0x4a, 0x7a, 0xcd, 0x34, 0xeb, 0x9c, 0x0d, 0xf9,
		0x32, 0x8c, 0x06, 0xda, 0xf8, 0x20, 0x67, 0x20, 0x65, 0x99, 0xfc, 0xf3, 0x03, 0x83, 0xa7, 0x8e,
		0x77, 0xdc, 0xbd, 0x37, 0xcd, 0x3a, 0x17, 0x9b, 0xc2, 0xcb, 0xe3, 0x80, 0x18, 0x31, 0xba, 0x91,
		0x2f, 0x86, 0x58, 0x87, 0xb1, 0x50, 0x2b, 0x1f, 0xe4, 0x87, 0x7a, 0x49, 0x70, 0xea, 0x3b, 0x87,
		0xa1, 0x8f, 0x52, 0x45, 0x1f, 0x97, 0x00, 0x02, 0x6f, 0x84, 0xa7, 0x3b, 0x91, 0x69, 0xbf, 0x26,
		0x2e, 0xcc, 0xf4, 0x0c, 0xcf, 0x6b, 0xb6, 0x93, 0xef, 0xf9, 0x77, 0xdf, 0xfe, 0x68, 0xe2, 0x01,
		0x24, 0xcf, 0x74, 0x58, 0x8d, 0x07, 0xe6, 0xcb, 0xe7, 0x42, 0x77, 0xdf, 0x1f, 0xef, 0x6d, 0x28,
		0xc1, 0xd9, 0x74, 0xaf, 0xe0, 0x9c, 0xb1, 0xf3, 0x94, 0xb1, 0xd3, 0xe8, 0xa9, 0x78, 0xc6, 0x66,
		0xde, 0x19, 0x9e, 0x34, 0xef, 0x46, 0xbf, 0x2b, 0xc1, 0x78, 0xbb, 0x25, 0x1d, 0x3a, 0xdb, 0x1b,
		0x17, 0xad, 0x25, 0x45, 0xe1, 0xdc, 0x01, 0x30, 0xb9, 0x28, 0x0b, 0x54, 0x94, 0x59, 0xf4, 0xdc,
		0x01, 0x44, 0x99, 0x09, 0xee, 0xef, 0xff, 0x6f, 0x09, 0xee, 0xed, 0xba, 0x42, 0x42, 0xb3, 0xbd,
		0x71, 0xd9, 0xa5, 0x76, 0x2a, 0x94, 0x7e, 0x18, 0x12, 0x5c, 0xe2, 0xe7, 0xa9, 0xc4, 0x97, 0xd1,
		0xe2, 0x41, 0x24, 0x6e, 0xfb, 0x12, 0x05, 0xfd, 0x76, 0xf8, 0x64, 0x61, 0x77, 0x77, 0x6a, 0x59,
		0x78, 0xc4, 0x4c, 0x8c, 0xd6, 0xa2, 0x56, 0x7e, 0x0b, 0x15, 0x41, 0x41, 0x6b, 0x3f, 0xa4, 0xd1,
		0x66, 0xde, 0x19, 0x0e, 0xfc, 0xef, 0x46, 0xff, 0x4b, 0x6a, 0x7f, 0x50, 0xf0, 0x99, 0xae, 0x2c,
		0x76, 0x5e, 0x54, 0x15, 0xce, 0xee, 0x1f, 0x91, 0x0b, 0xd9, 0xa0, 0x42, 0xd6, 0x10, 0xbe, 0xd3,
		0x42, 0xb6, 0x35, 0x22, 0xfa, 0x9a, 0x04, 0xe3, 0xed, 0xd6, 0x24, 0x31, 0xd3, 0xb2, 0xcb, 0x22,
		0x2b, 0x66, 0x5a, 0x76, 0x5b, 0x00, 0xc9, 0x6f, 0xa2, 0xc2, 0x9f, 0x41, 0x4f, 0x77, 0x12, 0xbe,
		0xab, 0x15, 0xc9, 0x5c, 0xec, 0x5a, 0xe4, 0xc7, 0xcc, 0xc5, 0x5e, 0xd6, 0x31, 0x31, 0x73, 0xb1,
		0xa7, 0x35, 0x46, 0xfc, 0x5c, 0xf4, 0x24, 0xeb, 0xd1, 0x8c, 0x0e, 0xfa, 0x4d, 0x09, 0x86, 0x42,
		0x15, 0x31, 0x7a, 0xb2, 0x2b, 0xa3, 0xed, 0x16, 0x0c, 0x85, 0x53, 0xfb, 0x41, 0xe1, 0xb2, 0x2c,
		0x52, 0x59, 0xe6, 0xd0, 0xec, 0x41, 0x64, 0x09, 0xbf, 0x2b, 0xfd, 0x86, 0x04, 0x63, 0x6d, 0xaa,
		0xcc, 0x98, 0x59, 0xd8, 0xb9, 0x68, 0x2e, 0x9c, 0xdd, 0x3f, 0x22, 0x97, 0xea, 0x02, 0x95, 0xea,
		0x27, 0xd0, 0xb3, 0x07, 0x91, 0x2a, 0x90, 0x9f, 0x6f, 0xf9, 0xe7, 0xae, 0x02, 0xe3, 0xa0, 0x33,
		0xfb, 0x64, 0x4c, 0x08, 0xf4, 0xcc, 0xbe, 0xf1, 0xb8, 0x3c, 0x2f, 0x50, 0x79, 0x9e, 0x47, 0xab,
		0x3f, 0x9c, 0x3c, 0xad, 0x69, 0xfd, 0x8b, 0xad, 0x37, 0x00, 0xbb, 0x7b, 0x51, 0xdb, 0x62, 0xb5,
		0xf0, 0xd4, 0xbe, 0x70, 0xb8, 0x50, 0x67, 0xa9, 0x50, 0xa7, 0xd0, 0x13, 0x9d, 0x84, 0x0a, 0x1c,
		0xae, 0xd3, 0x8d, 0x6d, 0x73, 0xe6, 0x9d, 0xac, 0x04, 0x7e, 0x37, 0xfa, 0x29, 0x71, 0xb0, 0xe9,
		0x44, 0xd7, 0x71, 0x03, 0x75, 0x6c, 0xe1, 0x91, 0x1e, 0x20, 0x39, 0x5f, 0x0f, 0x50, 0xbe, 0x26,
		0xd0, 0xf1, 0x4e, 0x7c, 0x91, 0x5a, 0x16, 0x7d, 0x50, 0xf2, 0xce, 0x42, 0x9e, 0xec, 0x4e, 0x3b,
		0x58, 0xec, 0x16, 0x1e, 0xed, 0x09, 0x96, 0x73, 0xf2, 0x10, 0xe5, 0x64, 0x0a, 0x4d, 0x74, 0xe4,
		0x84, 0x95, 0xbe, 0x77, 0xfa, 0xe4, 0xc0, 0x8d, 0xa3, 0x30, 0xd9, 0x61, 0x44, 0xf7, 0x7a, 0xcc,
		0x3b, 0xae, 0x2e, 0x17, 0x61, 0x63, 0x2f, 0xba, 0x76, 0xb8, 0x5a, 0x7b, 0xf0, 0xeb, 0xaf, 0xbd,
		0xbd, 0x10, 0xfb, 0xb7, 0x29, 0x40, 0xcb, 0x4e, 0x6d, 0xce, 0xc6, 0xec, 0x9f, 0xda, 0xf1, 0x59,
		0x1e, 0xb9, 0xe1, 0x25, 0xfd, 0x50, 0x37, 0xbc, 0x96, 0x43, 0x77, 0xa6, 0x12, 0xfb, 0xbb, 0x97,
		0xd9, 0xf3, 0xc5, 0xa9, 0xe4, 0x8f, 0xe4, 0xe2, 0x54, 0xfb, 0x73, 0xd5, 0xa9, 0x3b, 0x77, 0x01,
		0xa3, 0xef, 0xa0, 0x97, 0x50, 0xf8, 0x7d, 0xc8, 0xfe, 0x2e, 0xf7, 0x21, 0xf3, 0x1d, 0x2f, 0x3d,
		0x72, 0x6c, 0x74, 0x5a, 0x7c, 0xa0, 0x77, 0xa0, 0xb7, 0x93, 0xb0, 0xfc, 0x0b, 0xbe, 0xfe, 0x16,
		0xc2, 0x71, 0x28, 0xb4, 0xba, 0x93, 0x37, 0xa9, 0x3f, 0x9a, 0x84, 0xdc, 0xb2, 0x53, 0x2b, 0x57,
		0x75, 0xf7, 0x2e, 0xf9, 0xda, 0x73, 0x9d, 0x2f, 0xb5, 0xa0, 0xdb, 0xb7, 0x26, 0x87, 0x99, 0x4e,
		0xbb, 0x68, 0xb2, 0x01, 0x23, 0x91, 0xab, 0xc4, 0xdc, 0xb3, 0xe6, 0x0f, 0x72, 0xa3, 0x39, 0x42,
		0x4a, 0xa6, 0x77, 0x10, 0x02, 0xfe, 0x8d, 0xae, 0xb7, 0x77, 0x66, 0xe6, 0x50, 0x17, 0xef, 0xe6,
		0x0d, 0x40, 0xdf, 0x66, 0x05, 0xc8, 0x47, 0x8d, 0xe2, 0x59, 0xec, 0x8f, 0x25, 0x18, 0x5c, 0x76,
		0x44, 0x29, 0x88, 0x7f, 0x4c, 0xef, 0x1f, 0x3d, 0xe3, 0x7d, 0x67, 0x35, 0xd9, 0x9b, 0xdf, 0x8a,
		0x6f, 0xaf, 0xfa, 0x4a, 0x38, 0x0c, 0x63, 0x01, 0x39, 0x3d, 0xf9, 0x7f, 0x27, 0x41, 0xe3, 0x63,
		0x09, 0xd7, 0x74, 0xc3, 0xab, 0x22, 0xf1, 0x5f, 0xd5, 0xdb, 0x15, 0xbe, 0x9e, 0x53, 0x07, 0xd5,
		0xf3, 0x2e, 0x0d, 0x10, 0x11, 0x7d, 0x7a, 0x1b, 0x5f, 0xcb, 0xad, 0x77, 0x7f, 0xa4, 0x7d, 0x7c,
		0x56, 0x27, 0x72, 0xc3, 0x47, 0x7e, 0x5d, 0x82, 0xa1, 0x65, 0xa7, 0xb6, 0x69, 0x54, 0xff, 0x9f,
		0xf7, 0xdf, 0x6d, 0x38, 0x1c, 0x92, 0xf4, 0x2e, 0xa9, 0xf4, 0xd4, 0xab, 0x29, 0x48, 0x2e, 0x3b,
		0x35, 0xf4, 0x12, 0x8c, 0x44, 0x8b, 0x86, 0x8e, 0xb5, 0x60, 0x6b, 0x46, 0xe8, 0xbc, 0x5e, 0xeb,
		0x9c, 0x3d, 0xd0, 0x2e, 0x0c, 0x85, 0x33, 0xc7, 0x89, 0x2e, 0x44, 0x42, 0x90, 0x85, 0x27, 0x7a,
		0x85, 0xf4, 0x06, 0x7b, 0x07, 0xa4, 0xbd, 0xa0, 0x77, 0x7f, 0x17, 0x6c, 0x01, 0xd4, 0xb9, 0xba,
		0x6d, 0x13, 0x56, 0x88, 0xf6, 0xa2, 0x21, 0xa5, 0x9b, 0xf6, 0x22, 0xb0, 0x5d, 0xb5, 0xd7, 0x69,
		0x6a, 0x6d, 0x01, 0x04, 0xe6, 0xc1, 0x83, 0x5d, 0x28, 0xf8, 0x60, 0x85, 0xc7, 0x7b, 0x02, 0xf3,
		0x5e, 0x3a, 0xdd, 0xe1, 0x62, 0xfc, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0xa3, 0xcd, 0x83, 0x8b,
		0x22, 0x94, 0x00, 0x00,
	}
	r := bytes.NewReader(gzipped)
	gzipr, err := compress_gzip.NewReader(r)
	if err != nil {
		panic(err)
	}
	ungzipped, err := io_ioutil.ReadAll(gzipr)
	if err != nil {
		panic(err)
	}
	if err := github_com_gogo_protobuf_proto.Unmarshal(ungzipped, d); err != nil {
		panic(err)
	}
	return d
}
func (this *CommissionRates) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CommissionRates)
	if !ok {
		that2, ok := that.(CommissionRates)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Rate.Equal(that1.Rate) {
		return false
	}
	if !this.MaxRate.Equal(that1.MaxRate) {
		return false
	}
	if !this.MaxChangeRate.Equal(that1.MaxChangeRate) {
		return false
	}
	return true
}
func (this *Commission) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Commission)
	if !ok {
		that2, ok := that.(Commission)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CommissionRates.Equal(&that1.CommissionRates) {
		return false
	}
	if !this.UpdateTime.Equal(that1.UpdateTime) {
		return false
	}
	return true
}
func (this *Description) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Description)
	if !ok {
		that2, ok := that.(Description)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Moniker != that1.Moniker {
		return false
	}
	if this.Identity != that1.Identity {
		return false
	}
	if this.Website != that1.Website {
		return false
	}
	if this.SecurityContact != that1.SecurityContact {
		return false
	}
	if this.Details != that1.Details {
		return false
	}
	return true
}
func (this *UnbondingDelegationEntry) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UnbondingDelegationEntry)
	if !ok {
		that2, ok := that.(UnbondingDelegationEntry)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CreationHeight != that1.CreationHeight {
		return false
	}
	if !this.CompletionTime.Equal(that1.CompletionTime) {
		return false
	}
	if !this.InitialBalance.Equal(that1.InitialBalance) {
		return false
	}
	if !this.Balance.Equal(that1.Balance) {
		return false
	}
	return true
}
func (this *RedelegationEntry) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RedelegationEntry)
	if !ok {
		that2, ok := that.(RedelegationEntry)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CreationHeight != that1.CreationHeight {
		return false
	}
	if !this.CompletionTime.Equal(that1.CompletionTime) {
		return false
	}
	if !this.InitialBalance.Equal(that1.InitialBalance) {
		return false
	}
	if !this.SharesDst.Equal(that1.SharesDst) {
		return false
	}
	return true
}
func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UnbondingTime != that1.UnbondingTime {
		return false
	}
	if this.MaxValidators != that1.MaxValidators {
		return false
	}
	if this.MaxEntries != that1.MaxEntries {
		return false
	}
	if this.HistoricalEntries != that1.HistoricalEntries {
		return false
	}
	if this.BondDenom != that1.BondDenom {
		return false
	}
	return true
}
func (this *RedelegationEntryResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RedelegationEntryResponse)
	if !ok {
		that2, ok := that.(RedelegationEntryResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RedelegationEntry.Equal(&that1.RedelegationEntry) {
		return false
	}
	if !this.Balance.Equal(that1.Balance) {
		return false
	}
	return true
}
func (this *Pool) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Pool)
	if !ok {
		that2, ok := that.(Pool)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NotBondedTokens.Equal(that1.NotBondedTokens) {
		return false
	}
	if !this.BondedTokens.Equal(that1.BondedTokens) {
		return false
	}
	return true
}
func (m *HistoricalInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HistoricalInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoricalInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Valset) > 0 {
		for iNdEx := len(m.Valset) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Valset[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStaking(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CommissionRates) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommissionRates) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommissionRates) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MaxChangeRate.Size()
		i -= size
		if _, err := m.MaxChangeRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.MaxRate.Size()
		i -= size
		if _, err := m.MaxRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Rate.Size()
		i -= size
		if _, err := m.Rate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Commission) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Commission) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Commission) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.UpdateTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdateTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintStaking(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x12
	{
		size, err := m.CommissionRates.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Description) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Description) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Description) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Details) > 0 {
		i -= len(m.Details)
		copy(dAtA[i:], m.Details)
		i = encodeVarintStaking(dAtA, i, uint64(len(m.Details)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SecurityContact) > 0 {
		i -= len(m.SecurityContact)
		copy(dAtA[i:], m.SecurityContact)
		i = encodeVarintStaking(dAtA, i, uint64(len(m.SecurityContact)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Website) > 0 {
		i -= len(m.Website)
		copy(dAtA[i:], m.Website)
		i = encodeVarintStaking(dAtA, i, uint64(len(m.Website)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintStaking(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Moniker) > 0 {
		i -= len(m.Moniker)
		copy(dAtA[i:], m.Moniker)
		i = encodeVarintStaking(dAtA, i, uint64(len(m.Moniker)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Validator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Validator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Validator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MinSelfDelegation.Size()
		i -= size
		if _, err := m.MinSelfDelegation.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size, err := m.Commission.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	n5, err5 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.UnbondingTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.UnbondingTime):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintStaking(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x4a
	if m.UnbondingHeight != 0 {
		i = encodeVarintStaking(dAtA, i, uint64(m.UnbondingHeight))
		i--
		dAtA[i] = 0x40
	}
	{
		size, err := m.Description.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.DelegatorShares.Size()
		i -= size
		if _, err := m.DelegatorShares.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.Tokens.Size()
		i -= size
		if _, err := m.Tokens.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.Status != 0 {
		i = encodeVarintStaking(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if m.Jailed {
		i--
		if m.Jailed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.ConsensusPubkey != nil {
		{
			size, err := m.ConsensusPubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStaking(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintStaking(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ValAddresses) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValAddresses) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValAddresses) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for iNdEx := len(m.Addresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Addresses[iNdEx])
			copy(dAtA[i:], m.Addresses[iNdEx])
			i = encodeVarintStaking(dAtA, i, uint64(len(m.Addresses[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DVPair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DVPair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DVPair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintStaking(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintStaking(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DVPairs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DVPairs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DVPairs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pairs) > 0 {
		for iNdEx := len(m.Pairs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pairs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStaking(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DVVTriplet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DVVTriplet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DVVTriplet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorDstAddress) > 0 {
		i -= len(m.ValidatorDstAddress)
		copy(dAtA[i:], m.ValidatorDstAddress)
		i = encodeVarintStaking(dAtA, i, uint64(len(m.ValidatorDstAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ValidatorSrcAddress) > 0 {
		i -= len(m.ValidatorSrcAddress)
		copy(dAtA[i:], m.ValidatorSrcAddress)
		i = encodeVarintStaking(dAtA, i, uint64(len(m.ValidatorSrcAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintStaking(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DVVTriplets) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DVVTriplets) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DVVTriplets) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Triplets) > 0 {
		for iNdEx := len(m.Triplets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Triplets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStaking(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Delegation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Delegation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Delegation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Shares.Size()
		i -= size
		if _, err := m.Shares.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintStaking(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintStaking(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UnbondingDelegation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnbondingDelegation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnbondingDelegation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for iNdEx := len(m.Entries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStaking(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintStaking(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintStaking(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UnbondingDelegationEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnbondingDelegationEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnbondingDelegationEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Balance.Size()
		i -= size
		if _, err := m.Balance.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.InitialBalance.Size()
		i -= size
		if _, err := m.InitialBalance.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	n8, err8 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CompletionTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CompletionTime):])
	if err8 != nil {
		return 0, err8
	}
	i -= n8
	i = encodeVarintStaking(dAtA, i, uint64(n8))
	i--
	dAtA[i] = 0x12
	if m.CreationHeight != 0 {
		i = encodeVarintStaking(dAtA, i, uint64(m.CreationHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RedelegationEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RedelegationEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RedelegationEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.SharesDst.Size()
		i -= size
		if _, err := m.SharesDst.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.InitialBalance.Size()
		i -= size
		if _, err := m.InitialBalance.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	n9, err9 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CompletionTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CompletionTime):])
	if err9 != nil {
		return 0, err9
	}
	i -= n9
	i = encodeVarintStaking(dAtA, i, uint64(n9))
	i--
	dAtA[i] = 0x12
	if m.CreationHeight != 0 {
		i = encodeVarintStaking(dAtA, i, uint64(m.CreationHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Redelegation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Redelegation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Redelegation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for iNdEx := len(m.Entries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStaking(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ValidatorDstAddress) > 0 {
		i -= len(m.ValidatorDstAddress)
		copy(dAtA[i:], m.ValidatorDstAddress)
		i = encodeVarintStaking(dAtA, i, uint64(len(m.ValidatorDstAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ValidatorSrcAddress) > 0 {
		i -= len(m.ValidatorSrcAddress)
		copy(dAtA[i:], m.ValidatorSrcAddress)
		i = encodeVarintStaking(dAtA, i, uint64(len(m.ValidatorSrcAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintStaking(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BondDenom) > 0 {
		i -= len(m.BondDenom)
		copy(dAtA[i:], m.BondDenom)
		i = encodeVarintStaking(dAtA, i, uint64(len(m.BondDenom)))
		i--
		dAtA[i] = 0x2a
	}
	if m.HistoricalEntries != 0 {
		i = encodeVarintStaking(dAtA, i, uint64(m.HistoricalEntries))
		i--
		dAtA[i] = 0x20
	}
	if m.MaxEntries != 0 {
		i = encodeVarintStaking(dAtA, i, uint64(m.MaxEntries))
		i--
		dAtA[i] = 0x18
	}
	if m.MaxValidators != 0 {
		i = encodeVarintStaking(dAtA, i, uint64(m.MaxValidators))
		i--
		dAtA[i] = 0x10
	}
	n10, err10 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.UnbondingTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.UnbondingTime):])
	if err10 != nil {
		return 0, err10
	}
	i -= n10
	i = encodeVarintStaking(dAtA, i, uint64(n10))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *DelegationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Balance.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Delegation.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *RedelegationEntryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RedelegationEntryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RedelegationEntryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Balance.Size()
		i -= size
		if _, err := m.Balance.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.RedelegationEntry.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *RedelegationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RedelegationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RedelegationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for iNdEx := len(m.Entries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStaking(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Redelegation.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Pool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.BondedTokens.Size()
		i -= size
		if _, err := m.BondedTokens.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.NotBondedTokens.Size()
		i -= size
		if _, err := m.NotBondedTokens.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintStaking(dAtA []byte, offset int, v uint64) int {
	offset -= sovStaking(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *HistoricalInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Header.Size()
	n += 1 + l + sovStaking(uint64(l))
	if len(m.Valset) > 0 {
		for _, e := range m.Valset {
			l = e.Size()
			n += 1 + l + sovStaking(uint64(l))
		}
	}
	return n
}

func (m *CommissionRates) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Rate.Size()
	n += 1 + l + sovStaking(uint64(l))
	l = m.MaxRate.Size()
	n += 1 + l + sovStaking(uint64(l))
	l = m.MaxChangeRate.Size()
	n += 1 + l + sovStaking(uint64(l))
	return n
}

func (m *Commission) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CommissionRates.Size()
	n += 1 + l + sovStaking(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdateTime)
	n += 1 + l + sovStaking(uint64(l))
	return n
}

func (m *Description) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Moniker)
	if l > 0 {
		n += 1 + l + sovStaking(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovStaking(uint64(l))
	}
	l = len(m.Website)
	if l > 0 {
		n += 1 + l + sovStaking(uint64(l))
	}
	l = len(m.SecurityContact)
	if l > 0 {
		n += 1 + l + sovStaking(uint64(l))
	}
	l = len(m.Details)
	if l > 0 {
		n += 1 + l + sovStaking(uint64(l))
	}
	return n
}

func (m *Validator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovStaking(uint64(l))
	}
	if m.ConsensusPubkey != nil {
		l = m.ConsensusPubkey.Size()
		n += 1 + l + sovStaking(uint64(l))
	}
	if m.Jailed {
		n += 2
	}
	if m.Status != 0 {
		n += 1 + sovStaking(uint64(m.Status))
	}
	l = m.Tokens.Size()
	n += 1 + l + sovStaking(uint64(l))
	l = m.DelegatorShares.Size()
	n += 1 + l + sovStaking(uint64(l))
	l = m.Description.Size()
	n += 1 + l + sovStaking(uint64(l))
	if m.UnbondingHeight != 0 {
		n += 1 + sovStaking(uint64(m.UnbondingHeight))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.UnbondingTime)
	n += 1 + l + sovStaking(uint64(l))
	l = m.Commission.Size()
	n += 1 + l + sovStaking(uint64(l))
	l = m.MinSelfDelegation.Size()
	n += 1 + l + sovStaking(uint64(l))
	return n
}

func (m *ValAddresses) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for _, s := range m.Addresses {
			l = len(s)
			n += 1 + l + sovStaking(uint64(l))
		}
	}
	return n
}

func (m *DVPair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovStaking(uint64(l))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovStaking(uint64(l))
	}
	return n
}

func (m *DVPairs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pairs) > 0 {
		for _, e := range m.Pairs {
			l = e.Size()
			n += 1 + l + sovStaking(uint64(l))
		}
	}
	return n
}

func (m *DVVTriplet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovStaking(uint64(l))
	}
	l = len(m.ValidatorSrcAddress)
	if l > 0 {
		n += 1 + l + sovStaking(uint64(l))
	}
	l = len(m.ValidatorDstAddress)
	if l > 0 {
		n += 1 + l + sovStaking(uint64(l))
	}
	return n
}

func (m *DVVTriplets) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Triplets) > 0 {
		for _, e := range m.Triplets {
			l = e.Size()
			n += 1 + l + sovStaking(uint64(l))
		}
	}
	return n
}

func (m *Delegation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovStaking(uint64(l))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovStaking(uint64(l))
	}
	l = m.Shares.Size()
	n += 1 + l + sovStaking(uint64(l))
	return n
}

func (m *UnbondingDelegation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovStaking(uint64(l))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovStaking(uint64(l))
	}
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovStaking(uint64(l))
		}
	}
	return n
}

func (m *UnbondingDelegationEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreationHeight != 0 {
		n += 1 + sovStaking(uint64(m.CreationHeight))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CompletionTime)
	n += 1 + l + sovStaking(uint64(l))
	l = m.InitialBalance.Size()
	n += 1 + l + sovStaking(uint64(l))
	l = m.Balance.Size()
	n += 1 + l + sovStaking(uint64(l))
	return n
}

func (m *RedelegationEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreationHeight != 0 {
		n += 1 + sovStaking(uint64(m.CreationHeight))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CompletionTime)
	n += 1 + l + sovStaking(uint64(l))
	l = m.InitialBalance.Size()
	n += 1 + l + sovStaking(uint64(l))
	l = m.SharesDst.Size()
	n += 1 + l + sovStaking(uint64(l))
	return n
}

func (m *Redelegation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovStaking(uint64(l))
	}
	l = len(m.ValidatorSrcAddress)
	if l > 0 {
		n += 1 + l + sovStaking(uint64(l))
	}
	l = len(m.ValidatorDstAddress)
	if l > 0 {
		n += 1 + l + sovStaking(uint64(l))
	}
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovStaking(uint64(l))
		}
	}
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.UnbondingTime)
	n += 1 + l + sovStaking(uint64(l))
	if m.MaxValidators != 0 {
		n += 1 + sovStaking(uint64(m.MaxValidators))
	}
	if m.MaxEntries != 0 {
		n += 1 + sovStaking(uint64(m.MaxEntries))
	}
	if m.HistoricalEntries != 0 {
		n += 1 + sovStaking(uint64(m.HistoricalEntries))
	}
	l = len(m.BondDenom)
	if l > 0 {
		n += 1 + l + sovStaking(uint64(l))
	}
	return n
}

func (m *DelegationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Delegation.Size()
	n += 1 + l + sovStaking(uint64(l))
	l = m.Balance.Size()
	n += 1 + l + sovStaking(uint64(l))
	return n
}

func (m *RedelegationEntryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.RedelegationEntry.Size()
	n += 1 + l + sovStaking(uint64(l))
	l = m.Balance.Size()
	n += 1 + l + sovStaking(uint64(l))
	return n
}

func (m *RedelegationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Redelegation.Size()
	n += 1 + l + sovStaking(uint64(l))
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovStaking(uint64(l))
		}
	}
	return n
}

func (m *Pool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.NotBondedTokens.Size()
	n += 1 + l + sovStaking(uint64(l))
	l = m.BondedTokens.Size()
	n += 1 + l + sovStaking(uint64(l))
	return n
}

func sovStaking(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStaking(x uint64) (n int) {
	return sovStaking(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ValAddresses) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ValAddresses{`,
		`Addresses:` + fmt.Sprintf("%v", this.Addresses) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringStaking(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *HistoricalInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HistoricalInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HistoricalInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Valset = append(m.Valset, Validator{})
			if err := m.Valset[len(m.Valset)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStaking
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommissionRates) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommissionRates: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommissionRates: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Rate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxChangeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxChangeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStaking
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Commission) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Commission: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Commission: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommissionRates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommissionRates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.UpdateTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStaking
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Description) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Description: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Description: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Moniker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Moniker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Website", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Website = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityContact", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityContact = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Details = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStaking
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Validator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Validator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Validator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusPubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConsensusPubkey == nil {
				m.ConsensusPubkey = &types1.Any{}
			}
			if err := m.ConsensusPubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jailed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Jailed = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= BondStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Tokens.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorShares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DelegatorShares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Description.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingHeight", wireType)
			}
			m.UnbondingHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnbondingHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.UnbondingTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commission", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Commission.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinSelfDelegation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinSelfDelegation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStaking
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValAddresses) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValAddresses: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValAddresses: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addresses = append(m.Addresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStaking
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DVPair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DVPair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DVPair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStaking
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DVPairs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DVPairs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DVPairs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pairs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pairs = append(m.Pairs, DVPair{})
			if err := m.Pairs[len(m.Pairs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStaking
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DVVTriplet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DVVTriplet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DVVTriplet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorSrcAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorSrcAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorDstAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorDstAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStaking
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DVVTriplets) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DVVTriplets: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DVVTriplets: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Triplets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Triplets = append(m.Triplets, DVVTriplet{})
			if err := m.Triplets[len(m.Triplets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStaking
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Delegation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Delegation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Delegation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Shares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStaking
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnbondingDelegation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnbondingDelegation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnbondingDelegation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, UnbondingDelegationEntry{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStaking
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnbondingDelegationEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnbondingDelegationEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnbondingDelegationEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationHeight", wireType)
			}
			m.CreationHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreationHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CompletionTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InitialBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Balance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStaking
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RedelegationEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RedelegationEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RedelegationEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationHeight", wireType)
			}
			m.CreationHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreationHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CompletionTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InitialBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharesDst", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SharesDst.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStaking
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Redelegation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Redelegation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Redelegation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorSrcAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorSrcAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorDstAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorDstAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, RedelegationEntry{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStaking
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.UnbondingTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxValidators", wireType)
			}
			m.MaxValidators = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxValidators |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxEntries", wireType)
			}
			m.MaxEntries = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxEntries |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoricalEntries", wireType)
			}
			m.HistoricalEntries = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HistoricalEntries |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BondDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStaking
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Delegation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Balance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStaking
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RedelegationEntryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RedelegationEntryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RedelegationEntryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedelegationEntry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RedelegationEntry.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Balance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStaking
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RedelegationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RedelegationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RedelegationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Redelegation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Redelegation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, RedelegationEntryResponse{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStaking
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Pool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotBondedTokens", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NotBondedTokens.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondedTokens", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BondedTokens.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStaking
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStaking(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStaking
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStaking
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStaking
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStaking
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStaking        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStaking          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStaking = fmt.Errorf("proto: unexpected end of group")
)
