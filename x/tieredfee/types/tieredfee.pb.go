// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmos/tieredfee/v1beta1/tieredfee.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TierParams struct {
	// priority in tendermint mempool
	Priority        int64                                       `protobuf:"varint,1,opt,name=priority,proto3" json:"priority,omitempty"`
	InitialGasPrice github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,2,rep,name=initial_gas_price,json=initialGasPrice,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"initial_gas_price"`
	// the target saturation of block
	ParentGasTarget uint64 `protobuf:"varint,3,opt,name=parent_gas_target,json=parentGasTarget,proto3" json:"parent_gas_target,omitempty"`
	// decides the change speed
	ChangeDenominator uint32 `protobuf:"varint,4,opt,name=change_denominator,json=changeDenominator,proto3" json:"change_denominator,omitempty"`
	// optional lower bound of the price adjustment
	MinGasPrice github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,5,rep,name=min_gas_price,json=minGasPrice,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"min_gas_price"`
	// optional upper bound of the price adjustment
	MaxGasPrice github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,6,rep,name=max_gas_price,json=maxGasPrice,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"max_gas_price"`
}

func (m *TierParams) Reset()         { *m = TierParams{} }
func (m *TierParams) String() string { return proto.CompactTextString(m) }
func (*TierParams) ProtoMessage()    {}
func (*TierParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_4bad37281a669a52, []int{0}
}
func (m *TierParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TierParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TierParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TierParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TierParams.Merge(m, src)
}
func (m *TierParams) XXX_Size() int {
	return m.Size()
}
func (m *TierParams) XXX_DiscardUnknown() {
	xxx_messageInfo_TierParams.DiscardUnknown(m)
}

var xxx_messageInfo_TierParams proto.InternalMessageInfo

func (m *TierParams) GetPriority() int64 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *TierParams) GetInitialGasPrice() github_com_cosmos_cosmos_sdk_types.DecCoins {
	if m != nil {
		return m.InitialGasPrice
	}
	return nil
}

func (m *TierParams) GetParentGasTarget() uint64 {
	if m != nil {
		return m.ParentGasTarget
	}
	return 0
}

func (m *TierParams) GetChangeDenominator() uint32 {
	if m != nil {
		return m.ChangeDenominator
	}
	return 0
}

func (m *TierParams) GetMinGasPrice() github_com_cosmos_cosmos_sdk_types.DecCoins {
	if m != nil {
		return m.MinGasPrice
	}
	return nil
}

func (m *TierParams) GetMaxGasPrice() github_com_cosmos_cosmos_sdk_types.DecCoins {
	if m != nil {
		return m.MaxGasPrice
	}
	return nil
}

type Params struct {
	Tiers []TierParams `protobuf:"bytes,1,rep,name=tiers,proto3" json:"tiers"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_4bad37281a669a52, []int{1}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetTiers() []TierParams {
	if m != nil {
		return m.Tiers
	}
	return nil
}

type ExtensionOptionTieredTx struct {
	FeeTier uint32 `protobuf:"varint,1,opt,name=fee_tier,json=feeTier,proto3" json:"fee_tier,omitempty"`
}

func (m *ExtensionOptionTieredTx) Reset()         { *m = ExtensionOptionTieredTx{} }
func (m *ExtensionOptionTieredTx) String() string { return proto.CompactTextString(m) }
func (*ExtensionOptionTieredTx) ProtoMessage()    {}
func (*ExtensionOptionTieredTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_4bad37281a669a52, []int{2}
}
func (m *ExtensionOptionTieredTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExtensionOptionTieredTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExtensionOptionTieredTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExtensionOptionTieredTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtensionOptionTieredTx.Merge(m, src)
}
func (m *ExtensionOptionTieredTx) XXX_Size() int {
	return m.Size()
}
func (m *ExtensionOptionTieredTx) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtensionOptionTieredTx.DiscardUnknown(m)
}

var xxx_messageInfo_ExtensionOptionTieredTx proto.InternalMessageInfo

func (m *ExtensionOptionTieredTx) GetFeeTier() uint32 {
	if m != nil {
		return m.FeeTier
	}
	return 0
}

func init() {
	proto.RegisterType((*TierParams)(nil), "cosmos.tieredfee.v1beta1.TierParams")
	proto.RegisterType((*Params)(nil), "cosmos.tieredfee.v1beta1.Params")
	proto.RegisterType((*ExtensionOptionTieredTx)(nil), "cosmos.tieredfee.v1beta1.ExtensionOptionTieredTx")
}

func init() {
	proto.RegisterFile("cosmos/tieredfee/v1beta1/tieredfee.proto", fileDescriptor_4bad37281a669a52)
}

var fileDescriptor_4bad37281a669a52 = []byte{
	// 437 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x93, 0x31, 0x6f, 0xd3, 0x40,
	0x14, 0xc7, 0x6d, 0x92, 0x86, 0xea, 0xaa, 0xa8, 0xca, 0x09, 0x09, 0x13, 0x21, 0x27, 0x8a, 0x18,
	0x2c, 0x50, 0xcf, 0x2a, 0x65, 0x62, 0x42, 0xa1, 0xa8, 0x6c, 0x44, 0x56, 0x26, 0x96, 0xe8, 0xec,
	0xbc, 0xb8, 0x4f, 0xe0, 0x3b, 0xeb, 0xee, 0x8a, 0xdc, 0x81, 0xef, 0xc0, 0xc8, 0xc8, 0xcc, 0x27,
	0xe9, 0xd8, 0x91, 0x09, 0x50, 0xf2, 0x05, 0xf8, 0x08, 0xe8, 0xce, 0x4e, 0x9d, 0x05, 0xb6, 0x4c,
	0xb6, 0xdf, 0xfb, 0xdf, 0xfb, 0xbd, 0xbf, 0xfc, 0x3f, 0x12, 0x65, 0x52, 0x17, 0x52, 0xc7, 0x06,
	0x41, 0xc1, 0x72, 0x05, 0x10, 0x7f, 0x3a, 0x4d, 0xc1, 0xf0, 0xd3, 0xb6, 0xc2, 0x4a, 0x25, 0x8d,
	0xa4, 0x41, 0xad, 0x64, 0x6d, 0xbd, 0x51, 0x0e, 0x1f, 0xe4, 0x32, 0x97, 0x4e, 0x14, 0xdb, 0xb7,
	0x5a, 0x3f, 0x0c, 0x9b, 0xc9, 0x29, 0xd7, 0xed, 0xd0, 0x4c, 0xa2, 0xa8, 0xfb, 0x93, 0x3f, 0x1d,
	0x42, 0xe6, 0x08, 0x6a, 0xc6, 0x15, 0x2f, 0x34, 0x1d, 0x92, 0xc3, 0x52, 0xa1, 0x54, 0x68, 0xae,
	0x03, 0x7f, 0xec, 0x47, 0x9d, 0xe4, 0xee, 0x9b, 0x7e, 0x26, 0x03, 0x14, 0x68, 0x90, 0x7f, 0x5c,
	0xe4, 0x5c, 0x2f, 0x4a, 0x85, 0x19, 0x04, 0xf7, 0xc6, 0x9d, 0xe8, 0xe8, 0xf9, 0x63, 0xd6, 0xac,
	0x65, 0x31, 0xdb, 0x8d, 0xd8, 0x39, 0x64, 0xaf, 0x25, 0x8a, 0xe9, 0xd9, 0xcd, 0xcf, 0x91, 0xf7,
	0xfd, 0xd7, 0xe8, 0x59, 0x8e, 0xe6, 0xf2, 0x2a, 0x65, 0x99, 0x2c, 0xe2, 0x66, 0xad, 0xfa, 0x71,
	0xa2, 0x97, 0x1f, 0x62, 0x73, 0x5d, 0x82, 0xde, 0x9e, 0xd1, 0xc9, 0x71, 0xc3, 0xba, 0xe0, 0x7a,
	0x66, 0x49, 0xf4, 0x29, 0x19, 0x94, 0x5c, 0x81, 0x30, 0x8e, 0x6e, 0xb8, 0xca, 0xc1, 0x04, 0x9d,
	0xb1, 0x1f, 0x75, 0x93, 0xe3, 0xba, 0x71, 0xc1, 0xf5, 0xdc, 0x95, 0xe9, 0x09, 0xa1, 0xd9, 0x25,
	0x17, 0x39, 0x2c, 0x96, 0x20, 0x64, 0x81, 0x82, 0x1b, 0xa9, 0x82, 0xee, 0xd8, 0x8f, 0xfa, 0xc9,
	0xa0, 0xee, 0x9c, 0xb7, 0x0d, 0x7a, 0x45, 0xfa, 0x05, 0x8a, 0x1d, 0x57, 0x07, 0xfb, 0x72, 0x75,
	0x54, 0xa0, 0xb8, 0x73, 0x64, 0xb1, 0xbc, 0xda, 0xc1, 0xf6, 0xf6, 0x87, 0xe5, 0xd5, 0x16, 0x3b,
	0x99, 0x91, 0x5e, 0xf3, 0xb7, 0x5f, 0x91, 0x03, 0x9b, 0x23, 0x1d, 0xf8, 0x0e, 0xfc, 0x84, 0xfd,
	0x2b, 0x5c, 0xac, 0x8d, 0xc8, 0xb4, 0x6b, 0x17, 0x48, 0xea, 0x83, 0x2f, 0xbb, 0x5f, 0xbf, 0x8d,
	0xbc, 0xc9, 0x0b, 0xf2, 0xf0, 0x4d, 0x65, 0x40, 0x68, 0x94, 0xe2, 0x5d, 0x69, 0x50, 0x8a, 0xb9,
	0x9b, 0x30, 0xaf, 0xe8, 0x23, 0x72, 0xb8, 0x02, 0x58, 0x58, 0xb5, 0x0b, 0x54, 0x3f, 0xb9, 0xbf,
	0x02, 0xb0, 0xed, 0xe9, 0xdb, 0x9b, 0x75, 0xe8, 0xdf, 0xae, 0x43, 0xff, 0xf7, 0x3a, 0xf4, 0xbf,
	0x6c, 0x42, 0xef, 0x76, 0x13, 0x7a, 0x3f, 0x36, 0xa1, 0xf7, 0x9e, 0xfd, 0xd7, 0x5b, 0xb5, 0x73,
	0x4d, 0x9c, 0xcf, 0xb4, 0xe7, 0xb2, 0x7c, 0xf6, 0x37, 0x00, 0x00, 0xff, 0xff, 0x40, 0xc2, 0x06,
	0x5d, 0x47, 0x03, 0x00, 0x00,
}

func (m *TierParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TierParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TierParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MaxGasPrice) > 0 {
		for iNdEx := len(m.MaxGasPrice) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MaxGasPrice[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTieredfee(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.MinGasPrice) > 0 {
		for iNdEx := len(m.MinGasPrice) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MinGasPrice[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTieredfee(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.ChangeDenominator != 0 {
		i = encodeVarintTieredfee(dAtA, i, uint64(m.ChangeDenominator))
		i--
		dAtA[i] = 0x20
	}
	if m.ParentGasTarget != 0 {
		i = encodeVarintTieredfee(dAtA, i, uint64(m.ParentGasTarget))
		i--
		dAtA[i] = 0x18
	}
	if len(m.InitialGasPrice) > 0 {
		for iNdEx := len(m.InitialGasPrice) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InitialGasPrice[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTieredfee(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Priority != 0 {
		i = encodeVarintTieredfee(dAtA, i, uint64(m.Priority))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tiers) > 0 {
		for iNdEx := len(m.Tiers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tiers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTieredfee(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ExtensionOptionTieredTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExtensionOptionTieredTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExtensionOptionTieredTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FeeTier != 0 {
		i = encodeVarintTieredfee(dAtA, i, uint64(m.FeeTier))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTieredfee(dAtA []byte, offset int, v uint64) int {
	offset -= sovTieredfee(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TierParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Priority != 0 {
		n += 1 + sovTieredfee(uint64(m.Priority))
	}
	if len(m.InitialGasPrice) > 0 {
		for _, e := range m.InitialGasPrice {
			l = e.Size()
			n += 1 + l + sovTieredfee(uint64(l))
		}
	}
	if m.ParentGasTarget != 0 {
		n += 1 + sovTieredfee(uint64(m.ParentGasTarget))
	}
	if m.ChangeDenominator != 0 {
		n += 1 + sovTieredfee(uint64(m.ChangeDenominator))
	}
	if len(m.MinGasPrice) > 0 {
		for _, e := range m.MinGasPrice {
			l = e.Size()
			n += 1 + l + sovTieredfee(uint64(l))
		}
	}
	if len(m.MaxGasPrice) > 0 {
		for _, e := range m.MaxGasPrice {
			l = e.Size()
			n += 1 + l + sovTieredfee(uint64(l))
		}
	}
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tiers) > 0 {
		for _, e := range m.Tiers {
			l = e.Size()
			n += 1 + l + sovTieredfee(uint64(l))
		}
	}
	return n
}

func (m *ExtensionOptionTieredTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FeeTier != 0 {
		n += 1 + sovTieredfee(uint64(m.FeeTier))
	}
	return n
}

func sovTieredfee(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTieredfee(x uint64) (n int) {
	return sovTieredfee(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TierParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTieredfee
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TierParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TierParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			m.Priority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTieredfee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Priority |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialGasPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTieredfee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTieredfee
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTieredfee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitialGasPrice = append(m.InitialGasPrice, types.DecCoin{})
			if err := m.InitialGasPrice[len(m.InitialGasPrice)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentGasTarget", wireType)
			}
			m.ParentGasTarget = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTieredfee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParentGasTarget |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeDenominator", wireType)
			}
			m.ChangeDenominator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTieredfee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChangeDenominator |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinGasPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTieredfee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTieredfee
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTieredfee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinGasPrice = append(m.MinGasPrice, types.DecCoin{})
			if err := m.MinGasPrice[len(m.MinGasPrice)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxGasPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTieredfee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTieredfee
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTieredfee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxGasPrice = append(m.MaxGasPrice, types.DecCoin{})
			if err := m.MaxGasPrice[len(m.MaxGasPrice)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTieredfee(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTieredfee
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTieredfee
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTieredfee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTieredfee
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTieredfee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tiers = append(m.Tiers, TierParams{})
			if err := m.Tiers[len(m.Tiers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTieredfee(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTieredfee
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExtensionOptionTieredTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTieredfee
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExtensionOptionTieredTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExtensionOptionTieredTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeTier", wireType)
			}
			m.FeeTier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTieredfee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FeeTier |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTieredfee(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTieredfee
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTieredfee(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTieredfee
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTieredfee
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTieredfee
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTieredfee
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTieredfee
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTieredfee
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTieredfee        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTieredfee          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTieredfee = fmt.Errorf("proto: unexpected end of group")
)
