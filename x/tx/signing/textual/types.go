// Package textual defines the core types and interfaces for the SIGN_MODE_TEXTUAL
// implementation. It provides the Screen abstraction for displaying transaction
// data and the ValueRenderer interface for converting protobuf values to text.
package textual

import (
	"context"

	"google.golang.org/protobuf/reflect/protoreflect"
)

// Screen is the abstract unit of Textual rendering.
type Screen struct {
	// Title is the text (sequence of Unicode code points) to display first,
	// generally on the device's title section. It can be empty.
	Title string

	// Content is the text (sequence of Unicode code points) to display after
	// the Title, generally on the device's content section. It must be
	// non-empty.
	Content string

	// Indent is the indentation level of the screen.
	// Zero indicates top-level. Should be less than 16.
	Indent int

	// Expert indicates that the screen should only be displayed
	// via an opt-in from the user.
	Expert bool
}

// ValueRenderer defines an interface for converting protobuf values to and from
// textual representation. It implements the value renderer concept from ADR-050,
// providing a standardized way to display transaction data on hardware wallets
// and other user interfaces.
//
// The interface supports bidirectional conversion: Format converts protobuf values
// to human-readable screens, while Parse converts screens back to protobuf values.
type ValueRenderer interface {
	// Format renders the protobuf value to a list of screens for display.
	// Each screen represents a unit of information that can be shown to the user.
	Format(context.Context, protoreflect.Value) ([]Screen, error)

	// Parse converts screens back to the original protobuf value.
	// It must successfully parse all valid screens generated by Format.
	// Behavior on invalid screens is implementation-defined.
	Parse(context.Context, []Screen) (protoreflect.Value, error)
}

// RepeatedValueRenderer extends ValueRenderer to handle repeated protobuf fields.
// It provides specialized methods for rendering and parsing lists of values,
// which require different handling than single values due to their collection nature.
type RepeatedValueRenderer interface {
	ValueRenderer

	// FormatRepeated renders a protobuf list value to screens for display.
	// This method handles the special formatting requirements of repeated fields.
	FormatRepeated(context.Context, protoreflect.Value) ([]Screen, error)

	// ParseRepeated converts screens back to a protobuf list value.
	// The provided protoreflect.List will be mutated and populated with
	// the parsed repeated values. Behavior on invalid screens is implementation-defined.
	ParseRepeated(context.Context, []Screen, protoreflect.List) error
}
