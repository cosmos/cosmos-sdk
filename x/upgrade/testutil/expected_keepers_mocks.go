// Code generated by MockGen. DO NOT EDIT.
// Source: x/upgrade/types/expected_keepers.go

// Package testutil is a generated GoMock package.
package testutil

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockConsensusKeeper is a mock of ConsensusKeeper interface.
type MockConsensusKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockConsensusKeeperMockRecorder
}

// MockConsensusKeeperMockRecorder is the mock recorder for MockConsensusKeeper.
type MockConsensusKeeperMockRecorder struct {
	mock *MockConsensusKeeper
}

// NewMockConsensusKeeper creates a new mock instance.
func NewMockConsensusKeeper(ctrl *gomock.Controller) *MockConsensusKeeper {
	mock := &MockConsensusKeeper{ctrl: ctrl}
	mock.recorder = &MockConsensusKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsensusKeeper) EXPECT() *MockConsensusKeeperMockRecorder {
	return m.recorder
}

// AppVersion mocks base method.
func (m *MockConsensusKeeper) AppVersion(ctx context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppVersion", ctx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AppVersion indicates an expected call of AppVersion.
func (mr *MockConsensusKeeperMockRecorder) AppVersion(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppVersion", reflect.TypeOf((*MockConsensusKeeper)(nil).AppVersion), ctx)
}
